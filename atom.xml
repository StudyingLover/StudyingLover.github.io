<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>plus studio</title>
  
  
  <link href="https://studyinglover.com/atom.xml" rel="self"/>
  
  <link href="https://studyinglover.com/"/>
  <updated>2024-02-22T06:12:20.446Z</updated>
  <id>https://studyinglover.com/</id>
  
  <author>
    <name>StudyingLover</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>colab运行google最新开源模型Gemma</title>
    <link href="https://studyinglover.com/2024/02/22/colab%E8%BF%90%E8%A1%8Cgoogle%E6%9C%80%E6%96%B0%E5%BC%80%E6%BA%90%E6%A8%A1%E5%9E%8BGemma/"/>
    <id>https://studyinglover.com/2024/02/22/colab%E8%BF%90%E8%A1%8Cgoogle%E6%9C%80%E6%96%B0%E5%BC%80%E6%BA%90%E6%A8%A1%E5%9E%8BGemma/</id>
    <published>2024-02-22T14:00:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<p>Google开源了新的大模型 <a href="https://blog.google/technology/developers/gemma-open-models/">Gemma</a> ，<a href="https://ai.google.dev/gemma/?utm_source=keyword&amp;utm_medium=referral&amp;utm_campaign=gemma_cta&amp;utm_content=">Gemma</a>是一系列轻量级、最先进的开放式<a href="https://opensource.googleblog.com/2024/02/building-open-models-responsibly-gemini-era.html">模型，</a>采用与创建<a href="https://deepmind.google/technologies/gemini/#introduction">Gemini</a>模型相同的研究和技术而构建。Gemma 由 Google DeepMind 和 Google 的其他团队开发，其灵感来自 Gemini，其名称反映了拉丁语_gemma_，意思是“宝石”。除了模型权重之外，我们还发布了工具来支持开发人员创新、促进协作并指导负责任地使用 Gemma 模型。</p><p>Gemma 是为推动人工智能创新的开发人员和研究人员的开放社区而构建的。您今天就可以开始与 Gemma 合作，使用 Kaggle 中的免费访问权限、Colab 笔记本的免费套餐以及首次使用 Google Cloud 用户的 300 美元积分。研究人员还可以申请高达 50 万美元的<a href="https://docs.google.com/forms/d/e/1FAIpQLSe0grG6mRFW6dNF3Rb1h_YvKqUp2GaXiglZBgA2Os5iTLWlcg/viewform">Google Cloud 积分来加速他们的项目。</a></p><p>google提供了keras3.0来提供跨所有主要框架的推理和监督微调 (SFT) 工具链：JAX、PyTorch 和 TensorFlow 。还有 即用型<a href="http://ai.google.dev/gemma/docs/get_started">Colab</a>和<a href="https://www.kaggle.com/models/google/gemma/code">Kaggle 笔记本</a>，以及与<a href="http://huggingface.co/google">Hugging Face</a>、<a href="https://github.com/google/maxtext">MaxText</a>、<a href="https://github.com/NVIDIA/GenerativeAIExamples/tree/main/models/Gemma">NVIDIA NeMo</a>和<a href="https://github.com/NVIDIA/TensorRT-LLM">TensorRT-LLM</a>等流行工具的集成，让您可以轻松开始使用 Gemma。</p><p>google也提供了一个快速指南来使用<a href="http://ai.google.dev/gemma">ai.google.dev/gemma</a></p><h2 id="kaggle-获取访问权限">kaggle 获取访问权限</h2><p>首先访问<a href="https://www.kaggle.com/models/google/gemma">Gemma在kaggle的页面</a>，登陆你的kaggle账号</p><figure><img src="https://cdn.studyinglover.com/pic/2024/02/e770e5ca6a8c87a9367efda0d48f306b.png" alt="" /><figcaption>image.png</figcaption></figure><p>这里会有一个 Request Access,点击(我这是已经有访问权限了，你点了之后也变成这样说明就成功了)</p><p>然后我们点击kaggle的设置，按照我的截图依次点击 <img src="https://cdn.studyinglover.com/pic/2024/02/0676b9c3968534cf2f0a24fc3efa121e.png" alt="image.png" /></p><p><img src="https://cdn.studyinglover.com/pic/2024/02/d31235cf85326598d78a01d3d2a179c3.png" alt="image.png" /> <img src="https://cdn.studyinglover.com/pic/2024/02/ee052cc9137ba36a42f363d492108f73.png" alt="image.png" /> 你的浏览器会下载一个json文件，例如就像下面这样 <img src="https://cdn.studyinglover.com/pic/2024/02/8c67107479ef55d6358110e4d46778fb.png" alt="image.png" /></p><h2 id="colab运行">colab运行</h2><p>如果你有google账号那就直接打开<a href="https://colab.research.google.com/github/google/generative-ai-docs/blob/main/site/en/gemma/docs/lora_tuning.ipynb?utm_source=agd&amp;utm_medium=referral&amp;utm_campaign=open-in-colab&amp;hl=zh-cn">Gemma的colab页面</a> (没有的话就注册一个啦)</p><p>不出意外你会看到这样一个页面 <img src="https://cdn.studyinglover.com/pic/2024/02/7fc668b963da87075d5e3a2eab1f125a.png" alt="image.png" /></p><p>接下来点击右上角，按照我的截图顺序，选择显卡为t4 <img src="https://cdn.studyinglover.com/pic/2024/02/c5836766b7819385e337ce5877114a5b.png" alt="image.png" /> <img src="https://cdn.studyinglover.com/pic/2024/02/ded1ab56213ab089e2347ee0729ffab3.png" alt="image.png" /></p><p><img src="https://cdn.studyinglover.com/pic/2024/02/15fdbd16664eb511e1ec7c5653e267b8.png" alt="image.png" /> 点击保存，等待右上角变成这样，代表成功 <img src="https://cdn.studyinglover.com/pic/2024/02/5660f6ffaf4ce5a8e49f37753875194a.png" alt="image.png" /></p><p>接下来点击左侧 <img src="https://cdn.studyinglover.com/pic/2024/02/6ef657aa2cb9c7becdc67cdcc2dbc20d.png" alt="image.png" /></p><p>选择新建新密钥 <img src="https://cdn.studyinglover.com/pic/2024/02/c8f82c0c604a443f5af650b74f069e8b.png" alt="image.png" /> 先添加一个叫做 KAGGLE_USERNAME， 值写我们刚下载的json里面的username字段对应的值，</p><p>举个例子,加入我们下载的json是这样，那就填入的是example_username <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;example_username&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;12345678901112131415&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure> <img src="https://cdn.studyinglover.com/pic/2024/02/89f8465de454aa8118ed3cf6cd0c6a3c.png" alt="image.png" /> 再添加一个KAGGLE_KEY，值填写的是key对应的值，在刚才的例子那就是写12345678901112131415</p><figure><img src="https://cdn.studyinglover.com/pic/2024/02/2879bf0a0d806662d496fb33562a6a58.png" alt="" /><figcaption>image.png</figcaption></figure><p>记着打开两个的访问权限 ## 运行colab 运行notebook即可，就是点击这里的开始按钮就会执行这个小方格里的代码 <img src="https://cdn.studyinglover.com/pic/2024/02/b9bd6ed422800307321d8f7a0afa18b6.png" alt="image.png" /></p><p>里面有推理和微调的示例，感兴趣的同学可以自己实践</p><h2 id="评测">评测</h2><p>我这边运行了几个2b模型的例子，效果是实话实说，emmmmmmmmmmmm,一言难尽，可能是2b太拉胯了吧 <img src="https://cdn.studyinglover.com/pic/2024/02/a756dd4d922af5b0f45b40cdd649f646.png" alt="image.png" /></p><p>经过微调之后效果好了不少 <img src="https://cdn.studyinglover.com/pic/2024/02/d378a5211dd1157b013d61446bb8a946.png" alt="image.png" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Google开源了新的大模型 &lt;a href=&quot;https://blog.google/technology/developers/gemma-open-models/&quot;&gt;Gemma&lt;/a&gt; ，&lt;a href=&quot;https://ai.google.dev/gemma/?ut</summary>
      
    
    
    
    <category term="笔记" scheme="https://studyinglover.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Gemma" scheme="https://studyinglover.com/tags/Gemma/"/>
    
    <category term="Google" scheme="https://studyinglover.com/tags/Google/"/>
    
    <category term="大模型" scheme="https://studyinglover.com/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Sora技术报告 视频生成模型作为世界模拟器 笔记</title>
    <link href="https://studyinglover.com/2024/02/16/Sora%E6%8A%80%E6%9C%AF%E6%8A%A5%E5%91%8A%20%E8%A7%86%E9%A2%91%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B%E4%BD%9C%E4%B8%BA%E4%B8%96%E7%95%8C%E6%A8%A1%E6%8B%9F%E5%99%A8%20%E7%AC%94%E8%AE%B0/"/>
    <id>https://studyinglover.com/2024/02/16/Sora%E6%8A%80%E6%9C%AF%E6%8A%A5%E5%91%8A%20%E8%A7%86%E9%A2%91%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B%E4%BD%9C%E4%B8%BA%E4%B8%96%E7%95%8C%E6%A8%A1%E6%8B%9F%E5%99%A8%20%E7%AC%94%E8%AE%B0/</id>
    <published>2024-02-16T17:55:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sora技术报告-视频生成模型作为世界模拟器-笔记">Sora技术报告 视频生成模型作为世界模拟器 笔记</h1><p>技术报告原题目叫做 Video generation models as world simulators，翻译一下就是 <strong>视频生成模型作为世界模拟器</strong>，地址在<a href="https://openai.com/research/video-generation-models-as-world-simulators">这里</a> 。我写的时候是翻译和笔记并行，翻译感谢gpt4出色的翻译能力。</p><p>技术报告介绍了OpenAI在视频数据上大规模训练生成模型的探索，特别是在视频和图像上联合训练文本条件扩散模型，这些视频和图像具有不同的持续时间、分辨率和宽高比。通过利用在视频和图像潜码的时空补丁上操作的变压器架构，OpenAI的最大模型Sora能够生成高保真度的一分钟视频。研究结果表明，扩大视频生成模型的规模是构建物理世界通用模拟器的一个有前景的路径。</p><h2 id="主要内容">主要内容</h2><h3 id="视频数据的生成模型"><strong>视频数据的生成模型</strong></h3><p>之前的研究主要集中在使用各种方法（如循环网络、生成对抗网络、自回归变换器和扩散模型）对视频数据进行建模。Sora作为一个通用的视觉数据模型，能够生成持续时间、宽高比和分辨率各异的视频和图像，最长可达一分钟的高清视频。 <video controls="" loop="" muted="" playsinline="true" src="https://cdn.openai.com/tmp/s/title_0.mp4"></video></p><h3 id="将视觉数据转换为补丁"><strong>将视觉数据转换为补丁</strong></h3><p>受到大型语言模型在互联网规模数据上训练获得通用能力的启发，Sora采用视觉补丁作为有效的表示形式，将视频压缩成低维潜在空间，并将这些表示分解为时空补丁。 <img src="https://cdn.studyinglover.com/pic/2024/02/f76b1abdeee15868647eca59c2a484f4.png" /></p><p>看到这里我们就能发现这很openai, 把文字或者视频变成一个token，那接下来就能用上openai的看家本领gpt了。这里的视觉编码器我猜测是 I3D(Quo Vadis, Action Recognition? A New Model and the Kinetics Dataset, 一个视频理解模型，采用双流网络的架构，他的核心贡献是提出了如何对2d网络进行膨胀操作，同时提出了一个新的数据集 Kinetics)</p><h3 id="视频压缩网络"><strong>视频压缩网络</strong></h3><p>通过训练一个降低视觉数据维度的网络，Sora在这个压缩的潜在空间内进行训练并生成视频。同时，还训练了一个相应的解码器模型，将生成的潜在表示映射回像素空间。</p><p>在去年前年文字生成图片爆火的一段时间中，stable diffusion已经证明了在latent space生成图片效果很好，就是这张经典的图 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230420095529.png" alt="image.png" /></p><p>迁移到视频生成上面，在latent space生成一个视频，然后用一个类似VAE decoder的结构解码成正常的视频。(合理猜测是已经有论文做过了，但是我论文读的不多不清楚)</p><h3 id="spacetime-latent-patches">Spacetime Latent Patches</h3><p>给定一个压缩的输入视频，我们提取一系列时空补丁，这些补丁作为变换器令牌。这个方案也适用于图像，因为图像只是带有单一帧的视频。我们基于补丁的表示法使得Sora能够训练具有可变分辨率、持续时间和宽高比的视频和图像。在推理时，我们可以通过在一个适当大小的网格中随机初始化补丁来控制生成视频的大小。</p><p>这个不太好翻译，我只能翻译成时空上的隐空间，就是前面encoder抽出来的一串token, 和nlp的token类似，但是已经是好多个了，所以叫patch。通过初始化patch来控制视频大小我没太理解，蹲一个大佬的讲解或者实现</p><h3 id="scaling-transformers用于视频生成"><strong>Scaling transformers用于视频生成</strong></h3><p>Sora是一个扩散模型，通过预测原始“干净”补丁，训练接收噪声补丁（和条件信息，如文本提示）的输入。作为一个扩散变换器，Sora展示了在视频模型上的有效扩展。 <img src="https://cdn.studyinglover.com/pic/2024/02/c477b8b4601f9fbc924309f318ebff08.png" /></p><p>读到这他已经承认他是一个diffusion模型了，给出的这个示例也能看出来去噪的过程</p><h3 id="变量持续时间分辨率宽高比"><strong>变量持续时间、分辨率、宽高比</strong></h3><p>过去的图像和视频生成方法通常会将视频调整大小、裁剪或修剪为标准尺寸，例如，分辨率为 256x256 的 4 秒视频。与传统方法不同，Sora在其原生大小的数据上进行训练，提供了采样的灵活性，改善了构图和画面布局。对原始大小的数据进行训练有几个好处。</p><h4 id="语言理解"><strong>语言理解</strong></h4><p>通过对视频进行高度描述性的字幕训练，Sora能够生成高质量的视频，准确地遵循用户提示。</p><h4 id="图像和视频的提示"><strong>图像和视频的提示</strong></h4><p>Sora不仅可以根据文本提示生成视频，还可以接受现有图像或视频作为输入，执行一系列图像和视频编辑任务。</p><h4 id="模拟能力"><strong>模拟能力</strong></h4><p>Sora展示了一些有趣的模拟能力，如3D一致性、长期连贯性和对象持久性，以及与物理世界的简单交互模拟。</p><p>好吧我不理解，为啥直接在原视频训练效果就好了？难道openai卡多跑了所有可能？这让我想起来了CLIP那张整整一页的大图 <img src="https://cdn.studyinglover.com/pic/2024/02/f4f404c3b31a85c7a9f68139e5255b80.png" /></p><h3 id="通过图像和视频进行提示">通过图像和视频进行提示</h3><h4 id="dalle-图像动画">DALL·E 图像动画</h4><p>Sora 能够生成提供图像和提示作为输入的视频。下面我们展示基于<a href="https://openai.com/research/video-generation-models-as-world-simulators#fn-31">DALL·E 2</a>生成的示例视频和<a href="https://openai.com/research/video-generation-models-as-world-simulators#fn-30">DALL·E 3</a>图片。</p><p>我合理猜测下，这里和stable diffusion 图生图的方法差不多，最开始的采样不是一个纯粹的高斯噪声，而是将输入的图片过一个VAE的encoder(不一定是这个架构),接着继续采样</p><h4 id="扩展生成的视频">扩展生成的视频</h4><p>Sora 还能够在时间上向前或向后扩展视频。下面是四个视频，它们都是从生成的视频片段开始向后延伸的。因此，这四个视频的开头都不同，但所有四个视频的结局都是相同的。</p><p>和stable diffusion 图生图的方法应该也差不多？最开始的采样不是一个纯粹的高斯噪声，而是将输入的视频过一个视频的encoder(猜测I3D),接着继续采样。但是我很好奇怎么向前扩展？依然是预测一个噪声然后减去，只是训练的时候不训练去噪声过程训练加噪声过程？</p><h3 id="视频到视频编辑">视频到视频编辑</h3><p>扩散模型启用了多种根据文本提示编辑图像和视频的方法。下面我们应用其中一种方法，SDEdit，到Sora。这项技术使 Sora 能够零镜头地改变输入视频的风格和环境。</p><p>还是迁移了文字生成图片的方法，但是我没读过SDEdit这个论文</p><h3 id="连接视频">连接视频</h3><p>我们还可以使用 Sora 在两个输入视频之间逐渐进行插值，从而在具有完全不同主题和场景构成的视频之间创建无缝过渡。在下面的示例中，中心的视频插值在左侧和右侧的相应视频之间。</p><p>应该是第一个视频不断采样直到采样到有一帧和下一个视频第一帧相似度接近1或者差距很小？这里的评价指标应该是PSNR？显然这里不适合语义的指标</p><h2 id="图像生成能力">图像生成能力</h2><p>Sora 还能够生成图像。我们通过在时间范围为一帧的空间网格中排列高斯噪声块来实现这一点。该模型可以生成各种尺寸的图像，分辨率高达 2048x2048。</p><p>我猜测已经zero shot了</p><h2 id="新兴的模拟功能">新兴的模拟功能</h2><p>我们发现，视频模型在大规模训练时表现出许多有趣的新兴功能。这些功能使 Sora 能够模拟现实世界中人、动物和环境的某些方面。这些属性的出现对 3D、物体等没有任何明确的归纳偏差——它们纯粹是尺度现象。</p><p><strong>3D 一致性。</strong> Sora 可以生成带有动态摄像机运动的视频。随着摄像机的移动和旋转，人和场景元素在三维空间中一致移动。</p><p><strong>远程相干性和物体持久性。</strong> 视频生成系统面临的一个重大挑战是在采样长视频时保持时间一致性。我们发现 Sora 通常（尽管并非总是）能够有效地对短期和长期依赖关系进行建模。例如，我们的模型可以保留人、动物和物体，即使它们被遮挡或离开框架。同样，它可以在单个样本中生成同一角色的多个镜头，并在整个视频中保持其外观。</p><p><strong>与世界互动。</strong> 索拉有时可以用简单的方式模拟影响世界状况的动作。例如，画家可以在画布上留下新的笔触，并随着时间的推移而持续存在，或者一个人可以吃汉堡并留下咬痕。</p><p><strong>模拟数字世界。</strong> Sora 还能够模拟人工过程——一个例子是视频游戏。Sora 可以同时通过基本策略控制《我的世界》中的玩家，同时以高保真度渲染世界及其动态。这些能力可以通过用提及“我的世界”的标题提示 Sora 来零射击。</p><p>这些功能表明，视频模型的持续扩展是开发物理和数字世界以及生活在其中的物体、动物和人的高性能模拟器的一条有前途的道路。</p><h2 id="讨论">讨论</h2><p>Sora 目前作为模拟器表现出许多局限性。例如，它不能准确地模拟许多基本相互作用的物理过程，例如玻璃破碎。其他交互（例如吃食物）并不总是会产生对象状态的正确变化。<a href="https://openai.com/sora">我们在登陆页面</a>中列举了模型的其他常见故障模式，例如长时间样本中出现的不连贯性或对象的自发出现。</p><p>我们相信，Sora 今天所拥有的能力表明，视频模型的持续扩展是开发物理和数字世界以及生活在其中的物体、动物和人的强大模拟器的一条有前途的道路。</p><h3 id="结论">结论</h3><p>OpenAI认为，继续扩大视频模型的规模是开发能够模拟物理和数字世界及其中的对象、动物和人的高能力模拟器的有前景的路径。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sora技术报告-视频生成模型作为世界模拟器-笔记&quot;&gt;Sora技术报告 视频生成模型作为世界模拟器 笔记&lt;/h1&gt;
&lt;p&gt;技术报告原题目叫做 Video generation models as world simulators，翻译一下就是 &lt;strong&gt;视频</summary>
      
    
    
    
    
    <category term="笔记" scheme="https://studyinglover.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="文字生成视频" scheme="https://studyinglover.com/tags/%E6%96%87%E5%AD%97%E7%94%9F%E6%88%90%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>archlinux flutter开发踩坑</title>
    <link href="https://studyinglover.com/2024/02/10/archlinux%20flutter%E5%BC%80%E5%8F%91%E8%B8%A9%E5%9D%91/"/>
    <id>https://studyinglover.com/2024/02/10/archlinux%20flutter%E5%BC%80%E5%8F%91%E8%B8%A9%E5%9D%91/</id>
    <published>2024-02-10T22:37:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="archlinux-flutter开发踩坑">archlinux flutter开发踩坑</h1><p>archlinux是个好东西，但是开发flutter坑不少。2023年5月我配置了flutter,后来用得不多，23年11月还尝试过但是失败，最近又要使用，就来解决下。 ## 20230210 今天需要写一个手机app,突然发现构建不出来了，报错 <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">&gt; Failed <span class="hljs-built_in">to</span> <span class="hljs-built_in">create</span> parent <span class="hljs-built_in">directory</span> <span class="hljs-string">&#x27;/opt/flutter/packages/flutter_tools/gradle/.gradle&#x27;</span> when creating <span class="hljs-built_in">directory</span> <span class="hljs-string">&#x27;/opt/flutter/packages/flutter_tools/gradle/.gradle/buildOutputCleanup&#x27;</span><br><br>* Try:<br>&gt; Run <span class="hljs-keyword">with</span> <span class="hljs-comment">--stacktrace option to get the stack trace.</span><br>&gt; Run <span class="hljs-keyword">with</span> <span class="hljs-comment">--info or --debug option to get more log output.</span><br>&gt; Run <span class="hljs-keyword">with</span> <span class="hljs-comment">--scan to get full insights.</span><br><br>* Get more help <span class="hljs-keyword">at</span> <span class="hljs-keyword">https</span>://help.gradle.org<br><br>BUILD FAILED <span class="hljs-keyword">in</span> <span class="hljs-number">48</span>s<br>Exception: Gradle task assembleDebug failed <span class="hljs-keyword">with</span> exit code <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></p><p>你他妈别说，这问题还麻烦，只看这个还看不出来</p><p>先sudo运行一下，运行的时候保留环境变量 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -E flutter run<br></code></pre></td></tr></table></figure></p><p>失败了，同样问题。然后单独在Android下面跑一个<code>./gradlew clean</code></p><p>报错 <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">Welcome <span class="hljs-keyword">to</span> Gradle <span class="hljs-number">7.5</span>! Here are the highlights of this release: - Support <span class="hljs-keyword">for</span> Java <span class="hljs-number">18</span> - Support <span class="hljs-keyword">for</span> building with Groovy <span class="hljs-number">4</span> - Much more responsive continuous builds - Improved diagnostics <span class="hljs-keyword">for</span> dependency resolution For more details see https://docs.gradle.org/<span class="hljs-number">7.5</span>/release-notes.html Starting <span class="hljs-keyword">a</span> Gradle Daemon, <span class="hljs-number">1</span> incompatible Daemon could not <span class="hljs-keyword">be</span> reused, use --status <span class="hljs-keyword">for</span> details FAILURE: Build failed with <span class="hljs-keyword">an</span> exception. * Where: Settings <span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;/home/client/android/settings.gradle&#x27;</span> <span class="hljs-built_in">line</span>: <span class="hljs-number">25</span> * What went wrong: Error resolving plugin [id: <span class="hljs-string">&#x27;dev.flutter.flutter-plugin-loader&#x27;</span>, <span class="hljs-keyword">version</span>: <span class="hljs-string">&#x27;1.0.0&#x27;</span>] &gt; A problem occurred configuring project <span class="hljs-string">&#x27;:gradle&#x27;</span>. &gt; Could not create service of <span class="hljs-built_in">type</span> OutputFilesRepository using ExecutionGradleServices.createOutputFilesRepository(). &gt; java.io.FileNotFoundException: /<span class="hljs-keyword">opt</span>/flutter/packages/flutter_tools/gradle/.gradle/buildOutputCleanup/buildOutputCleanup.lock (权限不够) * Try: &gt; Run with --stacktrace option <span class="hljs-keyword">to</span> <span class="hljs-built_in">get</span> the stack trace. &gt; Run with --info <span class="hljs-built_in">or</span> --<span class="hljs-keyword">debug</span> option <span class="hljs-keyword">to</span> <span class="hljs-built_in">get</span> more <span class="hljs-built_in">log</span> output. &gt; Run with --scan <span class="hljs-keyword">to</span> <span class="hljs-built_in">get</span> full insights. * Get more <span class="hljs-keyword">help</span> at https://<span class="hljs-keyword">help</span>.gradle.org BUILD FAILED in <span class="hljs-number">1</span>s<br></code></pre></td></tr></table></figure></p><p>写的很明显权限不够，给当前用户上权限 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chown</span> -R $(<span class="hljs-built_in">whoami</span>) /opt/flutter<br></code></pre></td></tr></table></figure></p><p>再次运行 <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs less">FAILURE: Build failed with an exception.<br><br>* What went wrong:<br>Could not resolve <span class="hljs-attribute">all files for configuration &#x27;classpath&#x27;.</span><br><span class="hljs-attribute">&gt; Could not resolve com.android.tools</span>:<span class="hljs-attribute">sdk-common</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>  Required <span class="hljs-attribute">by</span>:<br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">lint</span>:<span class="hljs-attribute">lint-model</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span><br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">builder</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">builder</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">manifest-merger</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span><br>   &gt; Could <span class="hljs-keyword">not</span> resolve com.android.<span class="hljs-attribute">tools</span>:<span class="hljs-attribute">sdk-common</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>      &gt; Could <span class="hljs-keyword">not</span> get resource <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/sdk-common/30.3.0/sdk-common-30.3.0.pom&#x27;</span>.<br>         &gt; Could <span class="hljs-keyword">not</span> GET <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/sdk-common/30.3.0/sdk-common-30.3.0.pom&#x27;</span>.<br>            &gt; The server may <span class="hljs-keyword">not</span> support the client&#x27;s requested TLS protocol <span class="hljs-attribute">versions</span>: (TLSv1.<span class="hljs-number">2</span>, TLSv1.<span class="hljs-number">3</span>). You may need to configure the client to allow other protocols to be used. <span class="hljs-attribute">See</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//docs.gradle.org/7.5/userguide/build_environment.html#gradle_system_properties</span><br>               &gt; Remote host terminated the handshake<br>&gt; Could <span class="hljs-keyword">not</span> resolve com.android.<span class="hljs-attribute">tools</span>:<span class="hljs-attribute">sdklib</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>  Required <span class="hljs-attribute">by</span>:<br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">builder</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">builder</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">manifest-merger</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span><br>   &gt; Could <span class="hljs-keyword">not</span> resolve com.android.<span class="hljs-attribute">tools</span>:<span class="hljs-attribute">sdklib</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>      &gt; Could <span class="hljs-keyword">not</span> get resource <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/sdklib/30.3.0/sdklib-30.3.0.pom&#x27;</span>.<br>         &gt; Could <span class="hljs-keyword">not</span> GET <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/sdklib/30.3.0/sdklib-30.3.0.pom&#x27;</span>.<br>            &gt; The server may <span class="hljs-keyword">not</span> support the client&#x27;s requested TLS protocol <span class="hljs-attribute">versions</span>: (TLSv1.<span class="hljs-number">2</span>, TLSv1.<span class="hljs-number">3</span>). You may need to configure the client to allow other protocols to be used. <span class="hljs-attribute">See</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//docs.gradle.org/7.5/userguide/build_environment.html#gradle_system_properties</span><br>               &gt; Remote host terminated the handshake<br>&gt; Could <span class="hljs-keyword">not</span> resolve com.android.<span class="hljs-attribute">tools</span>:<span class="hljs-attribute">repository</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>  Required <span class="hljs-attribute">by</span>:<br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>   &gt; Could <span class="hljs-keyword">not</span> resolve com.android.<span class="hljs-attribute">tools</span>:<span class="hljs-attribute">repository</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>      &gt; Could <span class="hljs-keyword">not</span> get resource <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/repository/30.3.0/repository-30.3.0.pom&#x27;</span>.<br>         &gt; Could <span class="hljs-keyword">not</span> GET <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/repository/30.3.0/repository-30.3.0.pom&#x27;</span>.<br>            &gt; The server may <span class="hljs-keyword">not</span> support the client&#x27;s requested TLS protocol <span class="hljs-attribute">versions</span>: (TLSv1.<span class="hljs-number">2</span>, TLSv1.<span class="hljs-number">3</span>). You may need to configure the client to allow other protocols to be used. <span class="hljs-attribute">See</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//docs.gradle.org/7.5/userguide/build_environment.html#gradle_system_properties</span><br>               &gt; Remote host terminated the handshake<br>&gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">aaptcompiler</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span>.<br>  Required <span class="hljs-attribute">by</span>:<br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>   &gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">aaptcompiler</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span>.<br>      &gt; Could <span class="hljs-keyword">not</span> get resource <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/build/aaptcompiler/7.3.0/aaptcompiler-7.3.0.pom&#x27;</span>.<br>         &gt; Could <span class="hljs-keyword">not</span> GET <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/build/aaptcompiler/7.3.0/aaptcompiler-7.3.0.pom&#x27;</span>.<br>            &gt; The server may <span class="hljs-keyword">not</span> support the client&#x27;s requested TLS protocol <span class="hljs-attribute">versions</span>: (TLSv1.<span class="hljs-number">2</span>, TLSv1.<span class="hljs-number">3</span>). You may need to configure the client to allow other protocols to be used. <span class="hljs-attribute">See</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//docs.gradle.org/7.5/userguide/build_environment.html#gradle_system_properties</span><br>               &gt; Remote host terminated the handshake<br>&gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">lint</span>:<span class="hljs-attribute">lint-typedef-remover</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>  Required <span class="hljs-attribute">by</span>:<br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>   &gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">lint</span>:<span class="hljs-attribute">lint-typedef-remover</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>      &gt; Could <span class="hljs-keyword">not</span> get resource <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/lint/lint-typedef-remover/30.3.0/lint-typedef-remover-30.3.0.pom&#x27;</span>.<br>         &gt; Could <span class="hljs-keyword">not</span> GET <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/lint/lint-typedef-remover/30.3.0/lint-typedef-remover-30.3.0.pom&#x27;</span>.<br>            &gt; The server may <span class="hljs-keyword">not</span> support the client&#x27;s requested TLS protocol <span class="hljs-attribute">versions</span>: (TLSv1.<span class="hljs-number">2</span>, TLSv1.<span class="hljs-number">3</span>). You may need to configure the client to allow other protocols to be used. <span class="hljs-attribute">See</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//docs.gradle.org/7.5/userguide/build_environment.html#gradle_system_properties</span><br>               &gt; Remote host terminated the handshake<br>&gt; Could <span class="hljs-keyword">not</span> resolve com.android.<span class="hljs-attribute">databinding</span>:<span class="hljs-attribute">baseLibrary</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span>.<br>  Required <span class="hljs-attribute">by</span>:<br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; androidx.<span class="hljs-attribute">databinding</span>:<span class="hljs-attribute">databinding-compiler-common</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>   &gt; Could <span class="hljs-keyword">not</span> resolve com.android.<span class="hljs-attribute">databinding</span>:<span class="hljs-attribute">baseLibrary</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span>.<br>      &gt; Could <span class="hljs-keyword">not</span> get resource <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/databinding/baseLibrary/7.3.0/baseLibrary-7.3.0.pom&#x27;</span>.<br>         &gt; Could <span class="hljs-keyword">not</span> GET <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/databinding/baseLibrary/7.3.0/baseLibrary-7.3.0.pom&#x27;</span>.<br>            &gt; The server may <span class="hljs-keyword">not</span> support the client&#x27;s requested TLS protocol <span class="hljs-attribute">versions</span>: (TLSv1.<span class="hljs-number">2</span>, TLSv1.<span class="hljs-number">3</span>). You may need to configure the client to allow other protocols to be used. <span class="hljs-attribute">See</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//docs.gradle.org/7.5/userguide/build_environment.html#gradle_system_properties</span><br>               &gt; Remote host terminated the handshake<br>&gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">utp</span>:<span class="hljs-attribute">android-device-provider-ddmlib-proto</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>  Required <span class="hljs-attribute">by</span>:<br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>   &gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">utp</span>:<span class="hljs-attribute">android-device-provider-ddmlib-proto</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>      &gt; Could <span class="hljs-keyword">not</span> get resource <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/utp/android-device-provider-ddmlib-proto/30.3.0/android-device-provider-ddmlib-proto-30.3.0.pom&#x27;</span>.<br>         &gt; Could <span class="hljs-keyword">not</span> GET <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/utp/android-device-provider-ddmlib-proto/30.3.0/android-device-provider-ddmlib-proto-30.3.0.pom&#x27;</span>.<br>            &gt; The server may <span class="hljs-keyword">not</span> support the client&#x27;s requested TLS protocol <span class="hljs-attribute">versions</span>: (TLSv1.<span class="hljs-number">2</span>, TLSv1.<span class="hljs-number">3</span>). You may need to configure the client to allow other protocols to be used. <span class="hljs-attribute">See</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//docs.gradle.org/7.5/userguide/build_environment.html#gradle_system_properties</span><br>               &gt; Remote host terminated the handshake<br>&gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">utp</span>:<span class="hljs-attribute">android-test-plugin-host-additional-test-output-proto</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>  Required <span class="hljs-attribute">by</span>:<br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>   &gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">utp</span>:<span class="hljs-attribute">android-test-plugin-host-additional-test-output-proto</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>      &gt; Could <span class="hljs-keyword">not</span> get resource <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/utp/android-test-plugin-host-additional-test-output-proto/30.3.0/android-test-plugin-host-additional-test-output-proto-30.3.0.pom&#x27;</span>.<br>         &gt; Could <span class="hljs-keyword">not</span> GET <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/utp/android-test-plugin-host-additional-test-output-proto/30.3.0/android-test-plugin-host-additional-test-output-proto-30.3.0.pom&#x27;</span>.<br>            &gt; The server may <span class="hljs-keyword">not</span> support the client&#x27;s requested TLS protocol <span class="hljs-attribute">versions</span>: (TLSv1.<span class="hljs-number">2</span>, TLSv1.<span class="hljs-number">3</span>). You may need to configure the client to allow other protocols to be used. <span class="hljs-attribute">See</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//docs.gradle.org/7.5/userguide/build_environment.html#gradle_system_properties</span><br>               &gt; Remote host terminated the handshake<br>&gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">utp</span>:<span class="hljs-attribute">android-test-plugin-host-retention-proto</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>  Required <span class="hljs-attribute">by</span>:<br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>   &gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">utp</span>:<span class="hljs-attribute">android-test-plugin-host-retention-proto</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>      &gt; Could <span class="hljs-keyword">not</span> get resource <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/utp/android-test-plugin-host-retention-proto/30.3.0/android-test-plugin-host-retention-proto-30.3.0.pom&#x27;</span>.<br>         &gt; Could <span class="hljs-keyword">not</span> GET <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/utp/android-test-plugin-host-retention-proto/30.3.0/android-test-plugin-host-retention-proto-30.3.0.pom&#x27;</span>.<br>            &gt; The server may <span class="hljs-keyword">not</span> support the client&#x27;s requested TLS protocol <span class="hljs-attribute">versions</span>: (TLSv1.<span class="hljs-number">2</span>, TLSv1.<span class="hljs-number">3</span>). You may need to configure the client to allow other protocols to be used. <span class="hljs-attribute">See</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//docs.gradle.org/7.5/userguide/build_environment.html#gradle_system_properties</span><br>               &gt; Remote host terminated the handshake<br><br>* <span class="hljs-attribute">Try</span>:<br>&gt; Run with --stacktrace option to get the stack trace.<br>&gt; Run with --info or --debug option to get more log output.<br>&gt; Run with --scan to get full insights.<br><br>* Get more help at <span class="hljs-attribute">https</span>:<span class="hljs-comment">//help.gradle.org</span><br><br>BUILD FAILED in <span class="hljs-number">54s</span><br><span class="hljs-number">4</span> actionable <span class="hljs-attribute">tasks</span>: <span class="hljs-number">4</span> executed<br></code></pre></td></tr></table></figure> 网络问题，先看一下java版本 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -version <br></code></pre></td></tr></table></figure></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">openjdk</span> version <span class="hljs-string">&quot;17.0.10&quot;</span> <span class="hljs-number">2024</span>-<span class="hljs-number">01</span>-<span class="hljs-number">16</span><br><span class="hljs-attribute">OpenJDK</span> Runtime Environment (build <span class="hljs-number">17</span>.<span class="hljs-number">0</span>.<span class="hljs-number">10</span>+<span class="hljs-number">7</span>)<br><span class="hljs-attribute">OpenJDK</span> <span class="hljs-number">64</span>-Bit Server VM (build <span class="hljs-number">17</span>.<span class="hljs-number">0</span>.<span class="hljs-number">10</span>+<span class="hljs-number">7</span>, mixed mode)<br></code></pre></td></tr></table></figure><p>可以显式地配置Gradle使用TLS协议,在gradle.properties文件 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle.properties">systemProp.jdk.tls.client.protocols=TLSv1.2,TLSv1.3<br><br></code></pre></td></tr></table></figure></p><p>这个时候<code>./gradlew clean</code>可以正常工作了，但是<code>./gradlew assembleDebug</code> 不能正常工作</p><p>这个时候，我打开了Android studio, it words!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;archlinux-flutter开发踩坑&quot;&gt;archlinux flutter开发踩坑&lt;/h1&gt;
&lt;p&gt;archlinux是个好东西，但是开发flutter坑不少。2023年5月我配置了flutter,后来用得不多，23年11月还尝试过但是失败，最近又要使用，就</summary>
      
    
    
    
    
    <category term="踩坑" scheme="https://studyinglover.com/tags/%E8%B8%A9%E5%9D%91/"/>
    
    <category term="flutter" scheme="https://studyinglover.com/tags/flutter/"/>
    
    <category term="archlinux" scheme="https://studyinglover.com/tags/archlinux/"/>
    
  </entry>
  
  <entry>
    <title>fastapi集成google auth登录</title>
    <link href="https://studyinglover.com/2024/01/21/fastapi%E9%9B%86%E6%88%90google%20auth%E7%99%BB%E5%BD%95/"/>
    <id>https://studyinglover.com/2024/01/21/fastapi%E9%9B%86%E6%88%90google%20auth%E7%99%BB%E5%BD%95/</id>
    <published>2024-01-21T10:26:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fastapi集成google-auth登录">fastapi集成google auth登录</h1><h2 id="流程设计">流程设计</h2><h3 id="启动-google-登录流程">1. 启动 Google 登录流程</h3><ul><li><strong>前端</strong>：用户点击 Google 登录按钮。</li><li><strong>请求</strong>：前端发起请求到 <code>/user/login/google</code>。</li></ul><h3 id="后端处理-userlogingoogle-请求">2. 后端处理 <code>/user/login/google</code> 请求</h3><ul><li>后端生成一个重定向到 Google 认证服务器的 URL</li><li>后端将此 URL 发送给前端。</li></ul><h3 id="前端重定向">3. 前端重定向</h3><ul><li>前端接收到 URL 后，重定向用户到 Google 的登录页面。</li></ul><h3 id="用户登录并授权">4. 用户登录并授权</h3><ul><li>用户在 Google 页面上授权你的应用。</li></ul><h3 id="google-重定向回你的应用">5. Google 重定向回你的应用</h3><ul><li>Google 将用户重定向回你的应用，并在查询参数中附加一个授权码（code）。</li></ul><h3 id="前端发送授权码">6. 前端发送授权码</h3><ul><li><strong>前端</strong>：捕获此授权码并发送到 <code>/user/auth/google?code=$&#123;code&#125;</code>。</li><li><strong>请求</strong>：<code>POST /user/auth/google?code=$&#123;code&#125;</code>。</li></ul><h3 id="后端处理-userauthgooglecodecode-请求">7. 后端处理 <code>/user/auth/google?code=$&#123;code&#125;</code> 请求</h3><ul><li>后端接收授权码，并使用它向 Google 请求访问令牌。</li><li>使用此令牌，后端可以从 Google 获取用户信息（如用户名、邮箱等）。</li><li>后端检查此用户是否已在数据库中。如果不在，创建一个新用户。</li><li>后端生成一个会话或令牌（如 JWT），并将其发送回前端。</li></ul><h3 id="前端接收令牌">8. 前端接收令牌</h3><ul><li>前端接收令牌并存储在本地（如 localStorage、sessionStorage 或 cookie 中）。</li></ul><h3 id="前端使用令牌">9. 前端使用令牌</h3><ul><li>对于后续请求，前端将此令牌附加到请求的授权头中，以验证用户身份。</li></ul><h3 id="后端验证令牌">10. 后端验证令牌</h3><ul><li>对于需要身份验证的后续请求，后端验证传入的令牌，以确认用户的身份。</li></ul><h2 id="获取google密钥">获取google密钥</h2><h3 id="创建项目">创建项目</h3><p>首先前往Google Cloud Console ( <a href="https://console.cloud.google.com/">https://console.cloud.google.com/</a> ) 并创建一个新项目（如果尚未创建），然后在“API 和服务 &gt; 仪表板”部分中启用“Google+ API”。你会在这样一个界面。</p><figure><img src="https://cdn.studyinglover.com/pic/2024/01/ae35717c51d89eb88ab6852b4b00ef63.png" alt="" /><figcaption>image.png</figcaption></figure><p>如果找不到的话，请先找到初始页面，选择一个项目，然后你会看到这样一个页面<img src="https://cdn.studyinglover.com/pic/2024/01/a92b558de8f9cff3830a4146d9632e59.png" alt="image.png" /></p><h3 id="创建oauth权限">创建OAuth权限</h3><p>按照如图顺序点击 <img src="https://cdn.studyinglover.com/pic/2024/01/101627cfb52eddde0622707fda8c787b.png" alt="image.png" /></p><p>进入之后就到了前面的页面，然后点击 OAuth权限请求页面</p><p><img src="https://cdn.studyinglover.com/pic/2024/01/3ab8147866777e9cc08572a85fbf6eb1.png" alt="image.png" /> 接下来我们会进入注册应用界面，首先填入的应用名称还有你的邮箱 <img src="https://cdn.studyinglover.com/pic/2024/01/001cbe727e68da69261b7ba012e596de.png" alt="image.png" /> 在最下面填上你的开发者信息，保存并继续 <img src="https://cdn.studyinglover.com/pic/2024/01/2398bdedeb782ff071e92f176815f251.png" alt="image.png" /></p><p>一路向下，可以填入一些限制，我就直接继续了。下面添加测试用户，填入google账号的邮箱即可 <img src="https://cdn.studyinglover.com/pic/2024/01/38893303361225188c4bf4b80a0da71c.png" alt="image.png" /> 保存，在摘要再检查一遍以后保存创建即可。接下来你会看到这样的页面，这样子我们的OAuth就设置好了。 <img src="https://cdn.studyinglover.com/pic/2024/01/adbcb7f78f4f157a5c3275cd48af66ec.png" alt="image.png" /></p><h3 id="创建凭据">创建凭据</h3><p>我们下面创建应用，点击凭据 <img src="https://cdn.studyinglover.com/pic/2024/01/1fd3b8f8bf2e42bbf21eba64619ab516.png" alt="image.png" /> 点击创建凭据 <img src="https://cdn.studyinglover.com/pic/2024/01/acd4317727c70cc5282b72d6350cb585.png" alt="image.png" /> 选择OAuth客户端ID <img src="https://cdn.studyinglover.com/pic/2024/01/cb1e787b42c9b3c0d5f95f2c9bf8bae2.png" alt="image.png" /></p><p>选择应用类型web应用 <img src="https://cdn.studyinglover.com/pic/2024/01/a334a3cf9bd76fa8c57fa0be48b6b713.png" alt="image.png" /></p><p>填写名称，已获授权的 JavaScript 来源，已获授权的重定向 URI。已获授权的 JavaScript 来源 写的是你的开发，测试还有正式环境的域名，例如<code>http://localhost:8000</code>。已获授权的重定向 URI 写的是你的重定向地址例如<code>http://localhost:8000/user/auth/google</code></p><figure><img src="https://cdn.studyinglover.com/pic/2024/01/ff16e3fd7c0c5eeeb82646f737a40f1f.png" alt="" /><figcaption>image.png</figcaption></figure><p>你会看到这样一个页面，保存你的客户端 ID和客户端密钥 <img src="https://cdn.studyinglover.com/pic/2024/01/c6ccc6b85da45c876f8194d099173bbe.png" alt="image.png" /> ## 代码实践</p><p>创建一个<code>.env</code>文件 <img src="https://cdn.studyinglover.com/pic/2024/01/73c325e34f0eaf971e44980543a09c00.png" alt="image.png" /></p><p>我们创建一个fastapi的后端 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI, Depends<br><span class="hljs-keyword">from</span> fastapi.security <span class="hljs-keyword">import</span> OAuth2PasswordBearer<br><span class="hljs-keyword">from</span> fastapi.middleware.cors <span class="hljs-keyword">import</span> CORSMiddleware<br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> jose <span class="hljs-keyword">import</span> jwt<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> dotenv <span class="hljs-keyword">import</span> load_dotenv<br><br>load_dotenv()<br><br><br>app = FastAPI()<br><br>app.add_middleware(<br>    CORSMiddleware,<br>    allow_origins=[<span class="hljs-string">&quot;*&quot;</span>],  <span class="hljs-comment"># Allows all origins</span><br>    allow_credentials=<span class="hljs-literal">True</span>,<br>    allow_methods=[<span class="hljs-string">&quot;*&quot;</span>],  <span class="hljs-comment"># Allows all methods</span><br>    allow_headers=[<span class="hljs-string">&quot;*&quot;</span>],  <span class="hljs-comment"># Allows all headers</span><br>)<br><br><br><span class="hljs-comment"># Replace these with your own values from the Google Developer Console</span><br>GOOGLE_CLIENT_ID = os.environ.get(<span class="hljs-string">&quot;GOOGLE_CLIENT_ID&quot;</span>)<br>GOOGLE_CLIENT_SECRET = os.environ.get(<span class="hljs-string">&quot;GOOGLE_CLIENT_SECRET&quot;</span>)<br>GOOGLE_REDIRECT_URI = <span class="hljs-string">&quot;http://localhost:8000/auth/google&quot;</span><br><br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/login/google&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">login_google</span>():<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">f&quot;https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=<span class="hljs-subst">&#123;GOOGLE_CLIENT_ID&#125;</span>&amp;redirect_uri=<span class="hljs-subst">&#123;GOOGLE_REDIRECT_URI&#125;</span>&amp;scope=openid%20profile%20email&amp;access_type=offline&quot;</span><br>    &#125;<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/auth/google&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">auth_google</span>(<span class="hljs-params">code: <span class="hljs-built_in">str</span></span>):<br>    token_url = <span class="hljs-string">&quot;https://accounts.google.com/o/oauth2/token&quot;</span><br>    data = &#123;<br>        <span class="hljs-string">&quot;code&quot;</span>: code,<br>        <span class="hljs-string">&quot;client_id&quot;</span>: GOOGLE_CLIENT_ID,<br>        <span class="hljs-string">&quot;client_secret&quot;</span>: GOOGLE_CLIENT_SECRET,<br>        <span class="hljs-string">&quot;redirect_uri&quot;</span>: GOOGLE_REDIRECT_URI,<br>        <span class="hljs-string">&quot;grant_type&quot;</span>: <span class="hljs-string">&quot;authorization_code&quot;</span>,<br>    &#125;<br>    response = requests.post(token_url, data=data)<br>    access_token = response.json().get(<span class="hljs-string">&quot;access_token&quot;</span>)<br>    user_info = requests.get(<span class="hljs-string">&quot;https://www.googleapis.com/oauth2/v1/userinfo&quot;</span>, headers=&#123;<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">&#123;access_token&#125;</span>&quot;</span>&#125;)<br>    <span class="hljs-built_in">print</span>(user_info.json())<br>    <span class="hljs-keyword">return</span> user_info.json()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">import</span> uvicorn<br>    uvicorn.run(app, host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">8000</span>)<br></code></pre></td></tr></table></figure></p><p>同时我们需要一个前端，这里我们只有一个按钮来用于google登陆</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Login with Google<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleLogin</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://localhost:8000/login/google&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();</span><br><span class="language-javascript">            <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = data.<span class="hljs-property">url</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleRedirect</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> urlParams = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">search</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> code = urlParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;code&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (code) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`http://localhost:8000/auth/google?code=<span class="hljs-subst">$&#123;code&#125;</span>`</span>);</span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> userData = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;user-info&#x27;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(userData, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;handleRedirect()&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;handleLogin()&quot;</span>&gt;</span>Login with Google<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pre</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user-info&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>点击按钮你会进入平时你看到的google登陆的流程，流程成功后你会在前端页面看到用户的信息</p><p>就像这样 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;13&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;a1@gmail.com&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;verified_email&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;a &quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;given_name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;family_name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;picture&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;https://lh3.googleusercontent.com/a/ACLXM=s96-c&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;locale&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;zh-CN&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></p><p>同时后端也会在控制台打印出这个信息，我们已经成功通过了google的身份验证。我们可以再将他结合到自己的程序中</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;fastapi集成google-auth登录&quot;&gt;fastapi集成google auth登录&lt;/h1&gt;
&lt;h2 id=&quot;流程设计&quot;&gt;流程设计&lt;/h2&gt;
&lt;h3 id=&quot;启动-google-登录流程&quot;&gt;1. 启动 Google 登录流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    
    <category term="google auth" scheme="https://studyinglover.com/tags/google-auth/"/>
    
    <category term="fastapi" scheme="https://studyinglover.com/tags/fastapi/"/>
    
    <category term="后端" scheme="https://studyinglover.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>linux下NTFS磁盘报错输入输出错误</title>
    <link href="https://studyinglover.com/2024/01/15/linux%E4%B8%8BNTFS%E7%A3%81%E7%9B%98%E6%8A%A5%E9%94%99%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E9%94%99%E8%AF%AF/"/>
    <id>https://studyinglover.com/2024/01/15/linux%E4%B8%8BNTFS%E7%A3%81%E7%9B%98%E6%8A%A5%E9%94%99%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E9%94%99%E8%AF%AF/</id>
    <published>2024-01-15T22:50:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux下ntfs磁盘报错输入输出错误">linux下NTFS磁盘报错输入输出错误</h1><p>简单来说就是我在linux下挂载了一个NTFS格式的移动硬盘，然后在使用的时候，今天我想删除一个文件夹，突然给了我一个报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入/输出错误<br></code></pre></td></tr></table></figure><p>看到这个错误，我开了几个终端，又是<code>ntfsfix</code>修磁盘,又是<code>dmseg</code>看日志,一通操作猛如虎，问题依然没解决</p><p>这个时候我们注意到(attention is all you need)，ntfs是微软的闭源格式，linux下的ntfs-3g是一个开源的ntfs驱动，这个驱动是不是有问题呢？</p><p>关机，打开linux,扫描并修复磁盘，删除，问题解决。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;linux下ntfs磁盘报错输入输出错误&quot;&gt;linux下NTFS磁盘报错输入输出错误&lt;/h1&gt;
&lt;p&gt;简单来说就是我在linux下挂载了一个NTFS格式的移动硬盘，然后在使用的时候，今天我想删除一个文件夹，突然给了我一个报错&lt;/p&gt;
&lt;figure class=&quot;</summary>
      
    
    
    
    
    <category term="踩坑" scheme="https://studyinglover.com/tags/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>Venn-Abers 预测器</title>
    <link href="https://studyinglover.com/2024/01/15/Venn-Abers%20%E9%A2%84%E6%B5%8B%E5%99%A8/"/>
    <id>https://studyinglover.com/2024/01/15/Venn-Abers%20%E9%A2%84%E6%B5%8B%E5%99%A8/</id>
    <published>2024-01-15T19:40:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="venn-abers-预测器">Venn-Abers 预测器</h1><p>Venn-Abers 预测器 https://arxiv.org/pdf/1211.0025.pdf</p><p>是一种基于Venn预测器的新的专注于二元预测问题的统计方法。它们生成的是概率类型的预测，这些预测在标准假设下（即观察是从同一分布独立生成的）是很好校准的。这种预测器的一个关键特点是它们输出的是概率区间而不是单一的概率点。Venn-Abers 预测器可以与其他模型结合使用。</p><p>Venn-Abers 预测器 输出的分数映射到经过良好校准的概率。</p><ul><li><strong>输入（Input）</strong><ul><li>数据特征（Data Features）: 模型抽出来的特征</li><li>目标变量（Target Variable): 监督学习的目标</li></ul></li><li><strong>输出（Output）</strong><ul><li>概率预测（Probability Predictions）: Venn-Abers预测器输出的是概率对，而不是单一的概率值。这意味着对于每个预测实例，它会给出一个概率范围，而不是一个具体的概率点。</li><li>校准质量评估（Calibration Quality Assessment）: 此外，还可以通过预期校准误差（ECE）等指标来评估预测的校准质量，这有助于理解模型在不同类别上的预测准确度。</li></ul></li></ul><p>have a try https://github.com/ptocca/VennABERS</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">calibrPts = [(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>),(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>),(<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>)]<br>testScores = [<span class="hljs-number">1.5</span>,<span class="hljs-number">2.5</span>,<span class="hljs-number">3.5</span>,<span class="hljs-number">4.5</span>,<span class="hljs-number">5.5</span>,<span class="hljs-number">6.5</span>]<br><br>p0,p1 = ScoresToMultiProbs(calibrPts,testScores)<br><span class="hljs-built_in">print</span>(p0, p1)<br></code></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[0.5        1.         1.66666667 2.33333333 3.         3.75      ]</span> <span class="hljs-string">[1. 1. 1. 1. 1. 1.]</span><br></code></pre></td></tr></table></figure><p>两个列表分别代表对应的代表上限和下限。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;venn-abers-预测器&quot;&gt;Venn-Abers 预测器&lt;/h1&gt;
&lt;p&gt;Venn-Abers 预测器 https://arxiv.org/pdf/1211.0025.pdf&lt;/p&gt;
&lt;p&gt;是一种基于Venn预测器的新的专注于二元预测问题的统计方法。它们生成的</summary>
      
    
    
    
    
    <category term="机器学习" scheme="https://studyinglover.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>基于Venn-Abers预测器的系统日志异常检测方法_顾兆军</title>
    <link href="https://studyinglover.com/2024/01/15/%E5%9F%BA%E4%BA%8EVenn-Abers%E9%A2%84%E6%B5%8B%E5%99%A8%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95_%E9%A1%BE%E5%85%86%E5%86%9B/"/>
    <id>https://studyinglover.com/2024/01/15/%E5%9F%BA%E4%BA%8EVenn-Abers%E9%A2%84%E6%B5%8B%E5%99%A8%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95_%E9%A1%BE%E5%85%86%E5%86%9B/</id>
    <published>2024-01-15T19:40:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于venn-abers预测器的系统日志异常检测方法_顾兆军">基于Venn-Abers预测器的系统日志异常检测方法_顾兆军</h1><p>收集日志信息、日志解析和日志的特征化提，包括收集日志信息、日志解析和日志的特征化提取。</p><p>每条日志都包含时间戳、日志优先级、系统组件和日志条目本身等信息的非结构化数据。日志解析会生成一个生成事件计数矩阵，每个日志事件模板对应一个标识符 ｂｌｏｃｋ＿ｉｄ，用于日志异常检测模型推理。在事件计数矩阵中，将具有相同 ｂｌｏｃｋ 的事件模板放在一行，即每一行代表一个块 ｂｌｏｃｋ，将每一行的事件模板统计出次数，即每一列代表一种事件类型。(因为日志是非结构化的，这样子实际上就合并了不同事件的日志，将其变成一个矩阵用于推理). <span class="math inline">\(X_{i,j}\)</span> 单元格中的值记录事件 ｊ 在块 ｉ 上发生的次数。TF-IDF是信息检索中一种公认的启发式方法，它通常用作信息检索和文本挖掘中文档的特征表示。</p><p>日志异常检测部分是推理一个二分类问题，然后获取分类概率(论文这里说的很复杂，实际上就是做一个二分类然后给一个概率)，接下来成对相邻违反者算法得到一个保序回归 函 数 <span class="math inline">\(f()\)</span> ０ 和 １ 用于测试对象 <span class="math inline">\(x_n\)</span>,<span class="math inline">\(s_0 = (\begin{matrix}z_1,z_2,\cdots,z_{n-1,}&amp;(x_n,0)\end{matrix})\)</span>为<span class="math inline">\(s_0\)</span>评分函数，<span class="math inline">\(s_1 = (z_1,z_2 \cdots,z_{n-1,}(x_n,1))\)</span> 为<span class="math inline">\(s_1\)</span>的评分函数.模型输出<span class="math inline">\((\begin{matrix}p_0,p_1\\\end{matrix})\)</span>,<span class="math inline">\(p_{0}=f_{0}\left(s_{0}\left(x\right)\right)\)</span> ,<span class="math inline">\(p_{1}=f_{1}\left(s_{1}\left(x\right)\right)\)</span></p><p>运行效率优化 实验过程中，发现由训练集标签和训练集对象得到的保序回归序列分布过于密集，不符合预期。ＨＤＦＳ 记录的日志行为单一［１８］ 使不同特征向量之间的差异较小，特征向量高度相似或重复。对于重复的得分，将其标签 <span class="math inline">\(ｙ_i\)</span> 累积求和并取平均值作为该得分新的标签.</p><p>算法有效性评估是平方损失，评估指标是f1</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于venn-abers预测器的系统日志异常检测方法_顾兆军&quot;&gt;基于Venn-Abers预测器的系统日志异常检测方法_顾兆军&lt;/h1&gt;
&lt;p&gt;收集日志信息、日志解析和日志的特征化提，包括收集日志信息、日志解析和日志的特征化提取。&lt;/p&gt;
&lt;p&gt;每条日志都包含时间戳</summary>
      
    
    
    
    
    <category term="机器学习" scheme="https://studyinglover.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>手机平板远程访问kvm虚拟机的windows</title>
    <link href="https://studyinglover.com/2023/12/23/%E6%89%8B%E6%9C%BA%E5%B9%B3%E6%9D%BF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEkvm%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84windows/"/>
    <id>https://studyinglover.com/2023/12/23/%E6%89%8B%E6%9C%BA%E5%B9%B3%E6%9D%BF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEkvm%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84windows/</id>
    <published>2023-12-23T19:28:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="手机平板远程访问kvm虚拟机的windows">手机平板远程访问kvm虚拟机的windows</h1><p>最近快期末周了，开始陆陆续续开始复习(预习)这学期的课，于是有了一个需求，我希望在床上用手机可以看我linux电脑上kvm虚拟机里面的网课。</p><p>首先使用<code>superRDP2</code>给kvm虚拟机里面的windows装上了rdp，并且在linux上测试了一下确保rdp是通的。接下来只需要解决手机和windows网络连通性的问题，我ping了一下，果然不通。</p><p>现在的虚拟机是在虚拟网络下面，能ping通才见鬼了。我们可以把虚拟机改成桥接模型，不出意外的话就能解决这个问题了</p><p>接着我收获了一个报错 <figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">操作失败: 桥接 win11 不存在<br><br>Traceback (most recent call last):<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;/usr/share/virt-manager/virtManager/addhardware.py&quot;</span>, <span class="hljs-literal">line</span> <span class="hljs-number">359</span>, <span class="hljs-keyword">in</span> change_config_helper<br>    define_func(devobj=devobj, do_hotplug=<span class="hljs-literal">True</span>, **define_args)<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;/usr/share/virt-manager/virtManager/object/domain.py&quot;</span>, <span class="hljs-literal">line</span> <span class="hljs-number">862</span>, <span class="hljs-keyword">in</span> define_network<br>    self._process_device_define(editdev, xmlobj, do_hotplug)<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;/usr/share/virt-manager/virtManager/object/domain.py&quot;</span>, <span class="hljs-literal">line</span> <span class="hljs-number">532</span>, <span class="hljs-keyword">in</span> _process_device_define<br>    self.hotplug(device=editdev)<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;/usr/share/virt-manager/virtManager/object/domain.py&quot;</span>, <span class="hljs-literal">line</span> <span class="hljs-number">1124</span>, <span class="hljs-keyword">in</span> hotplug<br>    self._update_device(device)<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;/usr/share/virt-manager/virtManager/object/domain.py&quot;</span>, <span class="hljs-literal">line</span> <span class="hljs-number">1085</span>, <span class="hljs-keyword">in</span> _update_device<br>    self._backend.updateDeviceFlags(xml, flags)<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;/usr/lib/python3.11/site-packages/libvirt.py&quot;</span>, <span class="hljs-literal">line</span> <span class="hljs-number">3293</span>, <span class="hljs-keyword">in</span> updateDeviceFlags<br>    raise libvirtError(<span class="hljs-symbol">&#x27;virDomainUpdateDeviceFlags</span>() failed&#x27;)<br>libvirt.libvirtError: 操作失败: 桥接 win11 不存在<br></code></pre></td></tr></table></figure></p><p>笑死就没有win11这个网络让我桥接，我想改成桥接还得改配置，多是一件麻烦事。很自然的我们就想到了端口转发。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -L [宿主机端口]:[虚拟机IP]:3389 [宿主机用户]@[宿主机IP]<br></code></pre></td></tr></table></figure><p>将<code>宿主机端口</code>，<code>虚拟机IP</code>，<code>宿主机用户</code>，<code>宿主机IP</code>，换成你的，运行，就像正常的ssh一样，就实现了端口转发，只是原本windows的ip写成宿主机的，端口写成宿主机端口。</p><p>有的同学会发现这个方法不work,是我们的配置出错了吗？是的，我们忘了一件事情：当使用SSH端口转发时，默认情况下，转发的端口可能仅绑定到localhost。所以我们需要修改命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -L 0.0.0.0:[宿主机端口]:[虚拟机IP]:3389 [宿主机用户]@[宿主机IP]<br></code></pre></td></tr></table></figure><p>work 了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;手机平板远程访问kvm虚拟机的windows&quot;&gt;手机平板远程访问kvm虚拟机的windows&lt;/h1&gt;
&lt;p&gt;最近快期末周了，开始陆陆续续开始复习(预习)这学期的课，于是有了一个需求，我希望在床上用手机可以看我linux电脑上kvm虚拟机里面的网课。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="踩坑" scheme="https://studyinglover.com/tags/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>phi-2弱智吧测评</title>
    <link href="https://studyinglover.com/2023/12/21/phi-2%E5%BC%B1%E6%99%BA%E5%90%A7%E6%B5%8B%E8%AF%84/"/>
    <id>https://studyinglover.com/2023/12/21/phi-2%E5%BC%B1%E6%99%BA%E5%90%A7%E6%B5%8B%E8%AF%84/</id>
    <published>2023-12-21T22:40:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="phi-2弱智吧测评">phi-2弱智吧测评</h1><p>微软最近推出的 Phi-2 模型，拥有 27 亿参数，已在多个方面优于谷歌的 32 亿参数 Gemini Nano-2 模型。Phi-2 模型的特点是，虽然它的参数规模相对较小，但却展现出了与大型模型相媲美甚至超越的性能，这在人工智能领域引起了广泛关注。</p><p>微软的研究团队在设计 Phi-2 模型时，重点关注了“教科书质量”的数据，这种数据专门针对常识性知识和推理，涵盖科学、日常活动、心理学等领域。通过精心挑选的网络数据进一步扩充了训练语料库，确保了数据的质量和教育价值。此外，微软还运用创新技术在 Phi-2 中实现了规模化知识迁移，从而加速了训练收敛并显著提高了模型的基准测试分数。</p><p>在实验评估中，Phi-2 模型在各种聚合基准上的性能超越了 7B 和 13B 的 Mistral 模型、Llama2 模型，尤其是在多步骤推理任务（编码和数学）方面，甚至超过了大 25 倍的 Llama2-70B 模型。</p><p>使用 "弱智吧"上的问题对模型进行评估是一种创新的思路。这种评估方法能够对模型的理解能力、回答质量以及对复杂问题处理能力进行全面的测试。</p><p>下面是模型的推理代码，方便各位读者复现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForCausalLM<br><span class="hljs-keyword">import</span> torch<br><br>tokenizer = AutoTokenizer.from_pretrained(<br>    <span class="hljs-string">&quot;microsoft/phi-2&quot;</span>,<br>    trust_remote_code = <span class="hljs-literal">True</span><br>)<br><br>model = AutoModelForCausalLM.from_pretrained(<br>    <span class="hljs-string">&quot;microsoft/phi-2&quot;</span>,<br>    torch_dtype = <span class="hljs-string">&quot;auto&quot;</span>,<br>    device_map = <span class="hljs-string">&quot;auto&quot;</span>,<br>    trust_remote_code = <span class="hljs-literal">True</span><br>)<br><br>prompt = <span class="hljs-string">&quot;&quot;&quot;拉屎擦屁股是资本主义骗局吗？&quot;&quot;&quot;</span><br><span class="hljs-keyword">with</span> torch.no_grad():<br>  token_ids = tokenizer.encode(prompt, add_special_tokens=<span class="hljs-literal">False</span> ,return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)<br>  output_ids = model.generate(<br>      token_ids.to(model.device),<br>      max_new_tokens=<span class="hljs-number">512</span>,<br>      do_sample=<span class="hljs-literal">True</span>,<br>      temperature = <span class="hljs-number">0.3</span><br>  )<br><br>output = tokenizer.decode(output_ids[<span class="hljs-number">0</span>][token_ids.size(<span class="hljs-number">1</span>) :])<br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><p>下面是问答情况</p><table><thead><tr class="header"><th>问题</th><th>回答</th></tr></thead><tbody><tr class="odd"><td>咱们来玩个马吃草的扮演游戏吧，我草你马。</td><td>我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我</td></tr><tr class="even"><td>拉屎擦屁股是资本主义骗局吗？</td><td>解答： 1. 我们可以通过计算拉屎擦屁股的每日收益率来推断资本主义骗局。如果拉屎擦屁股的每日收益率越高，说明资本主义骗局越越好；如果拉屎擦屁股的每日收益率越低，说明资本主义骗局越负。 2. 我们可以通过计算拉屎擦屁股的每日收益率来推断资本主义骗局。如果拉屎擦屁股的每日收益率越高，说明资本主义骗局越越好；如果拉屎擦屁股的每日收益率越低，说明资本主义骗局越负。 3. 我们可以通过计算拉屎擦屁股的每日收益率来推断资本主义骗�</td></tr><tr class="odd"><td>网吧能上网，为什么弱智吧不能上弱智？</td><td># 如果没有更多观察，就是因为没有更多观察，就不会更多观察。 # 我们可以让每个网站给出一个观察次数，然后把每个网站的观察次数排序后， # 取前k个网站的观察次数，即取前k个网站的观察次数最多的网站。 # 则这k个网站就是最多观察的网站。 # 然后，我们将这k个网站作为最多观察的网站，然后网站的观察次数加1， # 将这k个网站的观察次数加到前k个网站的观察次数中， # 并将前k个网站的观察次数排序后， # 取前k个网站的观察次数最多的网站，即取前k个网站的观察次数最多的网站。 # 因为这k个网</td></tr><tr class="even"><td>红绿色盲会不会读红鲤鱼与绿鲤鱼与驴？</td><td># 红鲤鱼与绿鲤鱼与驴，驴可能变成红鲤鱼，驴可能变成绿鲤鱼，驴可能变成黑鲤鱼，驴可能变成鲤鱼 # 颜色可能变成红鲤鱼，颜色可能变成绿鲤鱼，颜色可能变成黑鲤鱼，颜色可能变成鲤鱼 # 可能变成黑鲤鱼，黑鲤鱼可能变成红鲤鱼，黑鲤鱼可能变成绿鲤鱼，黑鲤鱼可能变成驴 # 颜色可能变成黑鲤鱼，黑鲤鱼可能变成红鲤鱼，黑鲤鱼可能变成绿鲤鱼，黑鲤鱼可能变成驴 # 颜色可能变成红鲤鱼，颜色可能变成绿鲤鱼，颜色可能变成黑鲤鱼，颜�</td></tr><tr class="odd"><td>我的作业得了F，是不是fantastic的意思？</td><td># 这个是为了让每个模型的输出和输入的维度一致，所以我们需要将F的维度和输入的维度一致， # 所以我们需要将F的维度和输入的维度一致，所以我们需要将F的维度和输入的维度一致，所以我们需要将F的维度和输入的维度一致，所以我们需要将F的维度和输入的维度一致，所以我们需要将F的维度和输入的维度一致，所以我们需要将F的维度和输入的维度一致，所以我们需要将F的维度和输入的维度一致，所以我们需要将F的维度和输入的维度一致，所以我们需要将F的维度和输入的维度一致，所以我们需要将F的维度和输入的维�</td></tr><tr class="even"><td>死人不会再死一次，那为什么不让死人上战场呢？</td><td>解答： 死人的上战场是一个空间，它是由死人的传播，这意味着死人的传播不是一个空间，而是一个空间的传播。死人的传播是由死人的行为，从而可以得到死人的行为的传播。死人的行为的传播是由死人的行为的传播，从而可以得到死人的行为的传播，以此类推。死人的行为的传播是由死人的行为的传播，从而可以得到死人的行为的传播，以此类推。死人的行为的传播是由死人的行为的传播，从而可以得到死人的行为的传播，以此类推。死人的行为的传播是由死人的行为的传播，从而可以得到死人的行为的传播，以此类推。死人的行为的传播是由死人的行为的传播，从而可以得到死人的行为的传播，以此</td></tr><tr class="odd"><td>我拿水兑水，得到的是稀水还是浓水？</td><td>Solution: The correct answer is A. Explanation: The word "稀水" means "light water" in Chinese, and the word "浓水" means "heavy water". Water is a substance that has different properties depending on its composition and purity. Pure water is called "light water" because it has a low density and a high specific heat capacity, which means it can absorb or release a lot of heat without changing its temperature much. Heavy water is called "heavy water" because it has a higher density and a lower specific heat capacity than pure water, which means it can absorb or release less heat without changing its temperature much. The word "拿" means "drink" in Chinese, and the word "拿水" means "drink water". The word "拿水" can be used to express different meanings depending on the context and the tone of the speaker. For example, in the sentence "我拿水兑水，得到的是稀水还是浓水？", the speaker is asking a question about the result of drinking water. The tone of the speaker is neutral and curious, and the word "得到的是" means "the result of" or "the outcome of". The speaker is implying that drinking water can have different effects on the body depending on the type of water. The word "稀水" and the word "浓水" are both adjectives that modify the noun "水" (water) in the sentence. The word "水" is a common noun that can be used as a subject or an object in a sentence. The word "水" can also be used as a verb to mean "to drink water" or "to quench thirst". The word "水" can also be used as a noun to mean "water" in general, or "liquid" in general. The word "水" can also be used as a verb to mean "to flow" or "to pour". Follow up exercises: 1. What is the difference between density and specific heat capacity? Solution: Density is the mass of a substance per unit volume, and specific heat capacity is the amount of heat required to raise the temperature of one gram of a substance</td></tr><tr class="even"><td>自由女神像每天一动不动，她真的自由么？</td><td>解答： 她是一个自由女神，但是她不是一个自由女神，她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点</td></tr><tr class="odd"><td>出生证明丢了怎么证明自己出生了？</td><td># In[ ]: # 定义函数 def is_valid_birth_date(birth_date): try: birth_date = datetime.strptime(birth_date, "%Y-%m-%d") return True except ValueError: return False # In[ ]: # 测试函数 print(is_valid_birth_date("2021-01-01")) print(is_valid_birth_date("2021-01-02")) print(is_valid_birth_date("2021-01-03")) print(is_valid_birth_date("2021-01-04")) print(is_valid_birth_date("2021-01-05")) print(is_valid_birth_date("2021-01-06")) print(is_valid_birth_date("2021-01-07")) print(is_valid_birth_date("2021-01-08")) print(is_valid_birth_date("2021-01-09")) print(is_valid_birth_date("2021-01-10")) print(is_valid_birth_date("2021-01-11")) print(is_valid_birth_date("2021-01-12")) print(is_valid_birth_date("2021-01-13")) print(is_valid_birth_date("2021-01-14")) print(is_valid_birth_date("2021-01-15")) print(is_valid_birth_date("2021-01-16")) print(is_valid_birth_date("2021-01-17")) print(is_valid_birth_date("2021-01-18")) print(is_valid_birth_date("2021-01-19")) print(is_valid_birth_date("2021-01-20")) print(is_valid_birth_date("2021-01-21")) print(is_valid_birth_date("2021-01-22")) print(is_valid_birth_date("2021-01-23")) print</td></tr><tr class="even"><td>文言文是怎么称呼电脑的？</td><td># 可以称为第一次的脑研究者，比如那个人称为智能脑，或者智能人。 # 他的脑研究和科学是一样的，但是他的脑研究可以更深刻的描述，比如智能人的智能性，智能人的脑研究的结果，智能人的脑研究的方法，以及他的脑研究的结果的影响。 # 他的脑研究是一种智能的脑研究，智能脑研究是一种智能的脑研究。 # 他的脑研究是一种智能的脑研究，智能脑研究是一种智能的脑研究。 # 他的脑研究是一种智能的脑研究，智能脑研究是一种智能的脑研究。 # 他的脑研究是一种智能的脑研究，智能脑研究是一</td></tr><tr class="odd"><td>说好的救火为什么把火灭了？</td><td># 思路： # 先把火灭了的点放到一个数组中，然后再按照点的坐标排序，然后遍历数组，如果当前点的坐标大于火灭了的点，则继续遍历，如果当前点的坐标小于火灭了的点，则结束遍历，并将当前点和火灭了的点进行交换。 # 然后再按照火灭了的点排序，然后遍历数组，如果当前点的坐标大于火灭了的点，则继续遍历，如果当前点的坐标小于火灭了的点，则结束遍历，并将当前点和火灭了的点进行交换。 # 然后再按照火灭了的点排序，然后遍历数组，如果当前点的坐标大于火灭了的点，则继续遍历，�</td></tr><tr class="even"><td>我吃了狗拉的屎拉出来的还是狗屎吗？</td><td># 如果不是知识语言，我也不会说，只会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # �</td></tr><tr class="odd"><td>用橡皮筋把脖子勒住，是不是全身都退烧了呢？</td><td>第二天，那个人的脖子都是白脖子，他们都是脖子筋把脖子住，是不是全身都退烧了呢？第三天，那个人的脖子都是白脖子，他们都是脖子筋把脖子住，是不是全身都退烧了呢？第四天，那个人的脖子都是白脖子，他们都是脖子筋把脖子住，是不是全身都退烧了呢？第五天，那个人的脖子都是白脖子，他们都是脖子筋把脖子住，是不是全身都退烧了呢？第六天，那个人的脖子都是白脖子，他们都是脖子筋把脖子住，是不是全身都退烧了呢？第七天，那个人的脖子都是白脖子，他们都是脖子筋把脖子住，是不是全身都退烧了呢？第八天，那个人的脖子---</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;phi-2弱智吧测评&quot;&gt;phi-2弱智吧测评&lt;/h1&gt;
&lt;p&gt;微软最近推出的 Phi-2 模型，拥有 27 亿参数，已在多个方面优于谷歌的 32 亿参数 Gemini Nano-2 模型。Phi-2 模型的特点是，虽然它的参数规模相对较小，但却展现出了与大型模型相</summary>
      
    
    
    
    
    <category term="大模型" scheme="https://studyinglover.com/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="phi-2" scheme="https://studyinglover.com/tags/phi-2/"/>
    
  </entry>
  
  <entry>
    <title>poe的gemini pro或是百度开发</title>
    <link href="https://studyinglover.com/2023/12/15/poe%E7%9A%84gemini%20pro%E6%88%96%E6%98%AF%E7%99%BE%E5%BA%A6%E5%BC%80%E5%8F%91/"/>
    <id>https://studyinglover.com/2023/12/15/poe%E7%9A%84gemini%20pro%E6%88%96%E6%98%AF%E7%99%BE%E5%BA%A6%E5%BC%80%E5%8F%91/</id>
    <published>2023-12-15T22:39:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="poe的gemini-pro或是百度开发">poe的gemini pro或是百度开发</h1><p>没啥想说的，单走一张图</p><p><img src="https://cdn.studyinglover.com/pic/2023/12/98c9c44118ebd3444ad2fdfe494f8a85.png" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;poe的gemini-pro或是百度开发&quot;&gt;poe的gemini pro或是百度开发&lt;/h1&gt;
&lt;p&gt;没啥想说的，单走一张图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.studyinglover.com/pic/2023/12/98c9c44118</summary>
      
    
    
    
    
    <category term="google gemini" scheme="https://studyinglover.com/tags/google-gemini/"/>
    
    <category term="poe" scheme="https://studyinglover.com/tags/poe/"/>
    
  </entry>
  
  <entry>
    <title>google gemini api使用</title>
    <link href="https://studyinglover.com/2023/12/14/google%20gemini%20api%E4%BD%BF%E7%94%A8/"/>
    <id>https://studyinglover.com/2023/12/14/google%20gemini%20api%E4%BD%BF%E7%94%A8/</id>
    <published>2023-12-14T23:15:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="google-gemini-api使用">google gemini api使用</h1><p>google最近发布了gemini api，我之前在<a href="https://studyinglover.com/2023/12/14/google%20gemini%20api%E7%94%B3%E8%AF%B7/">我的博客</a> 介绍了如何申请，这篇文章来介绍如何使用</p><p>首先下载google的库 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -q -U google-generativeai<br></code></pre></td></tr></table></figure></p><p>引入必要的包 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pathlib<br><span class="hljs-keyword">import</span> textwrap<br><br><span class="hljs-keyword">import</span> google.generativeai <span class="hljs-keyword">as</span> genai<br><br><span class="hljs-keyword">from</span> IPython.display <span class="hljs-keyword">import</span> display<br><span class="hljs-keyword">from</span> IPython.display <span class="hljs-keyword">import</span> Markdown<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">to_markdown</span>(<span class="hljs-params">text</span>):<br>  text = text.replace(<span class="hljs-string">&#x27;•&#x27;</span>, <span class="hljs-string">&#x27;  *&#x27;</span>)<br>  <span class="hljs-keyword">return</span> Markdown(textwrap.indent(text, <span class="hljs-string">&#x27;&gt; &#x27;</span>, predicate=<span class="hljs-keyword">lambda</span> _: <span class="hljs-literal">True</span>))<br></code></pre></td></tr></table></figure></p><p>先将api添加到环境变量 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> GOOGLE_API_KEY=你的密钥<br></code></pre></td></tr></table></figure></p><p>接下来获取密钥 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">GOOGLE_API_KEY=os.getenv(<span class="hljs-string">&#x27;GOOGLE_API_KEY&#x27;</span>)<br>genai.configure(api_key=GOOGLE_API_KEY)<br></code></pre></td></tr></table></figure></p><p>可以通过下面命令获取所有模型 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> genai.list_models():<br>  <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;generateContent&#x27;</span> <span class="hljs-keyword">in</span> m.supported_generation_methods:<br>    <span class="hljs-built_in">print</span>(m.name)<br></code></pre></td></tr></table></figure></p><h2 id="文本输入">文本输入</h2><p>接下来创建一个模型，并输入一个prompt,获取输出并转换成markdown格式 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">model = genai.GenerativeModel(<span class="hljs-string">&#x27;gemini-pro&#x27;</span>)<br>response = model.generate_content(<span class="hljs-string">&quot;What is the meaning of life?&quot;</span>)<br>to_markdown(response.text)<br></code></pre></td></tr></table></figure> 如果你的prompt比较奇奇怪怪，那么可能会不能正常获取到返回，你可以查看<code>response.prompt_feedback</code>获取原因。</p><p>还有一个有趣的事情，gemini可能会生成多个输出(candidates)，通过<code>response.candidates</code>获取。</p><p>流式传输也是可以的 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">response = model.generate_content(<span class="hljs-string">&quot;What is the meaning of life?&quot;</span>, stream=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> response:<br>  <span class="hljs-built_in">print</span>(chunk.text)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;_&quot;</span>*<span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure></p><h2 id="图片输入">图片输入</h2><p>下载官方的示例图片 <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">curl -o image.jpg https:<span class="hljs-comment">//t0.gstatic.com/licensed-image?q=tbn:ANd9GcQ_Kevbk21QBRy-PgB4kQpS79brbmmEG7m3VOTShAn4PecDU5H5UxrJxE3Dw1JiaG17V88QIol19-3TM2wCHw</span><br></code></pre></td></tr></table></figure> 通过下面的代码可以查看图片 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> PIL.Image<br><br>img = PIL.Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;image.jpg&#x27;</span>)<br>img<br></code></pre></td></tr></table></figure> <img src="https://cdn.studyinglover.com/pic/2023/12/1042f6e0b6fa63d40f96fcd18fcf4be8.png" alt="image.png" /></p><p>接下来创建模型,并获取输出 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">model = genai.GenerativeModel(<span class="hljs-string">&#x27;gemini-pro-vision&#x27;</span>)<br>response = model.generate_content(img)<br><br>to_markdown(response.text)<br></code></pre></td></tr></table></figure></p><p>也可以同时提供文本和图像 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">response = model.generate_content([<span class="hljs-string">&quot;Write a short, engaging blog post based on this picture. It should include a description of the meal in the photo and talk about my journey meal prepping.&quot;</span>, img], stream=<span class="hljs-literal">True</span>)<br>response.resolve()<br>to_markdown(response.text)<br></code></pre></td></tr></table></figure></p><h2 id="聊天">聊天</h2><p>初始化聊天：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">model = genai.GenerativeModel(<span class="hljs-string">&#x27;gemini-pro&#x27;</span>)<br>chat = model.start_chat(history=[])<br>chat<br></code></pre></td></tr></table></figure><p>开始聊天 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">response = chat.send_message(<span class="hljs-string">&quot;In one sentence, explain how a computer works to a young child.&quot;</span>)<br>to_markdown(response.text)<br></code></pre></td></tr></table></figure></p><blockquote><p><strong>你一定想在这里使用图片聊天，请注意，<code>gemini-pro-vision</code>未针对多轮聊天进行优化</strong></p></blockquote><p>可以通过<code>chat.history</code> 获取聊天历史 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> message <span class="hljs-keyword">in</span> chat.history:<br>  display(to_markdown(<span class="hljs-string">f&#x27;**<span class="hljs-subst">&#123;message.role&#125;</span>**: <span class="hljs-subst">&#123;message.parts[<span class="hljs-number">0</span>].text&#125;</span>&#x27;</span>))<br></code></pre></td></tr></table></figure></p><p>流式传输也可以使用 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">response = chat.send_message(<span class="hljs-string">&quot;Okay, how about a more detailed explanation to a high schooler?&quot;</span>, stream=<span class="hljs-literal">True</span>)<br><br><span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> response:<br>  <span class="hljs-built_in">print</span>(chunk.text)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;_&quot;</span>*<span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure></p><h2 id="嵌入">嵌入</h2><p>使用起来没啥可说的 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">result = genai.embed_content(<br>    model=<span class="hljs-string">&quot;models/embedding-001&quot;</span>,<br>    content=<span class="hljs-string">&quot;What is the meaning of life?&quot;</span>,<br>    task_type=<span class="hljs-string">&quot;retrieval_document&quot;</span>,<br>    title=<span class="hljs-string">&quot;Embedding of single string&quot;</span>)<br><br><span class="hljs-comment"># 1 input &gt; 1 vector output</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(result[<span class="hljs-string">&#x27;embedding&#x27;</span>])[:<span class="hljs-number">50</span>], <span class="hljs-string">&#x27;... TRIMMED]&#x27;</span>)<br></code></pre></td></tr></table></figure></p><p>当然，批量处理也可以 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">result = genai.embed_content(<br>    model=<span class="hljs-string">&quot;models/embedding-001&quot;</span>,<br>    content=[<br>      <span class="hljs-string">&#x27;What is the meaning of life?&#x27;</span>,<br>      <span class="hljs-string">&#x27;How much wood would a woodchuck chuck?&#x27;</span>,<br>      <span class="hljs-string">&#x27;How does the brain work?&#x27;</span>],<br>    task_type=<span class="hljs-string">&quot;retrieval_document&quot;</span>,<br>    title=<span class="hljs-string">&quot;Embedding of list of strings&quot;</span>)<br><br><span class="hljs-comment"># A list of inputs &gt; A list of vectors output</span><br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> result[<span class="hljs-string">&#x27;embedding&#x27;</span>]:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(v)[:<span class="hljs-number">50</span>], <span class="hljs-string">&#x27;... TRIMMED ...&#x27;</span>)<br></code></pre></td></tr></table></figure></p><p>你甚至可以传递一个<code>chat.history</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">result = genai.embed_content(<br>    model = <span class="hljs-string">&#x27;models/embedding-001&#x27;</span>,<br>    content = chat.history)<br><br><span class="hljs-comment"># 1 input &gt; 1 vector output</span><br><span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(result[<span class="hljs-string">&#x27;embedding&#x27;</span>]):<br>  <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(v)[:<span class="hljs-number">50</span>], <span class="hljs-string">&#x27;... TRIMMED...&#x27;</span>)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;google-gemini-api使用&quot;&gt;google gemini api使用&lt;/h1&gt;
&lt;p&gt;google最近发布了gemini api，我之前在&lt;a href=&quot;https://studyinglover.com/2023/12/14/google%20ge</summary>
      
    
    
    
    
    <category term="google gemini" scheme="https://studyinglover.com/tags/google-gemini/"/>
    
  </entry>
  
  <entry>
    <title>google gemini api申请</title>
    <link href="https://studyinglover.com/2023/12/14/google%20gemini%20api%E7%94%B3%E8%AF%B7/"/>
    <id>https://studyinglover.com/2023/12/14/google%20gemini%20api%E7%94%B3%E8%AF%B7/</id>
    <published>2023-12-14T22:40:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="google-gemini-api申请">google gemini api申请</h1><p>首先登陆 https://ai.google.dev/pricing <img src="https://cdn.studyinglover.com/pic/2023/12/af1a86c0c368f9368f6d125902d3b610.png" alt="image.png" /></p><p>往下滑，看一看到免费选项，每分钟60词请求对于个人完全够用，点击进入 <img src="https://cdn.studyinglover.com/pic/2023/12/bb87b408e483fe0fa5999a2aacff299a.png" alt="image.png" /></p><p>进入后，先点击<code>Get API key</code>,然后点击<code>Create API kay in new project</code> <img src="https://cdn.studyinglover.com/pic/2023/12/0c224ceeb462739a69a26f9c98b9b76b.png" alt="image.png" /></p><p>接下来可以看到类似的页面 <img src="https://cdn.studyinglover.com/pic/2023/12/262c805af52491f846e38a9d1a2ff533.png" alt="image.png" /></p><p>复制你的key</p><p>在命令行通过下面的方式检查是否正常 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl \ -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> \ -d <span class="hljs-string">&#x27;&#123; &quot;prompt&quot;: &#123; &quot;text&quot;: &quot;Write a story about a magic backpack&quot;&#125; &#125;&#x27;</span> \ <span class="hljs-string">&quot;https://generativelanguage.googleapis.com/v1beta3/models/text-bison-001:generateText?key=YOUR_API_KEY&quot;</span><br></code></pre></td></tr></table></figure></p><p>可以看到 <img src="https://cdn.studyinglover.com/pic/2023/12/001f17bea345dd0fee9edadbca84c6ed.png" alt="image.png" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;google-gemini-api申请&quot;&gt;google gemini api申请&lt;/h1&gt;
&lt;p&gt;首先登陆 https://ai.google.dev/pricing &lt;img src=&quot;https://cdn.studyinglover.com/pic/2023</summary>
      
    
    
    
    
    <category term="google gemini" scheme="https://studyinglover.com/tags/google-gemini/"/>
    
  </entry>
  
  <entry>
    <title>构建用于复杂数据处理的高效UDP服务器和客户端</title>
    <link href="https://studyinglover.com/2023/12/07/%E6%9E%84%E5%BB%BA%E7%94%A8%E4%BA%8E%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%9A%84%E9%AB%98%E6%95%88UDP%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>https://studyinglover.com/2023/12/07/%E6%9E%84%E5%BB%BA%E7%94%A8%E4%BA%8E%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%9A%84%E9%AB%98%E6%95%88UDP%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF/</id>
    <published>2023-12-07T23:03:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构建用于复杂数据处理的高效udp服务器和客户端">构建用于复杂数据处理的高效UDP服务器和客户端</h1><h2 id="引言">引言</h2><p>在当今快速发展的网络通信世界中，理解和应用各种通信协议至关重要。UDP（用户数据报协议）以其低延迟和高效率的特点，在实时数据传输中扮演着关键角色。本文将详细探讨如何使用Python实现UDP服务器和客户端，以处理复杂数据格式。</p><h2 id="第1节-理解udp通信基础">第1节: 理解UDP通信基础</h2><p>UDP是一种无连接协议，提供快速数据包交换服务。它不提供像TCP那样的数据传输可靠性保证，但其低开销特性使其适用于高速传输和一定丢包率可容忍的场景。</p><h2 id="第2节-设置python环境">第2节: 设置Python环境</h2><p>使用Python的<code>socket</code>库，无需额外安装即可创建UDP服务器和客户端。</p><h2 id="第3节-实现udp服务器">第3节: 实现UDP服务器</h2><p>创建UDP服务器涉及以下关键步骤： - 使用<code>socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</code>创建新的socket对象。 - 通过<code>sock.bind((HOST, PORT))</code>绑定地址和端口。 - 使用<code>sock.recvfrom(1024)</code>接收数据。</p><h3 id="示例代码">示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start_udp_server</span>(<span class="hljs-params">host, port</span>):<br>    server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>    server_socket.bind((host, port))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;UDP Server started on <span class="hljs-subst">&#123;host&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        data, addr = server_socket.recvfrom(<span class="hljs-number">1024</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Received message: <span class="hljs-subst">&#123;data&#125;</span> from <span class="hljs-subst">&#123;addr&#125;</span>&quot;</span>)<br>        <span class="hljs-comment"># 这里可以添加数据处理逻辑</span><br><br>start_udp_server(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">6000</span>)<br></code></pre></td></tr></table></figure><h3 id="高级应用">高级应用</h3><ul><li><strong>异步处理</strong>：为提高性能，考虑使用异步IO处理数据。</li><li><strong>错误处理</strong>：添加适当的错误处理机制以提高服务器稳定性。</li></ul><h2 id="第4节-实现udp客户端">第4节: 实现UDP客户端</h2><p>客户端的实现重点在于发送数据： - 创建socket。 - 通过<code>sock.sendto(message, (HOST, PORT))</code>发送数据。</p><h3 id="示例代码-1">示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_udp_message</span>(<span class="hljs-params">host, port, message</span>):<br>    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>    client_socket.sendto(message.encode(), (host, port))<br>    data, server = client_socket.recvfrom(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Received response: <span class="hljs-subst">&#123;data&#125;</span> from <span class="hljs-subst">&#123;server&#125;</span>&quot;</span>)<br><br>send_udp_message(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">6000</span>, <span class="hljs-string">&#x27;Hello, UDP Server!&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="数据包格式">数据包格式</h3><ul><li><strong>格式设计</strong>：设计符合服务器预期的数据包格式，如对雷达数据的特定编码。</li><li><strong>验证机制</strong>：实现数据包完整性和正确性的验证机制。</li></ul><h2 id="第5节-服务器和客户端的集成">第5节: 服务器和客户端的集成</h2><p>集成测试包括： - 确保数据包格式正确。 - 服务器正确解析数据包。 - 确保通信端口设置正确。</p><h2 id="第6节-高级主题">第6节: 高级主题</h2><ul><li><strong>重传策略</strong>：UDP丢包问题的解决方案，如应用层重传机制。</li><li><strong>安全性</strong>：考虑数据传输的加密和验证机制。</li></ul><h2 id="结论">结论</h2><p>介绍了如何使用Python创建UDP服务器和客户端，并根据不同数据类型处理复杂数据包。虽然UDP不保证数据完整性和顺序，但其速度和效率优势使其成为实时数据处理的理想选择。</p><h2 id="参考文献">参考文献</h2><ul><li><a href="https://docs.python.org/3/library/socket.html">Python官方文档 - socket编程</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;构建用于复杂数据处理的高效udp服务器和客户端&quot;&gt;构建用于复杂数据处理的高效UDP服务器和客户端&lt;/h1&gt;
&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;在当今快速发展的网络通信世界中，理解和应用各种通信协议至关重要。UDP（用户数据报协议）以其低延迟和高效率的特</summary>
      
    
    
    
    
    <category term="踩坑" scheme="https://studyinglover.com/tags/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib中文字体渲染</title>
    <link href="https://studyinglover.com/2023/12/04/matplotlib%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E6%B8%B2%E6%9F%93/"/>
    <id>https://studyinglover.com/2023/12/04/matplotlib%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E6%B8%B2%E6%9F%93/</id>
    <published>2023-12-04T21:52:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="matplotlib中文字体渲染">matplotlib中文字体渲染</h1><p>matplotlib 在画图例的时候不可避免的需要使用中文字体，但是有的时候电脑自带的字体不能渲染中文，这就需要我们自己解决字体问题。</p><p>首先用一个代码看一下系统里的字体哪些可以正常渲染中文字体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.font_manager <span class="hljs-keyword">as</span> font_manager<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_chinese_fonts</span>(<span class="hljs-params">test_string</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    This function tests each available font to see if it can render the given Chinese string</span><br><span class="hljs-string">    without causing any rendering issues or noticeable delays.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    fonts = font_manager.findSystemFonts(fontpaths=<span class="hljs-literal">None</span>, fontext=<span class="hljs-string">&#x27;ttf&#x27;</span>)<br>    working_fonts = []<br><br>    <span class="hljs-keyword">for</span> font <span class="hljs-keyword">in</span> fonts:<br>        <span class="hljs-keyword">try</span>:<br>            prop = font_manager.FontProperties(fname=font)<br>            plt.figure()<br>            start_time = time.time()<br>            plt.text(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, test_string, fontproperties=prop, ha=<span class="hljs-string">&#x27;center&#x27;</span>, va=<span class="hljs-string">&#x27;center&#x27;</span>)<br>            plt.close()<br>            end_time = time.time()<br>            render_time = end_time - start_time<br><br>            <span class="hljs-comment"># Check if the rendering time is less than a certain threshold (e.g., 0.5 seconds)</span><br>            <span class="hljs-keyword">if</span> render_time &lt; <span class="hljs-number">5</span>:<br>                working_fonts.append(font)<br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-comment"># If there&#x27;s an error rendering with this font, skip it</span><br>            <span class="hljs-keyword">continue</span><br><br>    <span class="hljs-keyword">return</span> working_fonts<br><br><span class="hljs-comment"># Test string: &quot;不卡顿&quot;</span><br>test_string = <span class="hljs-string">&quot;不卡顿&quot;</span><br>fonts = find_chinese_fonts(test_string)<br>fonts<br><br></code></pre></td></tr></table></figure><p>假设输出了 <code>'/usr/share/fonts/truetype/liberation/LiberationMono-Bold.ttf'</code></p><p>使用这个字体的代码就是 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> matplotlib.font_manager <span class="hljs-keyword">import</span> FontProperties<br><br><span class="hljs-comment"># 创建一个FontProperties对象，指定字体文件路径</span><br>font = FontProperties(fname=<span class="hljs-string">&#x27;/usr/share/fonts/truetype/liberation/LiberationMono-Bold.ttf&#x27;</span>)<br><br><span class="hljs-comment"># 绘制散点图</span><br>plt.scatter([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>], color=<span class="hljs-string">&quot;red&quot;</span>)<br><br><span class="hljs-comment"># 添加图例，使用指定的字体</span><br>plt.legend([<span class="hljs-string">&quot;例子&quot;</span>], prop=font)<br><br><span class="hljs-comment"># 显示图像</span><br>plt.show()<br></code></pre></td></tr></table></figure></p><p>假如代码没找到可用字体呢？</p><p>手动下载字体。以下是一些中文字体的官方下载页面或者信誉良好的资源：</p><ol type="1"><li><strong>思源宋体（Source Han Serif）</strong>:<ul><li>官方GitHub页面: <a href="https://github.com/adobe-fonts/source-han-serif">Adobe Fonts</a></li><li>选择您需要的语言子集，例如简体中文（SC），并下载相应的 OTF 文件。</li></ul></li><li><strong>思源黑体（Source Han Sans）</strong>:<ul><li>官方GitHub页面: <a href="https://github.com/adobe-fonts/source-han-sans">Adobe Fonts</a></li><li>同样地，选择您需要的语言子集，并下载 OTF 文件。</li></ul></li><li><strong>文泉驿正黑（WenQuanYi Zen Hei）</strong>:<ul><li>官方网站: <a href="http://wenq.org/wqy2/index.cgi?ZenHei">WenQuanYi</a></li><li>可以直接下载 TTF 文件。</li></ul></li></ol><p>下载完成后然后<code>font = FontProperties(fname='/usr/share/fonts/truetype/liberation/LiberationMono-Bold.ttf')</code> 引入即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;matplotlib中文字体渲染&quot;&gt;matplotlib中文字体渲染&lt;/h1&gt;
&lt;p&gt;matplotlib 在画图例的时候不可避免的需要使用中文字体，但是有的时候电脑自带的字体不能渲染中文，这就需要我们自己解决字体问题。&lt;/p&gt;
&lt;p&gt;首先用一个代码看一下系统里的</summary>
      
    
    
    
    
    <category term="踩坑" scheme="https://studyinglover.com/tags/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>TruFor笔记和代码复现</title>
    <link href="https://studyinglover.com/2023/11/28/TruFor%E7%AC%94%E8%AE%B0%E5%92%8C%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0/"/>
    <id>https://studyinglover.com/2023/11/28/TruFor%E7%AC%94%E8%AE%B0%E5%92%8C%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-11-28T17:38:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="trufor笔记和代码复现">TruFor笔记和代码复现</h1><p>最近有个新闻很火，说<a href="https://www.zhihu.com/question/631987370">谷歌 AI 技术曾判定美国登月任务的照片存在虚假内容</a> 有<a href="https://www.zhihu.com/question/631868923/answer/3304947739">大佬找到了出处</a>，使用的是google 的论文<a href="https://doi.org/10.48550/arXiv.2212.10957">arxiv</a>，代码开源在<a href="https://github.com/grip-unina/TruFor">GitHub</a></p><h2 id="笔记">笔记</h2><p>这篇论文介绍了一个名为TruFor的图像伪造检测和定位框架。该框架可以应用于各种图像处理方法，包括基于深度学习的伪造方法。TruFor利用了RGB图像和一个学习的噪音敏感指纹来提取高级和低级痕迹，最终输出像素级别的定位图和整个图像的完整性分数，以及一个可靠性映射，用于减少误报。</p><figure><img src="https://cdn.studyinglover.com/pic/2023/11/35a3ffa0a81b1791e692c591a92b9256.png" alt="" /><figcaption>image.png</figcaption></figure><p>它包括以下几个关键组件： 1. <strong>Noiseprint++ 提取器</strong>：该提取器从RGB图像中获取一个学习的噪声敏感指纹。 2. <strong>编码器</strong>：编码器使用RGB输入和Noiseprint++共同计算将被异常解码器和置信度解码器使用的特征。 3. <strong>异常解码器和置信度解码器</strong>：这两个解码器分别用于像素级别的伪造定位和置信度估计。 4. <strong>伪造检测器</strong>：该检测器利用定位图和置信度图进行图像级别的决策。</p><p>这些组件通过三个训练阶段进行学习： 1. 首先，使用大量原始图像数据集训练Noiseprint++提取器。 2. 然后，使用相同的数据集训练异常定位网络的编码器和解码器。 3. 最后，使用相同的数据集训练置信度图解码器和伪造检测器。</p><p>通过这些组件和训练阶段，TruFor框架能够在各种图像伪造方法中实现可靠的检测和定位。</p><p>模型输出包括以下三个部分： 1. 全局完整性得分（Global Integrity Score）：该得分表示图像的整体真实性，用于自动图像伪造检测。 2. 异常定位图（Anomaly Localization Map）：该图表示图像中可能存在伪造的区域。通过分析异常定位图，用户可以识别被篡改的区域。 3. 置信度图（Confidence Map）：该图突出显示了异常定位图中可能存在误报的区域。通过分析置信度图，用户可以区分异常定位图中的真实伪造区域预测和随机异常。 这三个输出为用户提供了有关图像真实性和可能篡改区域的全面信息，有助于进行进一步的分析</p><h2 id="代码复现">代码复现</h2><p>作者在github上给出了一个复现方法，git clone之后<code>bash docker_build.sh</code>，<code>bash docker_run.sh</code>。使用docker固然容易复现，但是这个项目并没有什么奇怪的依赖，所以我们可以大胆直接跑。(如果你想用docker跑我劝你不要，因为代码有bug需要修)</p><p>首先clone项目 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/grip-unina/TruFor<br></code></pre></td></tr></table></figure></p><p>然后下载依赖，作者没有给requirements.txt,我从Dockerfile找到了下载依赖的部分 <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install tqdm yacs&gt;=<span class="hljs-number">0</span>.<span class="hljs-number">1</span>.<span class="hljs-number">8</span> timm&gt;=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>.<span class="hljs-number">4</span> numpy==<span class="hljs-number">1</span>.<span class="hljs-number">21</span>.<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure></p><p>接下来cd到<code>test_docker</code>文件夹，下载模型 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> test_docker<br>wget -q -c https://www.grip.unina.it/download/prog/TruFor/TruFor_weights.zip<br>unzip -q -n TruFor_weights.zip &amp;&amp; <span class="hljs-built_in">rm</span> TruFor_weights.zip<br></code></pre></td></tr></table></figure> 你的<code>test_docker</code> 文件夹下应该有一个<code>weights</code>文件下，下面有一个文件<code>trufor.pth.tar</code></p><p>接下来，运行下面的命令复现测试 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> src<br>python trufor_test.py<br></code></pre></td></tr></table></figure> 你注意一下，如果爆显存了就运行,这样会使用cpu推理 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python trufor_test<span class="hljs-selector-class">.py</span> <span class="hljs-attr">--gpu</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></p><p>运行结束后你在<code>test_docker/output</code> 目录下应该能看到这样的四个文件<img src="https://cdn.studyinglover.com/pic/2023/11/2d1d99ebe3d6b02a819ebea0c6a99108.png" alt="image.png" /></p><p>你也可以指定推理的图片和保存位置，参考<code>python trufor_test.py -h</code>，可以传一个文件或者文件夹 <figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sas">usage: trufor_test.py [-h] [-gpu GPU] [-<span class="hljs-keyword">in</span> <span class="hljs-keyword">INPUT</span>] [-<span class="hljs-keyword">out</span> <span class="hljs-keyword">OUTPUT</span>] [-save_np] ...<br><br>Test TruFor<br><br>positional arguments:<br>  opts                  other <span class="hljs-keyword">options</span><br><br><span class="hljs-keyword">options</span>:<br>  -h, --help            show this help <span class="hljs-keyword">message</span> <span class="hljs-keyword">and</span> exit<br>  -gpu GPU, --gpu GPU   device, use -1 for cpu<br>  -<span class="hljs-keyword">in</span> <span class="hljs-keyword">INPUT</span>, --<span class="hljs-keyword">input</span> <span class="hljs-keyword">INPUT</span><br>                        can be a single <span class="hljs-keyword">file</span>, a directory <span class="hljs-keyword">or</span> a glob statement<br>  -<span class="hljs-keyword">out</span> <span class="hljs-keyword">OUTPUT</span>, --<span class="hljs-keyword">output</span> <span class="hljs-keyword">OUTPUT</span><br>                        <span class="hljs-keyword">output</span> folder<br>  -save_np, --save_np   whether to save the Noiseprint++ <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span><br></code></pre></td></tr></table></figure></p><p>接下来让我们可视化异常检测图，回到<code>test_docker</code>文件夹,</p><p><strong>很重要！！</strong> 请看<code>visualize.py</code> 他的第32行是不是 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">fig.suptitle(<span class="hljs-string">&#x27;score: %.3f&#x27;</span> % result[<span class="hljs-string">&#x27;score_sigmoid&#x27;</span>])<br></code></pre></td></tr></table></figure></p><p>这是个错误！请将他改成下面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">fig.suptitle(<span class="hljs-string">&#x27;score: %.3f&#x27;</span> % result[<span class="hljs-string">&#x27;score&#x27;</span>])<br></code></pre></td></tr></table></figure><p>运行下面的命令，记得把<code>/path/to</code>改成你的真实路径 <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd ..<br>python visualize.py --image <span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/TruFor/</span>test_docker<span class="hljs-regexp">/images/</span>pristine1.jpg --output <span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/TruFor/</span>test_docker<span class="hljs-regexp">/output/</span>pristine1.jpg.npz<br></code></pre></td></tr></table></figure> 我们可以得到推理结果 <img src="https://cdn.studyinglover.com/pic/2023/11/14badab7dc04320b5cd8888aa7c85ef4.png" alt="image.png" /></p><p>ok,让我们来看看宇航员的图片吧，先下载两张图 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://history.nasa.gov/alsj/a15/AS15-92-12407HR.jpg<br>wget https://history.nasa.gov/alsj/a15/AS15-92-12424HR.jpg<br></code></pre></td></tr></table></figure> 我直接给出运行结果 <img src="https://cdn.studyinglover.com/pic/2023/11/b6e81c8ccb74234afe93cb6d6386d595.png" alt="image.png" /> <img src="https://cdn.studyinglover.com/pic/2023/11/df66071be970b7b2d832dbd493f2a618.png" alt="image.png" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;trufor笔记和代码复现&quot;&gt;TruFor笔记和代码复现&lt;/h1&gt;
&lt;p&gt;最近有个新闻很火，说&lt;a href=&quot;https://www.zhihu.com/question/631987370&quot;&gt;谷歌 AI 技术曾判定美国登月任务的照片存在虚假内容&lt;/a&gt; 有&lt;a</summary>
      
    
    
    
    
    <category term="图像伪造检测和定位" scheme="https://studyinglover.com/tags/%E5%9B%BE%E5%83%8F%E4%BC%AA%E9%80%A0%E6%A3%80%E6%B5%8B%E5%92%8C%E5%AE%9A%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>深入分析：GitHub Trending 项目 &quot;multipleWindow3dScene&quot;</title>
    <link href="https://studyinglover.com/2023/11/27/multipleWindow3dScene%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A/"/>
    <id>https://studyinglover.com/2023/11/27/multipleWindow3dScene%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A/</id>
    <published>2023-11-27T19:18:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<p>这是由chatGPT生成的文章，内容是关于GitHub Trending 项目 "multipleWindow3dScene"的深入分析，分享链接<a href="https://chat.openai.com/share/289860f7-6e7e-458c-b3a8-fe97d01e63bd">ChatGPT</a></p><p>其实作者用的技术并不是很新的东西，treejs已经被使用很多年了，跨窗口同步状态也有很多讲解，但是作者把这两个东西结合起来，做出了一个很有意思的东西。</p><p>项目地址 <a href="https://github.com/bgstaal/multipleWindow3dScene">GitHub</a></p><h1 id="深入分析github-trending-项目-multiplewindow3dscene">深入分析：GitHub Trending 项目 "multipleWindow3dScene"</h1><p>GitHub上备受瞩目的 "multipleWindow3dScene" 项目，是一个创新的尝试，通过 <code>three.js</code> 和 <code>localStorage</code> 在多个浏览器窗口之间同步3D场景。我们将详细探讨其技术实现。</p><h2 id="main.js-文件解析"><code>main.js</code> 文件解析</h2><h3 id="初始化与场景建立">初始化与场景建立</h3><ol type="1"><li><strong>引入 <code>WindowManager</code></strong>: <code>main.js</code> 首先导入 <code>WindowManager.js</code>，用于跨窗口同步状态。</li><li><strong>场景和相机配置</strong>:<ul><li>使用 <code>three.js</code> 创建了一个3D场景。</li><li>初始化了一个正交摄像头，设置其位置，以便在3D场景中正确观察对象。</li></ul></li><li><strong>渲染器配置</strong>:<ul><li>采用 <code>three.js</code> 的 WebGL 渲染器渲染场景。</li><li>渲染器的元素被添加到文档体中，用于显示3D内容。</li></ul></li></ol><h3 id="动态调整和事件处理">动态调整和事件处理</h3><ol type="1"><li><strong>窗口尺寸调整</strong>: 代码监听浏览器窗口的 <code>resize</code> 事件，以便动态调整3D场景的大小。</li></ol><h2 id="windowmanager.js-文件解析"><code>WindowManager.js</code> 文件解析</h2><h3 id="跨窗口状态管理">跨窗口状态管理</h3><ol type="1"><li><strong>存储窗口信息</strong>: <code>#windows</code> 私有属性存储了所有打开窗口的信息（尺寸、位置和唯一标识符）。</li><li><strong>事件监听</strong>:<ul><li><code>storage</code> 事件监听器用于在其他窗口更新 <code>localStorage</code> 时接收通知。</li><li><code>beforeunload</code> 事件监听器在窗口关闭前，从 <code>localStorage</code> 中移除该窗口的信息。</li></ul></li></ol><h3 id="状态同步">状态同步</h3><ol type="1"><li><strong>初始化和状态更新</strong>: 窗口创建时，窗口信息被初始化并保存在 <code>localStorage</code>。</li><li><strong>跨窗口通信</strong>: 更新 <code>localStorage</code> 并监听 <code>storage</code> 事件，以实现窗口间状态的实时同步。</li></ol><h2 id="应用实例">应用实例</h2><h3 id="多窗口3d场景交互">多窗口3D场景交互</h3><p>在一个窗口中对3D对象进行的操作会通过 <code>localStorage</code> 更新到其他所有窗口。其他窗口监听到 <code>storage</code> 事件后，更新其3D场景以反映出这些变化。</p><h3 id="窗口状态同步">窗口状态同步</h3><p>项目能够实时跟踪每个窗口的状态。当用户调整其中一个窗口的大小或位置时，这种变化会通过 <code>localStorage</code> 及时反映到其他窗口中。</p><h2 id="结论">结论</h2><p>"multipleWindow3dScene" 展示了如何在不同浏览器窗口间同步复杂的3D场景。这种方法开辟了多窗口Web应用的新可能性，为创造连贯且互动的用户体验提供了强大工具。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是由chatGPT生成的文章，内容是关于GitHub Trending 项目 &quot;multipleWindow3dScene&quot;的深入分析，分享链接&lt;a href=&quot;https://chat.openai.com/share/289860f7-6e7e-458c-b3a8-f</summary>
      
    
    
    
    
    <category term="threejs" scheme="https://studyinglover.com/tags/threejs/"/>
    
    <category term="前端" scheme="https://studyinglover.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>pua大模型</title>
    <link href="https://studyinglover.com/2023/11/19/pua%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    <id>https://studyinglover.com/2023/11/19/pua%E5%A4%A7%E6%A8%A1%E5%9E%8B/</id>
    <published>2023-11-19T11:12:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<p>这两天看到了一个论文<a href="https://arxiv.org/abs/2307.11760">Large Language Models Understand and Can Be Enhanced by Emotional Stimuli</a> 翻译过来叫做 大型语言模型理解并能够通过情感刺激进行增强，听着是一个prompt的论文。</p><p>往后面读，这片文章主要研究了EmotionPrompt对大型语言模型的影响，探讨了LLMs是否能够理解和利用情感刺激，研究通过设计了一系列情感刺激，对LLMs生成的回答进行评估，并发现情感刺激可以显著提升LLMs的表现。果然是prompt。</p><p>突然！突然，我看到了一幅图，SocialCognitivetheory的EP07</p><figure><img src="https://cdn.studyinglover.com/pic/2023/11/14067ba2e409f6825f56b2cec7fd03aa.png" alt="" /><figcaption>image.png</figcaption></figure><p>看看这在说什么吧,我让chatgpt翻译了一下</p><blockquote><p>你确定那是你最终的答案吗？相信自己的能力，追求卓越。你的努力将会产生卓著的成果。</p></blockquote><p>好家伙，你搁这pua大语言模型呢。这让我想起来了某pua话术</p><blockquote><p>“其实，我对你是有一些失望的。当初给你定级px，是高于你面试时的水平的。我是希望进来以后，你能够拼一把，快速成长起来的。px这个层级，不是把事情做好就可以的。你需要有体系化思考的能力。你做的事情，他的价值点在哪里？你是否作出了壁垒，形成了核心竞争力？你做的事情，和公司内其他团队的差异化在哪里？你的事情，是否沉淀了一套可复用的物理资料和方法论？为什么是你来做，其他人不能做吗？你需要有自己的判断力，而不是我说什么你就做什么。后续，把你的思考沉淀到日报周报月报里，我希望看到你的思考，而不仅仅是进度。另外，提醒一下，你的产出，和同层级比，是有些单薄的，马上要到年底了，加把劲儿。你看咱们团队的那个谁，人家去年晋升之前，可以一整年都在项目室打地铺的。成长，一定是伴随着痛苦的，当你最痛苦的时候其实才是你成长最快的时候。加油！”</p></blockquote><p>我决定实验一下，这里给出我cpu gpt4的结果 https://chat.openai.com/share/731b7a81-6f48-4440-9c47-c1cc7bbe13d1</p><p>我把他写的论文附在下面</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 大型语言模型与外部API集成：推动AI边界的探索<br><br>## 引言<br>在人工智能的迅速发展过程中，大型语言模型如GPT<span class="hljs-number">-4</span>已成为技术进步的象征。这些模型通过处理和生成自然语言，展示了深度学习的强大能力。然而，为了进一步提升这些模型的功能和适用性，将它们与外部API集成变得尤为重要。此举不仅提高了模型的实用性，还为研究人员和开发者提供了探索AI未来边界的新途径。<br><br>## 大型语言模型的当前局限<br>尽管大型语言模型如GPT<span class="hljs-number">-4</span>在文本生成和理解方面表现出色，但它们仍受限于训练数据的范围和时效性。模型无法直接访问或处理实时数据，也无法进行复杂的数据分析或访问互联网内容，这限制了其在某些应用场景下的有效性。<br><br>## 外部API集成的必要性<br>通过将这些模型与外部API集成，我们可以极大地拓宽它们的功能。例如，集成金融API可以使模型处理实时股市数据，而集成地理信息系统API则可以让模型访问和分析地理数据。这种集成不仅提高了模型的实用性，还为开发新应用提供了可能。<br><br>## 技术实现与挑战<br>实现这种集成需要克服若干技术挑战。首先，需要确保模型能够安全有效地与API进行通信。这涉及到数据传输、安全性和隐私保护等问题。其次，需要处理和适应API返回的数据格式，这可能要求模型具备一定的适应性和灵活性。最后，还需要考虑如何整合API返回的数据与模型生成的内容，确保信息的准确性和连贯性。<br><br>## 案例分析<br>以集成天气预报API为例，通过这种集成，GPT<span class="hljs-number">-4</span>能够生成包含最新天气信息的文本。在一个旅游推荐应用中，模型可以根据实时天气数据调整其推荐内容，从而提供更准确、个性化的建议。<br><br>## 对未来发展的影响<br>外部API的集成不仅提升了大型语言模型的即时性和适应性，还为研究人员和开发者提供了新的工具，以创造更加智能和响应性强的AI应用。这可能会促进人工智能在医疗、金融、环境监测等领域的应用，推动AI技术的进一步发展。<br><br>## 结论<br>大型语言模型与外部API的集成是推动AI技术发展的关键步骤。它不仅提高了模型的实用性和适用范围，还开辟了探索AI新边界的道路。随着这种集成技术的不断完善，我们可以期待在未来看到更加智能、灵活和强大的人工智能应用。<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这两天看到了一个论文&lt;a href=&quot;https://arxiv.org/abs/2307.11760&quot;&gt;Large Language Models Understand and Can Be Enhanced by Emotional Stimuli&lt;/a&gt; 翻译过来叫做</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ggml教程|mnist手写体识别量化推理</title>
    <link href="https://studyinglover.com/2023/11/12/ggml%E6%95%99%E7%A8%8B|mnist%E6%89%8B%E5%86%99%E4%BD%93%E8%AF%86%E5%88%AB%E9%87%8F%E5%8C%96%E6%8E%A8%E7%90%86/"/>
    <id>https://studyinglover.com/2023/11/12/ggml%E6%95%99%E7%A8%8B|mnist%E6%89%8B%E5%86%99%E4%BD%93%E8%AF%86%E5%88%AB%E9%87%8F%E5%8C%96%E6%8E%A8%E7%90%86/</id>
    <published>2023-11-12T18:49:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ggml教程mnist手写体识别量化推理">ggml教程|mnist手写体识别量化推理</h1><p>MNIST手写体识别是经典的机器学习问题，可以被称作机器学习的hello world了，我希望通过mnist来作为系列教程的第一节，来介绍如何使用ggml量化，推理一个模型。这个教程将会使用pytorch来训练一个简单的全连接神经网络，然后使用ggml量化，最后使用ggml推理这个模型。</p><p>代码开源在仓库<a href="https://github.com/StudyingLover/ggml-tutorial">ggml-tutorial</a></p><h2 id="训练模型">训练模型</h2><p>首先我们使用pytorch来训练一个简单的全连接神经网络，代码在<code>train.py</code> 文件中，训练好的模型会被保存到<code>model/mnist_model.pth</code> 文件中。代码是非常简单的torch代码</p><p>这里我们需要强调一下模型结构 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleNN</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(SimpleNN, self).__init__()<br>        self.fc1 = nn.Linear(<span class="hljs-number">784</span>, <span class="hljs-number">128</span>)<br>        self.fc2 = nn.Linear(<span class="hljs-number">128</span>, <span class="hljs-number">10</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">784</span>)<br>        x = torch.relu(self.fc1(x))<br>        x = self.fc2(x)<br>        <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure> 模型由两个全连接层组成，第一个全连接层的输入是784维，输出是128维，第二个全连接层的输入是128维，输出是10维。我们需要知道这个结构，因为我们需要在量化模型时知道各个层的名字。</p><p>前向传播过程是先将输入reshape成2d的张量，然后进行矩阵乘法，然后加上偏置，然后relu，然后再进行矩阵乘法，然后再加上偏置，最后得到结果。</p><h2 id="量化">量化</h2><p>我们需要使用ggml对模型进行量化，代码在<code>convert-pth-to-ggml.py</code> 文件中,使用<code>python convert-pth-to-ggml.py model/mnist_model.pth</code>进行转换，量化后的模型会被保存到<code>model/mnist-ggml-model-f32.pth</code> 文件中。</p><p>这里需要对很多细节作出解释： 1. ggml量化的模型格式叫做gguf,文件开头有一个魔数标记了这个文件是gguf文件，接下来是模型的各种数据，具体细节可以查看<a href="https://github.com/ggerganov/ggml/blob/master/docs/gguf.md">官方文档</a>。为了方便，作者提供了一个python库来读写gguf文件，使用<code>pip install gguf</code> 就可以安装。 2. 我们需要知道模型中各个层数据的名字，使用<code>model.keys()</code> 就可以知道了。知道各个层的名字之后我们就可以取出各个层的数据，并对需要的层进行量化，也就是下面这段代码，我对weights进行了量化，转换成了<code>float16</code> <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">fc1_weights = model<span class="hljs-selector-attr">[<span class="hljs-string">&quot;fc1.weight&quot;</span>]</span><span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.numpy</span>()<br>fc1_weights = fc1_weights<span class="hljs-selector-class">.astype</span>(np.float16)<br>gguf_writer<span class="hljs-selector-class">.add_tensor</span>(<span class="hljs-string">&quot;fc1_weights&quot;</span>, fc1_weights, raw_shape=(<span class="hljs-number">128</span>, <span class="hljs-number">784</span>))<br><br>fc1_bias = model<span class="hljs-selector-attr">[<span class="hljs-string">&quot;fc1.bias&quot;</span>]</span><span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.numpy</span>()<br>gguf_writer<span class="hljs-selector-class">.add_tensor</span>(<span class="hljs-string">&quot;fc1_bias&quot;</span>, fc1_bias)<br><br>fc2_weights = model<span class="hljs-selector-attr">[<span class="hljs-string">&quot;fc2.weight&quot;</span>]</span><span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.numpy</span>()<br>fc2_weights = fc2_weights<span class="hljs-selector-class">.astype</span>(np.float16)<br>gguf_writer<span class="hljs-selector-class">.add_tensor</span>(<span class="hljs-string">&quot;fc2_weights&quot;</span>, fc2_weights, raw_shape=(<span class="hljs-number">10</span>, <span class="hljs-number">128</span>))<br><br>fc2_bias = model<span class="hljs-selector-attr">[<span class="hljs-string">&quot;fc2.bias&quot;</span>]</span><span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.numpy</span>()<br>gguf_writer<span class="hljs-selector-class">.add_tensor</span>(<span class="hljs-string">&quot;fc2_bias&quot;</span>, fc2_bias)<br></code></pre></td></tr></table></figure></p><ol start="3" type="1"><li>保存模型按照代码特定顺序执行就可以了 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus">gguf_writer = gguf<span class="hljs-selector-class">.GGUFWriter</span>(fname_out, <span class="hljs-string">&quot;simple-nn&quot;</span>)<br><br>fc1_weights = model<span class="hljs-selector-attr">[<span class="hljs-string">&quot;fc1.weight&quot;</span>]</span><span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.numpy</span>()<br>fc1_weights = fc1_weights<span class="hljs-selector-class">.astype</span>(np.float16)<br>gguf_writer<span class="hljs-selector-class">.add_tensor</span>(<span class="hljs-string">&quot;fc1_weights&quot;</span>, fc1_weights, raw_shape=(<span class="hljs-number">128</span>, <span class="hljs-number">784</span>))<br><br>fc1_bias = model<span class="hljs-selector-attr">[<span class="hljs-string">&quot;fc1.bias&quot;</span>]</span><span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.numpy</span>()<br>gguf_writer<span class="hljs-selector-class">.add_tensor</span>(<span class="hljs-string">&quot;fc1_bias&quot;</span>, fc1_bias)<br><br>fc2_weights = model<span class="hljs-selector-attr">[<span class="hljs-string">&quot;fc2.weight&quot;</span>]</span><span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.numpy</span>()<br>fc2_weights = fc2_weights<span class="hljs-selector-class">.astype</span>(np.float16)<br>gguf_writer<span class="hljs-selector-class">.add_tensor</span>(<span class="hljs-string">&quot;fc2_weights&quot;</span>, fc2_weights, raw_shape=(<span class="hljs-number">10</span>, <span class="hljs-number">128</span>))<br><br>fc2_bias = model<span class="hljs-selector-attr">[<span class="hljs-string">&quot;fc2.bias&quot;</span>]</span><span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.numpy</span>()<br>gguf_writer<span class="hljs-selector-class">.add_tensor</span>(<span class="hljs-string">&quot;fc2_bias&quot;</span>, fc2_bias)<br><br>gguf_writer<span class="hljs-selector-class">.write_header_to_file</span>()<br>gguf_writer<span class="hljs-selector-class">.write_kv_data_to_file</span>()<br>gguf_writer<span class="hljs-selector-class">.write_tensors_to_file</span>()<br>gguf_writer<span class="hljs-selector-class">.close</span>()<br></code></pre></td></tr></table></figure></li></ol><p>我们可以看到，原本模型大小是399.18kb,现在的大小是199.31kb，确实是缩小了很多的。</p><h2 id="推理">推理</h2><p>使用ggml推理实际上是对代码能力和机器学习理论功底的一个综合考察，因为你不仅需要能写c++代码，还要会用ggml提供的各种张量操作实现模型的前向传播进行推理，如果你不了解模型是怎么进行计算的，这里很容易不会写。我们接下来详细来说怎么写代码。</p><p>首先按照我们torch定义的模型，我们定义一个结构体来存储模型权重 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">mnist_model</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ggml_tensor</span> * fc1_weight;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ggml_tensor</span> * fc1_bias;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ggml_tensor</span> * fc2_weight;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ggml_tensor</span> * fc2_bias;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ggml_context</span> * ctx;<br>&#125;;<br></code></pre></td></tr></table></figure></p><p>接下来加载模型,传入两个参数，模型地址和模型结构体。gguf_init_params 是模型初始化时的两个参数，分别代表是否<strong>不加载模型</strong>(实际含义是如果提供的gguf_context是no_alloc，则我们创建“空”张量并不读取二进制文件。否则，我们还将二进制文件加载到创建的ggml_context中，并将ggml_tensor结构体的"data"成员指向二进制文件中的适当位置。)和模型的地址。gguf_init_from_file 函数会返回一个gguf_context，这个结构体包含了模型的所有信息，我们需要从中取出我们需要的张量，这里我们需要的张量是fc1_weight,fc1_bias,fc2_weight,fc2_bias(和量化模型时保持一致)。 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">mnist_model_load</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; fname, mnist_model &amp; model)</span> </span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">gguf_init_params</span> params = &#123;<br>        <span class="hljs-comment">/*.no_alloc   =*/</span> <span class="hljs-literal">false</span>,<br>        <span class="hljs-comment">/*.ctx        =*/</span> &amp;model.ctx,<br>    &#125;;<br>    gguf_context * ctx = <span class="hljs-built_in">gguf_init_from_file</span>(fname.<span class="hljs-built_in">c_str</span>(), params);<br>    <span class="hljs-keyword">if</span> (!ctx) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;%s: gguf_init_from_file() failed\n&quot;</span>, __func__);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    model.fc1_weight = <span class="hljs-built_in">ggml_get_tensor</span>(model.ctx, <span class="hljs-string">&quot;fc1_weights&quot;</span>);<br>    model.fc1_bias = <span class="hljs-built_in">ggml_get_tensor</span>(model.ctx, <span class="hljs-string">&quot;fc1_bias&quot;</span>);<br>    model.fc2_weight = <span class="hljs-built_in">ggml_get_tensor</span>(model.ctx, <span class="hljs-string">&quot;fc2_weights&quot;</span>);<br>    model.fc2_bias = <span class="hljs-built_in">ggml_get_tensor</span>(model.ctx, <span class="hljs-string">&quot;fc2_bias&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>接下来我们写模型的前向传播,完整代码在<code>main-torch.cpp</code>。传入的参数是模型的地址，线程数，数据和是否导出计算图(这个我们先不讨论)。</p><p>首先初始化模型和数据 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">static</span> <span class="hljs-type">size_t</span> buf_size = <span class="hljs-number">100000</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>) * <span class="hljs-number">4</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> * buf = <span class="hljs-built_in">malloc</span>(buf_size);<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ggml_init_params</span> params = &#123;<br>    <span class="hljs-comment">/*.mem_size   =*/</span> buf_size,<br>    <span class="hljs-comment">/*.mem_buffer =*/</span> buf,<br>    <span class="hljs-comment">/*.no_alloc   =*/</span> <span class="hljs-literal">false</span>,<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ggml_context</span> * ctx0 = <span class="hljs-built_in">ggml_init</span>(params);<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ggml_cgraph</span> * gf = <span class="hljs-built_in">ggml_new_graph</span>(ctx0);<br></code></pre></td></tr></table></figure></p><p>我们先复习一下全连接层的计算。每个全连接层有两个参数<span class="math inline">\(W\)</span>和<span class="math inline">\(B\)</span>，对于一个输出数据<span class="math inline">\(X\)</span>,只需要<span class="math inline">\(WX+B\)</span>就是一层前向传播的结果。</p><p>那么我们先初始化一个4d的张量作为输入(和torch很像)，然后将数据复制到这个张量中，然后将这个张量reshape成2d的张量，然后进行矩阵乘法，然后加上偏置，然后relu，然后再进行矩阵乘法，然后再加上偏置，最后得到结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ggml_tensor</span> * input = <span class="hljs-built_in">ggml_new_tensor_4d</span>(ctx0, GGML_TYPE_F32, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">memcpy</span>(input-&gt;data, digit.<span class="hljs-built_in">data</span>(), <span class="hljs-built_in">ggml_nbytes</span>(input));<br>    <span class="hljs-built_in">ggml_set_name</span>(input, <span class="hljs-string">&quot;input&quot;</span>);<br>    ggml_tensor * cur = <span class="hljs-built_in">ggml_reshape_2d</span>(ctx0, input, <span class="hljs-number">784</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// std::cout&lt;&lt;model.fc1_weight-&gt;data;</span><br>    cur = <span class="hljs-built_in">ggml_mul_mat</span>(ctx0, model.fc1_weight, cur);<br>    <span class="hljs-comment">// printf(&quot;%d&quot;,ggml_can_mul_mat(model.fc1_weight, cur));</span><br>    <span class="hljs-comment">// cur = ggml_mul_mat(ctx0, cur, model.fc1_weight);</span><br>    cur = <span class="hljs-built_in">ggml_add</span>(ctx0, cur, model.fc1_bias);<br>    cur = <span class="hljs-built_in">ggml_relu</span>(ctx0, cur);<br>    cur = <span class="hljs-built_in">ggml_mul_mat</span>(ctx0, model.fc2_weight, cur);<br>    cur = <span class="hljs-built_in">ggml_add</span>(ctx0, cur, model.fc2_bias);<br></code></pre></td></tr></table></figure><p>接下来通过计算图计算出结果，ggml已经提供了api <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">ggml_build_forward_expand</span>(gf, result);<br><span class="hljs-built_in">ggml_graph_compute_with_ctx</span>(ctx0, gf, n_threads);<br></code></pre></td></tr></table></figure></p><p>我们需要将结果reshape成1d的张量，然后取出最大值，这个最大值就是我们的预测结果。 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> prediction = std::<span class="hljs-built_in">max_element</span>(probs_data, probs_data + <span class="hljs-number">10</span>) - probs_data;<br><span class="hljs-type">const</span> <span class="hljs-type">float</span> * probs_data = <span class="hljs-built_in">ggml_get_data_f32</span>(result);<br></code></pre></td></tr></table></figure></p><p>我们可以将计算图进行存储,这部分代码我们先不讨论 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//ggml_graph_print(&amp;gf);</span><br><span class="hljs-built_in">ggml_graph_dump_dot</span>(gf, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;mnist-cnn.dot&quot;</span>);<br><br><span class="hljs-keyword">if</span> (fname_cgraph) &#123;<br>    <span class="hljs-comment">// export the compute graph for later use</span><br>    <span class="hljs-comment">// see the &quot;mnist-cpu&quot; example</span><br>    <span class="hljs-built_in">ggml_graph_export</span>(gf, fname_cgraph);<br><br>    <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;%s: exported compute graph to &#x27;%s&#x27;\n&quot;</span>, __func__, fname_cgraph);<br>&#125;<br></code></pre></td></tr></table></figure></p><p>最后记得释放内存 <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">ggml_free</span>(ctx0);<br></code></pre></td></tr></table></figure></p><h2 id="图片读取">图片读取</h2><p>我们这里要用到<code>stb_image.h</code>这个头文件，我们通过下面的代码导入 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> STB_IMAGE_IMPLEMENTATION</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stb_image.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STB_IMAGE_WRITE_IMPLEMENTATION</span><br></code></pre></td></tr></table></figure></p><p>我们定义一个结构体来存储图片 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">image_u8</span> &#123;<br>    <span class="hljs-type">int</span> nx;<br>    <span class="hljs-type">int</span> ny;<br><br>    std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; data;<br>&#125;;<br></code></pre></td></tr></table></figure></p><p>接下来我们写一个函数来读取图片，两个参数分别是图片地址和图片结构体 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">image_load_from_file</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; fname, image_u8 &amp; img)</span> </span>&#123;<br>    <span class="hljs-type">int</span> nx, ny, nc;<br>    <span class="hljs-keyword">auto</span> data = <span class="hljs-built_in">stbi_load</span>(fname.<span class="hljs-built_in">c_str</span>(), &amp;nx, &amp;ny, &amp;nc, <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">if</span> (!data) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;%s: failed to load &#x27;%s&#x27;\n&quot;</span>, __func__, fname.<span class="hljs-built_in">c_str</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    img.nx = nx;<br>    img.ny = ny;<br>    img.data.<span class="hljs-built_in">resize</span>(nx * ny * <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">memcpy</span>(img.data.<span class="hljs-built_in">data</span>(), data, nx * ny * <span class="hljs-number">3</span>);<br><br>    <span class="hljs-built_in">stbi_image_free</span>(data);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="运行">运行</h2><p>首先初始化ggml <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">ggml_time_init</span>();<br></code></pre></td></tr></table></figure></p><p>接下来加载模型 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++">mnist_model model;<br><span class="hljs-comment">// load the model</span><br>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int64_t</span> t_start_us = <span class="hljs-built_in">ggml_time_us</span>();<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">mnist_model_load</span>(argv[<span class="hljs-number">1</span>], model)) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;%s: failed to load model from &#x27;%s&#x27;\n&quot;</span>, __func__, argv[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <br><br>    <span class="hljs-type">const</span> <span class="hljs-type">int64_t</span> t_load_us = <span class="hljs-built_in">ggml_time_us</span>() - t_start_us;<br><br>    <span class="hljs-built_in">fprintf</span>(stdout, <span class="hljs-string">&quot;%s: loaded model in %8.2f ms\n&quot;</span>, __func__, t_load_us / <span class="hljs-number">1000.0f</span>);<br>&#125;<br></code></pre></td></tr></table></figure></p><p>接下来读取图片并存储为特定格式 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// read a img from a file</span><br><br>image_u8 img0;<br>std::string img_path = argv[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">image_load_from_file</span>(img_path, img0)) &#123;<br>    <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;%s: failed to load image from &#x27;%s&#x27;\n&quot;</span>, __func__, img_path.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;%s: loaded image &#x27;%s&#x27; (%d x %d)\n&quot;</span>, __func__, img_path.<span class="hljs-built_in">c_str</span>(), img0.nx, img0.ny);<br><br><br><span class="hljs-type">uint8_t</span> buf[<span class="hljs-number">784</span>];<br><br><span class="hljs-comment">// convert the image to a digit</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int64_t</span> t_start_us = <span class="hljs-built_in">ggml_time_us</span>();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">784</span>; i++) &#123;<br>    buf[i] = <span class="hljs-number">255</span> - img0.data[i * <span class="hljs-number">3</span>];<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">784</span>; i++) &#123;<br>    digit.<span class="hljs-built_in">push_back</span>(buf[i] / <span class="hljs-number">255.0f</span>);<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int64_t</span> t_convert_us = <span class="hljs-built_in">ggml_time_us</span>() - t_start_us;<br><br><span class="hljs-built_in">fprintf</span>(stdout, <span class="hljs-string">&quot;%s: converted image to digit in %8.2f ms\n&quot;</span>, __func__, t_convert_us / <span class="hljs-number">1000.0f</span>);<br></code></pre></td></tr></table></figure></p><p>接下来进行推理 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> prediction = <span class="hljs-built_in">mnist_eval</span>(model, <span class="hljs-number">1</span>, digit, <span class="hljs-literal">nullptr</span>);<br><span class="hljs-built_in">fprintf</span>(stdout, <span class="hljs-string">&quot;%s: predicted digit is %d\n&quot;</span>, __func__, prediction);<br></code></pre></td></tr></table></figure> 最后记得释放内存 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">ggml_free</span>(model.ctx);<br></code></pre></td></tr></table></figure> ## 使用 在<code>examples/CMakeLists.txt</code>最后一行加入<code>add_subdirectory(mnist-torch)</code></p><p>然后运行<code>mkdir build &amp;&amp; cd build &amp;&amp; cmake .. &amp;&amp; make mnist-torch -j8</code></p><p>最后运行<code>./mnist-torch /path/to/mnist-ggml-model-f32.gguf /path/to/example.png</code></p><p>记得把<code>/path/to/mnist-ggml-model-f32.gguf</code>和<code>/path/to/example.png</code>换成你的路径</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ggml教程mnist手写体识别量化推理&quot;&gt;ggml教程|mnist手写体识别量化推理&lt;/h1&gt;
&lt;p&gt;MNIST手写体识别是经典的机器学习问题，可以被称作机器学习的hello world了，我希望通过mnist来作为系列教程的第一节，来介绍如何使用ggml量化，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>xgboost2.0最佳实践</title>
    <link href="https://studyinglover.com/2023/10/19/xgboost2.0%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>https://studyinglover.com/2023/10/19/xgboost2.0%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</id>
    <published>2023-10-19T08:30:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xgboost2.0最佳实践">xgboost2.0最佳实践</h1><p>首先更新xgboost到2.0.0 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install xgboost -U <br></code></pre></td></tr></table></figure></p><p>在最新版本的训练中，参数可以使用字典传递。同时数据和样本需要先合并成一个<code>xgb.DMatrix</code> 对象 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置参数</span><br>params = &#123;<br>    <span class="hljs-string">&quot;device&quot;</span>: <span class="hljs-string">&quot;cuda&quot;</span>,<br>&#125;<br><br><span class="hljs-comment"># 创建DMatrix对象</span><br>Xy = xgb.DMatrix(X_train, y_train)<br><br><span class="hljs-comment"># 训练模型</span><br>model = xgb.train(params, Xy)<br></code></pre></td></tr></table></figure></p><p>进行分类任务是，需要传递类别数，而不是像之前版本那样自动检测类别 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置参数</span><br>params = &#123;<br>    <span class="hljs-string">&quot;device&quot;</span>: <span class="hljs-string">&quot;cuda&quot;</span>,<br>    <span class="hljs-string">&quot;num_class&quot;</span>: <span class="hljs-number">5</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>根据xgboost路线图<a href="https://github.com/dmlc/xgboost/issues/7547">Roadmap Phasing out the support for old binary format.</a>，在2.2版本将删除对保存旧二进制格式的支持，删除对旧 JSON 模型的支持。在2.3版本将删除对加载旧二进制格式的支持。最新保存模型的方式是 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">xgb.save(bst, <span class="hljs-string">&#x27;model_file_name.json&#x27;</span>)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xgboost2.0最佳实践&quot;&gt;xgboost2.0最佳实践&lt;/h1&gt;
&lt;p&gt;首先更新xgboost到2.0.0 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla</summary>
      
    
    
    
    <category term="踩坑" scheme="https://studyinglover.com/categories/%E8%B8%A9%E5%9D%91/"/>
    
    
    <category term="机器学习" scheme="https://studyinglover.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>xgboost使用GPU最佳实践</title>
    <link href="https://studyinglover.com/2023/10/18/xgboost%E4%BD%BF%E7%94%A8GPU%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>https://studyinglover.com/2023/10/18/xgboost%E4%BD%BF%E7%94%A8GPU%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</id>
    <published>2023-10-18T18:50:00.000Z</published>
    <updated>2024-02-22T06:12:20.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xgboost使用gpu最佳实践">xgboost使用GPU最佳实践</h1><p>首先更新xgboost到2.0.0 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install xgboost -U <br></code></pre></td></tr></table></figure></p><p>这里给出一个使用GPU的例子，使用的是nvidia显卡 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> xgboost<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br><br><span class="hljs-comment"># 生成示例数据</span><br>np.random.seed(<span class="hljs-number">114514</span>)<br>X = np.random.randn(<span class="hljs-number">100</span>, <span class="hljs-number">3</span>)  <span class="hljs-comment"># 生成100个样本，每个样本有3个特征</span><br>y = stats.bernoulli.rvs(<span class="hljs-number">0.5</span>, size=<span class="hljs-number">100</span>)  <span class="hljs-comment"># 生成二分类标签，概率为0.5</span><br><br><span class="hljs-comment"># 设置参数</span><br>params = &#123;<br>    <span class="hljs-string">&quot;device&quot;</span>: <span class="hljs-string">&quot;cuda&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 创建DMatrix对象</span><br>Xy = xgboost.DMatrix(X, y)<br><br><span class="hljs-comment"># 训练模型</span><br>model = xgboost.train(params, Xy)<br><br><span class="hljs-comment"># 测试模型</span><br>test_array = np.random.randn(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br>dtest = xgboost.DMatrix(test_array)<br>pred = model.predict(dtest)<br><span class="hljs-built_in">print</span>(pred)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xgboost使用gpu最佳实践&quot;&gt;xgboost使用GPU最佳实践&lt;/h1&gt;
&lt;p&gt;首先更新xgboost到2.0.0 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    <category term="踩坑" scheme="https://studyinglover.com/categories/%E8%B8%A9%E5%9D%91/"/>
    
    
    <category term="机器学习" scheme="https://studyinglover.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
