<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ControlNet代码改造计划</title>
    <link href="/2023/04/21/ControlNet%E4%BB%A3%E7%A0%81%E6%94%B9%E9%80%A0/"/>
    <url>/2023/04/21/ControlNet%E4%BB%A3%E7%A0%81%E6%94%B9%E9%80%A0/</url>
    
    <content type="html"><![CDATA[<p>虽然现在webui已经支持了ControlNet，但是如果我们需要单独抽出来ControlNet做一些项目就需要对ControlNet进行改造。</p><h2 id="下载源码和模型">下载源码和模型</h2><p>项目主页 <a href="https://github.com/lllyasviel/ControlNet">github</a> <a href="https://huggingface.co/lllyasviel/ControlNet">huggingface</a></p><p>先下载源码 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/lllyasviel/ControlNet.git <br></code></pre></td></tr></table></figure></p><p>接下来下载需要的模型，进入huggingface 页面，选择<code>files and versions</code> <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230421105906.png" alt="image.png" /></p><p>先下载所有的annotator,进入<code>annotator/ckpts</code>文件夹,可以看到我们需要的ckpts文件，进入一个，右键download，选择复制下载链接 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230421110144.png" alt="image.png" /></p><p>执行命令，就会将模型下载下来 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget 复制的链接<br></code></pre></td></tr></table></figure></p><p>我这里整理了ckpt文件所有的下载的链接和命令,<code>/root/ControlNet/annotator/ckpts/</code> 是我的路径，换成你自己的就行 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /root/ControlNet/annotator/ckpts/<br><br>wget https://huggingface.co/lllyasviel/ControlNet/resolve/main/annotator/ckpts/body_pose_model.pth<br><br>wget https://huggingface.co/lllyasviel/ControlNet/resolve/main/annotator/ckpts/dpt_hybrid-midas-501f0c75.pt<br><br>wget https://huggingface.co/lllyasviel/ControlNet/resolve/main/annotator/ckpts/hand_pose_model.depth <br><br>wget https://huggingface.co/lllyasviel/ControlNet/resolve/main/annotator/ckpts/mlsd_large_512_fp32.depth <br><br>wget https://huggingface.co/lllyasviel/ControlNet/resolve/main/annotator/ckpts/mlsd_tiny_512_fp32.depth <br><br>wget https://huggingface.co/lllyasviel/ControlNet/resolve/main/annotator/ckpts/network-bsds500.depth <br><br>wget https://huggingface.co/lllyasviel/ControlNet/resolve/main/annotator/ckpts/upernet_global_small.pth<br></code></pre></td></tr></table></figure></p><p>接下来下载模型，假如我们需要canny2image，那我就需要下载<code>control_sd15_canny.pth</code> 这个文件，类似上面的方法，命令是 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://huggingface.co/lllyasviel/ControlNet/resolve/main/models/control_sd15_canny.pth<br></code></pre></td></tr></table></figure></p><blockquote><p>其实我们可以对比网址链接和下载链接</p><p>网址链接：https://huggingface.co/lllyasviel/ControlNet/blob/main/models/control_sd15_canny.pth</p><p>下载链接：https://huggingface.co/lllyasviel/ControlNet/resolve/main/models/control_sd15_canny.pth</p><p>我们只需要把网址链接的blob换成resolve就可以了。</p></blockquote><h2 id="改造">改造</h2><p>我们依然以camny2image为例，打开<code>gradio_canny2image,py</code> 文件，可以看到这个文件大概是这个样子 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> 各种依赖<br><br>apply_canny = CannyDetector()<span class="hljs-comment"># 创建了一个canny算子，用来将图片转换成canny图</span><br><br>model = create_model(<span class="hljs-string">&#x27;./models/cldm_v15.yaml&#x27;</span>).cpu()<br>model.load_state_dict(load_state_dict(<span class="hljs-string">&#x27;./models/control_sd15_canny.pth&#x27;</span>, location=<span class="hljs-string">&#x27;cuda&#x27;</span>))<br>model = model.cuda()<br>ddim_sampler = DDIMSampler(model)<span class="hljs-comment"># 加载了模型</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process</span>(<span class="hljs-params">input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, ddim_steps, guess_mode, strength, scale, seed, eta, low_threshold, high_threshold</span>):<br>    <span class="hljs-comment"># 一堆操作</span><br>    <span class="hljs-keyword">return</span> [<span class="hljs-number">255</span> - detected_map] + results<span class="hljs-comment"># 返回了canny图和生成的图片</span><br><br>block = gr.Blocks().queue()<span class="hljs-comment"># 创建一个gradio应用</span><br><span class="hljs-keyword">with</span> block:<br><span class="hljs-comment"># 又是一通操作，创建了各种gradio页面</span><br><br>block.launch(server_name=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>)<span class="hljs-comment"># 启动了gradio应用</span><br></code></pre></td></tr></table></figure></p><p>这样子我们只需要<code>process</code> 这个函数就可以了，那我们就可以把代码改成这样 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> share <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> config<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> einops<br><span class="hljs-keyword">import</span> gradio <span class="hljs-keyword">as</span> gr<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">from</span> pytorch_lightning <span class="hljs-keyword">import</span> seed_everything<br><span class="hljs-keyword">from</span> annotator.util <span class="hljs-keyword">import</span> resize_image, HWC3<br><span class="hljs-keyword">from</span> annotator.canny <span class="hljs-keyword">import</span> CannyDetector<br><span class="hljs-keyword">from</span> cldm.model <span class="hljs-keyword">import</span> create_model, load_state_dict<br><span class="hljs-keyword">from</span> cldm.ddim_hacked <span class="hljs-keyword">import</span> DDIMSampler<br><br>apply_canny = CannyDetector()<br>  <br>model = create_model(<span class="hljs-string">&#x27;./models/cldm_v15.yaml&#x27;</span>).cpu()<br><br>model.load_state_dict(load_state_dict(<span class="hljs-string">&#x27;./models/control_sd15_canny.pth&#x27;</span>, location=<span class="hljs-string">&#x27;cuda&#x27;</span>))<br>model = model.cuda()<br>ddim_sampler = DDIMSampler(model)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process</span>(<span class="hljs-params">input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, ddim_steps, guess_mode, strength, scale, seed, eta, low_threshold, high_threshold</span>):<br><span class="hljs-comment"># 这块直接复制源码process函数</span><br>    <span class="hljs-keyword">return</span> [<span class="hljs-number">255</span> - detected_map] + results<br><br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;__main__&#x27;</span> == __name__:<br>    img=cv2.imread(<span class="hljs-string">&#x27;test.png&#x27;</span>)<span class="hljs-comment"># 写你的图片路径</span><br>    prompt=<span class="hljs-string">&#x27;1girl,beautiful background,beautiful face,beazutiful clothes&#x27;</span><span class="hljs-comment"># prompt</span><br>    a_prompt=<span class="hljs-string">&#x27;best quality, extremely detailed&#x27;</span> <span class="hljs-comment"># 额外的prompt，例如best quality, extremely detailed这样的</span><br>    n_prompt=<span class="hljs-string">&#x27;longbody, lowres, bad anatomy, bad hands, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality&#x27;</span> <span class="hljs-comment"># negative prompt反向promote</span><br>    num_samples=<span class="hljs-number">1</span><span class="hljs-comment"># 生成几张图</span><br>    image_resolution=<span class="hljs-number">512</span><span class="hljs-comment"># 图片分辨率</span><br>    ddim_steps=<span class="hljs-number">30</span><span class="hljs-comment"># DDIP采样次数</span><br>    guess_mode=<span class="hljs-literal">False</span><br>    strength=<span class="hljs-number">1.0</span><br>    scale=<span class="hljs-number">9.0</span><br>    seed=-<span class="hljs-number">1</span><br>    eta=<span class="hljs-number">0.0</span><br>    low_threshold=<span class="hljs-number">100</span><br>    high_threshold=<span class="hljs-number">200</span><br><br>    out=process(img, prompt, a_prompt, n_prompt, num_samples, image_resolution, ddim_steps, guess_mode, strength, scale, seed, eta, low_threshold, high_threshold)<br><br>    cv2.imwrite(<span class="hljs-string">&#x27;out.png&#x27;</span>,out[<span class="hljs-number">1</span>])<span class="hljs-comment"># 保存生成的图像</span><br>    cv2.imwrite(<span class="hljs-string">&#x27;canny.png&#x27;</span>,out[<span class="hljs-number">0</span>])<span class="hljs-comment"># 保存canny图</span><br></code></pre></td></tr></table></figure></p><h2 id="clip_interrogator">clip_interrogator</h2><p>先下载 clip_interrogator <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install clip-interrogator==0.5.4<br></code></pre></td></tr></table></figure></p><p>接下来调用 clip_interrogator <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> clip_interrogator <span class="hljs-keyword">import</span> Config, Interrogator<br><span class="hljs-keyword">import</span> cv2 <span class="hljs-keyword">as</span> cv<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>img=cv.imread(<span class="hljs-string">&#x27;/content/src/test.png&#x27;</span>)<br>img = cv.cvtColor(img,cv.COLOR_BGR2RGB)<br>img = Image.fromarray(img)<br><br>ci = Interrogator(Config(clip_model_name=<span class="hljs-string">&quot;ViT-L-14/openai&quot;</span>))<br><br>describe=ci.interrogate(img)<br><span class="hljs-built_in">print</span>(describe)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
    <tags>
      
      <tag>图像生成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文字生成图片综述</title>
    <link href="/2023/04/20/%E6%96%87%E5%AD%97%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87%E7%BB%BC%E8%BF%B0/"/>
    <url>/2023/04/20/%E6%96%87%E5%AD%97%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87%E7%BB%BC%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 style="text-align: center">文字生成图片综述</h1><h2 id="背景">背景</h2><p>根据文字生成图像，是近几年大模型领域和多模态比较热门的研究。以NovelAI，waifu等为代表的二次元模型极大地拓展了 stable diffusion <sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="Rombach, R., Blattmann, A., Lorenz, D., Esser, P., &amp; Ommer, B. (2022). High-Resolution Image Synthesis with Latent Diffusion Models. 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). Presented at the 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), New Orleans, LA, USA. https://doi.org/10.1109/cvpr52688.2022.01042">[5]</span></a></sup><sup id="fnref:24" class="footnote-ref"><a href="#fn:24" rel="footnote"><span class="hint--top hint--rounded" aria-label="Heathen. github.com/automatic1111/stable-diffusion-webui/discussions/2670, hypernetwork style training, a tiny guide, 2022.">[24]</span></a></sup>模型和生态的想象空间。例如原本做AIGC生成小说的NovelAI推出了自己的二次元图像生成模型，基于 SD 算法框架和 Danbooru 二次元图库数据集进行训练和优化。像 NovelAI 这类的二次元模型对于用户输入的描述词的专业程度要求较高，也由社区自发整理了大量的魔典(prompt).精确控制图像的生成也是AI绘画的一个发展方向，各种可以控制人物动作，位置的方法<sup id="fnref:10" class="footnote-ref"><a href="#fn:10" rel="footnote"><span class="hint--top hint--rounded" aria-label="Kawar, B., Zada, S., Lang, O., Tov, O., Chang, H., Dekel, T., … Irani, M. (2022). Imagic: Text-Based Real Image Editing with Diffusion Models.">[10]</span></a></sup><sup id="fnref:13" class="footnote-ref"><a href="#fn:13" rel="footnote"><span class="hint--top hint--rounded" aria-label="Zhang, L., &amp; Agrawala, M. (n.d.). Adding Conditional Control to Text-to-Image Diffusion Models.">[13]</span></a></sup><sup id="fnref:19" class="footnote-ref"><a href="#fn:19" rel="footnote"><span class="hint--top hint--rounded" aria-label="Mokady, R., Hertz, A., Aberman, K., Pritch, Y., &amp; Cohen-Or, D. (2022). Null-text Inversion for Editing Real Images using Guided Diffusion Models.">[19]</span></a></sup>被提出.最近openai也开源了他们最新的研究Consistency Models<sup id="fnref:20" class="footnote-ref"><a href="#fn:20" rel="footnote"><span class="hint--top hint--rounded" aria-label="Song, Y., Dhariwal, P., Chen, M., &amp; Sutskever, I. (n.d.). Consistency Models.">[20]</span></a></sup> ,可以1s内生成多张图片。此外，stable diffusion也被用在了3d模型的生成方面，例如 dreamfusion<sup id="fnref:25" class="footnote-ref"><a href="#fn:25" rel="footnote"><span class="hint--top hint--rounded" aria-label="Poole, B., Jain, A., Barron, J., Mildenhall, B., Research, G., &amp; Berkeley, U. (n.d.). DREAMFUSION: TEXT-TO-3D USING 2D DIFFUSION.">[25]</span></a></sup>,Point-E<sup id="fnref:26" class="footnote-ref"><a href="#fn:26" rel="footnote"><span class="hint--top hint--rounded" aria-label="Nichol, A., Jun, H., Dhariwal, P., Mishkin, P., &amp; Chen, M. (2022). Point-E: A System for Generating 3D Point Clouds from Complex Prompts.">[26]</span></a></sup> 等。</p><h2 id="图像生成">图像生成</h2><h3 id="hypernetwork">hypernetwork</h3><p>hypernetwork是一种神经网络的处理方法<sup id="fnref:21" class="footnote-ref"><a href="#fn:21" rel="footnote"><span class="hint--top hint--rounded" aria-label="Abbas, M., Kivinen, J., &amp; Raiko, T. (2016). International Conference on Learning Representations (ICLR).">[21]</span></a></sup> 主要方法是通过一个神经网络影响另一个神经网络的参数，其中最具有代表性的就是GAN<sup id="fnref:22" class="footnote-ref"><a href="#fn:22" rel="footnote"><span class="hint--top hint--rounded" aria-label="Alaluf, Y., Tov, O., Mokady, R., Gal, R., &amp; Bermano, A. (2021). HyperStyle: StyleGAN Inversion with HyperNetworks for Real Image Editing.">[22]</span></a></sup><sup id="fnref:23" class="footnote-ref"><a href="#fn:23" rel="footnote"><span class="hint--top hint--rounded" aria-label="Dinh, TanM., Tran, A., Nguyen, R., &amp; Hua, B.-S. (n.d.). HyperInverter: Improving StyleGAN Inversion via Hypernetwork.">[23]</span></a></sup> 了.</p><h3 id="扩散模型">扩散模型</h3><p>扩散模型第一次在<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Sohl-Dickstein, J., Weiss, EricL., Maheswaranathan, N., &amp; Ganguli, S. (2015). Deep Unsupervised Learning using Nonequilibrium Thermodynamics.">[1]</span></a></sup> 中被提出,被称为Diffusion Probabilistic Model,之后提出的DDPM<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Ho, JonathanC., Jain, A., &amp; Abbeel, P. (2020). Denoising Diffusion Probabilistic Models.">[2]</span></a></sup>中被改进。之后DDPM也衍生出了诸多版本。发布在CVPR2022的LDM<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="Rombach, R., Blattmann, A., Lorenz, D., Esser, P., &amp; Ommer, B. (2022). High-Resolution Image Synthesis with Latent Diffusion Models. 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). Presented at the 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), New Orleans, LA, USA. https://doi.org/10.1109/cvpr52688.2022.01042">[5]</span></a></sup>将图片放到隐空间上实现了图片高质量合成并提出了内容引导机制，可以通过prompt让图片生成特定内容。一年后LDM衍生除了stable diffusion<sup id="fnref:24" class="footnote-ref"><a href="#fn:24" rel="footnote"><span class="hint--top hint--rounded" aria-label="Heathen. github.com/automatic1111/stable-diffusion-webui/discussions/2670, hypernetwork style training, a tiny guide, 2022.">[24]</span></a></sup><sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="Rombach, R., Blattmann, A., Lorenz, D., Esser, P., &amp; Ommer, B. (2022). High-Resolution Image Synthesis with Latent Diffusion Models. 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). Presented at the 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), New Orleans, LA, USA. https://doi.org/10.1109/cvpr52688.2022.01042">[5]</span></a></sup>，掀起了ai画图的热潮。</p><h3 id="ddpm">DDPM</h3><p>DDPM分为前向过程和反向过程。DDPM假定整个过程都是一个参数化的马尔科夫链，在前向过程中对数据逐步增加高斯噪声直到数据变成一个高斯噪声，反向过程中使用U-Net<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="Ronneberger, O., Fischer, P., &amp; Brox, T. (2015). U-Net: Convolutional Networks for Biomedical Image Segmentation. In Lecture Notes in Computer Science,Medical Image Computing and Computer-Assisted Intervention – MICCAI 2015 (pp. 234–241). https://doi.org/10.1007/978-3-319-24574-4_28">[4]</span></a></sup> 预测反向添加的噪声进行去噪。</p><p>从 <span class="math inline">\(\mathbf{X}_{T}\to\mathbf{X}_{o}\)</span> 是扩散模型的逆过程，这是在生成数据的时候是从一个随机的高斯分布采样一个信号，逐步通过去噪声恢复目标信号， <span class="math inline">\(q(\mathbf{x}_{t-1}|\mathbf{x}_{t})\)</span> 这个过程的解析式是未知的。前向过程是从 <span class="math inline">\(\mathbf{X}_{0}\rightarrow\mathbf{X}_{T}\)</span> ，对一个真实信号逐步加噪声，通过选取合适的噪声尺度，理论上在一定步数以后真实信号也会变成高斯信号，可以把这个过程表示为 <span class="math inline">\(q(\mathbf{x}_{t}|\mathbf{x}_{t-1})\)</span> 。</p><p>利用重参数化技术，我们可以得到从0到t的直接采样可以得到<span class="math inline">\(q(\mathbf{x}_t|\mathbf{x}_0)=\mathcal{N}(\mathbf{x}_t;\sqrt{\bar{\alpha}}\mathbf{x}_0,(1-\bar{\alpha})\mathbf{I})\)</span> ,其中 <span class="math inline">\(\alpha_{t}=1-\beta_{t},\bar{\alpha}t=\prod i=1^{t}\alpha_{i}\,\beta_{t}\)</span> 表示前向过程每一步的方差。这样在训练的时候我们就可以随机采样一个时刻，然后计算处这个时刻的 <span class="math inline">\(\mathbf{X}_t\)</span>。<span class="math display">\[\mathbf{x}_t(\mathbf{x}_0,\epsilon_t)=\sqrt{\bar{\alpha}_t}\mathbf{x}_0+\sqrt{1-\bar{\alpha}_t}\epsilon_t,\epsilon_t\sim\mathcal{N}(\mathbf{0},\mathbf{I})\]</span> <span class="math inline">\(q(\mathbf{x}_{t-1}|\mathbf{x}_t)\)</span> 是未知的，但是可以求出<span class="math inline">\(q(\mathbf{x}_{t-1}|\mathbf{x}_{t},\mathbf{x}_{0})\)</span> 的解析解<span class="math display">\[q(\mathbf{x}_{t-1}|\mathbf{x}_t,\mathbf{x}_0)=\mathcal{N}(\mathbf{x}_{t-1};\tilde{\mu}(\mathbf{x}_t,\mathbf{x}_0),\tilde{\beta}_t\mathbf{I})\]</span> <span class="math display">\[\tilde{\mu}_t\bigl(\mathbf{x}_t,\mathbf{x}_0\bigr)=\frac{\sqrt{\alpha_t}(1-\bar{\alpha}_{t-1})}{1-\bar{\alpha}_t}\mathbf{x}_t+\frac{\sqrt{\bar{\alpha}_{t-1}}\beta_t}{1-\bar{\alpha}_t}\mathbf{x}_0,\tilde{\beta}=\frac{1-\bar{\alpha}_{t-1}}{1-\bar{\alpha}_t}\beta_t\]</span> DDPM中推导出了基于噪声误差的损失函数，即通过网络估计噪声，而不是直接估计 <span class="math inline">\(\mathbf{X}_t\)</span> ,损失函数是<span class="math display">\[\begin{aligned}L_t^{\text{simple}}&amp;=\mathbb{E}_{t\sim[1,T],\mathbf{x}_0,\epsilon_t}\left[\|\boldsymbol{\epsilon}_t-\boldsymbol{\epsilon}_\theta(\mathbf{x}_t,t)\|^2\right]\\ &amp;=\mathbb{E}_{t\sim[1,T]\mathbf{x}_0,\epsilon_t}\left[\|\boldsymbol{\epsilon}_t-\boldsymbol{\epsilon}_\theta(\sqrt{\boldsymbol{\alpha}_t}\mathbf{x}_0+\sqrt{1-\overline{\alpha}_t}\boldsymbol{\epsilon}_t,t)\|^2\right]\end{aligned}\]</span></p><figure><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230419191252.png" alt="" /><figcaption>image.png</figcaption></figure><p>DDPM也有几个改进版本，例如DDIM<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Song, J., Meng, C., &amp; Ermon, S. (2020). Denoising Diffusion Implicit Models.">[3]</span></a></sup> . DDIM采用更小的采样步数来加速生成过程。</p><h3 id="ldm">LDM</h3><p>为了降低训练模型时所需要的训练资源，使用latent space的LDM<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="Rombach, R., Blattmann, A., Lorenz, D., Esser, P., &amp; Ommer, B. (2022). High-Resolution Image Synthesis with Latent Diffusion Models. 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). Presented at the 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), New Orleans, LA, USA. https://doi.org/10.1109/cvpr52688.2022.01042">[5]</span></a></sup>被提出.尽管允许通过对相应损失项的低采样忽略感知上无关的细节，但这一步仍然需要在像素空间中进行昂贵的函数计算，这导致了巨大的计算时间和能源需求。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230420095529.png" alt="image.png" /></p><p>横轴是隐变量每个维度压缩的bit率，纵坐标是模型的损失。模型在学习的过程中，随着压缩率变大，刚开始模型的损失下降很快，后面下降很慢，但仍然在优化。模型首先学习到的是semantic部分的压缩/转换（大框架），这一阶段是人物semantic部分转变，然后学习到的是细节部分的压缩/转换，这是perceptual细节处的转变。</p><p>LDM将图像从变换到latent space上，采用了encoder-decoder的机制，图像生成又回到了以前的架构上,并引入了自注意力机制，将扩散模型转换为更有效的图像生成器。给定图像<span class="math inline">\(x\in\mathbb{R}^{H\times W\times3}\)</span> ,编码器<span class="math inline">\(\mathcal{E}\)</span> 会将图片编码到<span class="math inline">\(z=\mathcal{E}(x)\)</span> ,解码器<span class="math inline">\(\mathcal{D}\)</span> 会从latent space中重建图像。给定<span class="math inline">\(\quad\tilde{x}=\mathcal{D}(z)=\mathcal{D}(\mathcal{E}(x))\)</span> ,<span class="math inline">\(z\in\mathbb{R}^{h\times w\times c}\)</span> 。更重要的是下采样倍数<span class="math inline">\({f}={H/h}=W/w\)</span> ,作者采用的是<span class="math inline">\(f=2^m,m \in N\)</span> <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230419191342.png" alt="image.png" /></p><p>Conditioning Mechanisms,这里的条件可以是文字、图像等。将不同模态不同大小的条件转换为一个中间表达空间。通过这种方法可以实现prompt指导图象生成。</p><h3 id="consistency-models">Consistency Models</h3><p>Consistency Models<sup id="fnref:20" class="footnote-ref"><a href="#fn:20" rel="footnote"><span class="hint--top hint--rounded" aria-label="Song, Y., Dhariwal, P., Chen, M., &amp; Sutskever, I. (n.d.). Consistency Models.">[20]</span></a></sup> 是openai提出的最新的一种图片生成方法</p><p>diffusion<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Ho, JonathanC., Jain, A., &amp; Abbeel, P. (2020). Denoising Diffusion Probabilistic Models.">[2]</span></a></sup> 的采样过程，从先验分布<span class="math inline">\(\left(x_{t_N},t_N\right)\)</span> 出发，推导采样过程<span class="math inline">\(\left(x_{t_N},t_N\right)\to\left(x_{t_{N-1}},t_{N-1}\right)\to...\to\left(x_{t_0},t_0\right)\)</span> .</p><p>Consistency Models 假设存在一个函数<span class="math inline">\(f\)</span>，对于上述过程中的每个点，<span class="math inline">\(f\)</span>都能输出一个相同的值,即<span class="math display">\[\begin{aligned}\boldsymbol{f}(\mathbf{x}_t,t)=\boldsymbol{f}(\mathbf{x}_{t&#39;},t&#39;)\text{for all}t,t&#39;\in[\epsilon,T]\end{aligned}\]</span> 对于轨迹起点<span class="math inline">\(x_0=\epsilon\)</span> ,有<span class="math inline">\(\boldsymbol{f}(\mathbf{x}_{\boldsymbol{\epsilon}},\epsilon)=\mathbf{x}_{\boldsymbol{\epsilon}}\)</span> .那么对于轨迹中任意一点，我们代入先验分布, 即可得到 <span class="math inline">\(f(x_{T},T)=x_{\epsilon}\)</span>  。这样也就完成了一步采样。</p><h2 id="文字生成图片">文字生成图片</h2><p>文字生成图片一个重要的前提条件是建立文字和图片的联系。CLIP首先通过对比学习的方式实现了文字图片联系。FLIP和A-CLIP对CLIP进行了改进。DALLE，GLIDE，DALLE2是OPENAI发布的文生图模型，GLIDE实现了无分类器引导的图片生成，DALLE2引入CLIP进行图片生成。Imagen主要使用文字内容进行训练，图片则先生成小图再超分放大。</p><h3 id="clip">CLIP</h3><p>OPENAI提出的CLIP<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Radford, A., Kim, J., Hallacy, C., Ramesh, A., Goh, G., Agarwal, S., … Sutskever, I. (2021). Learning Transferable Visual Models From Natural Language Supervision.">[6]</span></a></sup>通过对比学习的方式建立了文字和图片的联系.在训练过程文字和图像分别经过一个文字编码器和图像编码器得到一个对应的向量，将对应的文字向量和图像向量作为正样本，不对应的向量作为负样本进行对比学习。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230419190351.png" alt="image.png" /> 考虑到大部分的数据集的标签都是以单词的形式存在的，比如“bird”，“cat”等等，然而在预训练阶段的文本描述大多都是某个短句，为了填补这种数据分布上的差别，作者考虑用“指示上下文”（guide context）对标签进行扩展。可以用<code>a photo of a &#123;object&#125;</code>作为文本端的输入。推理过程先给定一个提示<code>A photo of a &#123;object&#125;</code> ,这里的object可以填入任意的内容，然后通过一个文字编码器得到与输入内容分别对应的一组向量。同时图片经过一个图像编码器得到一个向量，将图片得到的向量分别和填入内容得到的向量计算余弦相似度，相似度最大的则是目标的描述。</p><h3 id="clip改进">CLIP改进</h3><p>何凯明团队提出的FLIP<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="Li, Y., Fan, H., Hu, R., Feichtenhofer, C., &amp; He, K. (2022). Scaling Language-Image Pre-training via Masking.">[7]</span></a></sup>通过对图片加入mask有效提升了CLIP的推理速度，同期的A-CLIP<sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="Yang, Y., Huang, W., Wei, Y., Peng, H., Jiang, X., Jiang, H., … Research, M. (n.d.). Attentive Mask CLIP.">[8]</span></a></sup>通过加入注意力机制保留了图像中具有语义信息的部分，避免随意加入mask对模型的训练造成影响。如图左侧是A-CLIP的过程，右侧是FLIP的结果。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230419190233.png" alt="image.png" /></p><p>GLIDE<sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><span class="hint--top hint--rounded" aria-label="Nichol, A., Dhariwal, P., Ramesh, A., Shyam, P., Mishkin, P., McGrew, B., … Chen, M. (n.d.). GLIDE: Towards Photorealistic Image Generation and Editing with Text-Guided Diffusion Models.">[9]</span></a></sup>采用无分类器指导的扩散模型实现了图片生成。GLIDE， Guided Language to Image Diffusion for Generation and Editing，是 OpenAI 推出的文本引导图像生成模型，，但受到的关注相对较少。它甚至在 OpenAI 网站上也没有专门的帖子。GLIDE 生成分辨率为 256×256 像素的图像。实际上在论文中DALLE2被称为unCLIP。参数量上5B的GLIDE的FID得分超过了12B的DALLE</p><h3 id="dlall-e2">DLALL-E2</h3><p>DALL·E2<sup id="fnref:11" class="footnote-ref"><a href="#fn:11" rel="footnote"><span class="hint--top hint--rounded" aria-label="Ramesh, A., Dhariwal, P., Nichol, A., Chu, C., &amp; Chen, M. (n.d.). Hierarchical Text-Conditional Image Generation with CLIP Latents.">[11]</span></a></sup>的架构加入了CLIP<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Radford, A., Kim, J., Hallacy, C., Ramesh, A., Goh, G., Agarwal, S., … Sutskever, I. (2021). Learning Transferable Visual Models From Natural Language Supervision.">[6]</span></a></sup>，通过锁住CLIP的文本编码器和图像编码器可以建立文字和图像的联系，加入prior和img decoder两个先验， 训练prior，使文本编码可以转换为图像编码，并训练decoder生成最终图像。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230419192846.png" alt="image.png" /></p><h3 id="imagen">Imagen</h3><p>谷歌的 Imagen<sup id="fnref:12" class="footnote-ref"><a href="#fn:12" rel="footnote"><span class="hint--top hint--rounded" aria-label="Saharia, C., Chan, W., Saxena, S., Li, L., Whang, J., Denton, E., … Norouzi, M. (n.d.). Photorealistic Text-to-Image Diffusion Models with Deep Language Understanding.">[12]</span></a></sup>的语言模型替换成了谷歌自家的T5-XXL，图像生成部分则是先生成小图像再上采样生成大图像，这是因为纯文本训练数据要比高质量图文对数据容易获取的多.</p><h2 id="图像编辑">图像编辑</h2><p>图像编辑也是文字生成图片的重要应用。Imagic输入一个文本图像和目标文本，通过多阶段的方法对齐文本和图像编辑图像。ControlNet通过复制参数为锁住的和可训练的，使模型可以为特定任务进行微调。同时ControlNet可以传入openpose人的位姿图，canny边缘图，深度图，Hough变换生成的图等各种图片可控得生成图片。Google的DreamBooth提出了一种使用少量图片进行微调的方式，提供一种用户训练自己模型的方法。prompt2prompt通过更改图片对应的map的方式特定更改图片。</p><h3 id="imagic">Imagic</h3><p>Imagic<sup id="fnref:10" class="footnote-ref"><a href="#fn:10" rel="footnote"><span class="hint--top hint--rounded" aria-label="Kawar, B., Zada, S., Lang, O., Tov, O., Chang, H., Dekel, T., … Irani, M. (2022). Imagic: Text-Based Real Image Editing with Diffusion Models.">[10]</span></a></sup>提出的方法只需要一个输入图像和一个目标文本(所需的编辑)。它生成一个与输入图像和目标文本一致的文本嵌入，同时微调扩散模型以捕获特定于图像的外观。Imagic通过多阶段的方法实现了图片编辑，分为优化文本嵌入，微调扩散模型。在优化的嵌入和目标文本嵌入之间进行线性插值三个过程。首先优化文本嵌入，使其生成与输入图像相似的图像。然后，对预训练的生成扩散模型(以优化的嵌入为条件)进行微调，以更好地重建输入图像。最后，在目标文本嵌入和优化后的文本之间进行线性插值，得到一个结合了输入图像和目标文本的表示。然后将这种表示传递给带有微调模型的生成扩散过程，输出最终编辑的图像。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230312151044.png" alt="image.png" /></p><h3 id="controlnet">ControlNet</h3><p>ControlNet<sup id="fnref:13" class="footnote-ref"><a href="#fn:13" rel="footnote"><span class="hint--top hint--rounded" aria-label="Zhang, L., &amp; Agrawala, M. (n.d.). Adding Conditional Control to Text-to-Image Diffusion Models.">[13]</span></a></sup>通过对参数复制，将参数分为锁住的和可训练的。锁着的参数从大量的图片文本对中学习更通用的信息，可学习的参数在特定的任务上进行微调,让模型在个人电脑和大型计算集群上都可以获得很好的训练效果。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230419193542.png" alt="image.png" /> 以2D图像为例，给定一张图像(特征图)<span class="math inline">\(\boldsymbol{x}\in\mathbb{R}^{h\times w\times c}\)</span> ,<span class="math inline">\(h,w,c\)</span> 分别代表高度，宽度，深度。一个将x转换为y的神经网络我们可以以将他记作<span class="math inline">\(\mathcal{F(\cdot;\Theta)}\)</span> 我们把zero convolution(就是1 <span class="math inline">\(*\)</span> 1卷积)记作<span class="math inline">\(\mathcal{Z}(\cdot;\cdot)\)</span> ,那么ControlNet就可以记作<span class="math display">\[\begin{matrix}\boldsymbol{y_c}=\mathcal{F}(\boldsymbol{x};\Theta)+\mathcal{Z}(\boldsymbol{F}(\boldsymbol{x}+\mathcal{Z}(\boldsymbol{c};\Theta_{\text{z1}});\Theta_{\text{z2}})\end{matrix}\]</span> 由于zero convolution的权重初始为0，那么就有<span class="math display">\[\begin{cases}\mathcal{Z}(c;\Theta_{\text{z1}})=\mathbf{0}\\ \mathcal{F}(\boldsymbol{x}+\mathcal{Z}(\boldsymbol{c};\Theta_{\text{z1}});\Theta_{\text{c}})=\mathcal{F}(\boldsymbol{x};\Theta_{\text{c}})=\mathcal{F}(\boldsymbol{x};\Theta_{\text{c}})\\ \mathcal{Z}(\mathcal{F}(\boldsymbol{x}+\mathcal{Z}(\boldsymbol{c};\Theta_{\text{z1}});\Theta_{\text{c}});\Theta_{\text{z2}})=\mathcal{Z}(\mathcal{F}(\boldsymbol{x};\Theta_{\text{c}});\Theta_{\text{z2}})=\mathbf{0}\end{cases}\]</span> 可以得出<span class="math inline">\(y_c=y\)</span>,即当ControlNet被应用到任何一个网络上时，不会对这个网络的效果产生任何影响。它完美保留了任何神经网络块的能力、功能和结果质量，任何进一步优化都将随着微调而变得很快。</p><p>在训练过程中，作者随机的将50%的prompt换成了空的prompt，作者认为这可以增强模型从文本内容识别语义信息的能力。这主要是因为当 stable diffusion 模型看不到提示时，decoder倾向于从输入控制图中学习更多的语义作为提示的替代品。</p><p>ControlNet还给出了在个人电脑和大型计算集群上进行训练的方式。当计算设备有限时，作者发现部分打破ControlNet与stable diffusion之间的联系可以加速收敛。默认情况下是将ControlNet连接到“SD Middle Block”和“SD Decoder Block 1,2,3,4”(stable diffuion的模块)。作者发现，只连接Middle Block而不连接Decoder Block 1,2,3,4可以将训练速度提高1.6倍(在RTX 3070TI笔记本电脑GPU上测试)。当模型在结果和条件之间表现出合理的关联时，这些断开连接的链接可以在持续训练中再次连接，以促进精确控制。</p><p>openai在论文还比较了在不同的数据集上不同的编码器的效果</p><figure><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230420145907.png" alt="" /><figcaption>image.png</figcaption></figure><p>MutilDiffusion<sup id="fnref:14" class="footnote-ref"><a href="#fn:14" rel="footnote"><span class="hint--top hint--rounded" aria-label="Bar-Tal, O., Yariv, L., Lipman, Y., &amp; Dekel, T. (2023). MultiDiffusion: Fusing Diffusion Paths for Controlled Image Generation.">[14]</span></a></sup> 将图片分为几个部分分别进行diffusion，然后将他们拼在一起通过一个全局去噪网络可以更好的控制生成图片中物体的位置。</p><h3 id="dreambooth">DreamBooth</h3><p>DreamBooth 是Google提出的一个通过少量图片微调diffusion model 的方法。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230419195507.png" alt="image.png" /> 要训练自己数据最直观的方法，就是把自己的图片加入模型迭代时一起训练。但会带来两个问题，一个是过拟合，另一个是语义漂移(language drift)。总的来说DreamBooth的贡献在两方面，一方面是给定主题可以生成特定的主题的图片，一方面给定少数镜头微调diffusion model的方法同时保留输入图片的语义信息。 而Dreambooth的优势就在于能避免上述的两个问题。主要方法就是使用一个具有特殊含义而且比较少见的词，训练的图片最好有不同角度和光线下的图片。下图是DreamBooth论文给出的不同模型效果的对比图 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230419195421.png" alt="image.png" /></p><h4 id="cascade-ef-gan">Cascade EF-GAN</h4><p>Cascade EF-GAN<sup id="fnref:28" class="footnote-ref"><a href="#fn:28" rel="footnote"><span class="hint--top hint--rounded" aria-label="Wu, R., Zhang, G., Lu, S., &amp; Chen, T. (2020, March 12). _Cascade EF-GAN: Progressive facial expression editing with local focuses_. arXiv.Org. https://arxiv.org/abs/2003.05905">[28]</span></a></sup> 是一种级联式的人脸编辑方式，可以更好地保留与身份相关的特征和细节，特别是在眼睛、鼻子和嘴巴周围，进一步帮助减少生成的面部图像中的伪影和模糊。</p><p>作者设计了一种级联式网络，同原本对一张人脸做更改变成了对一张人脸和脸上几个部分同时做更改。因为对一个人类来说分辨一个人的方式就是看人的眼睛，鼻子和嘴巴。Cascade EF-GAN能够识别面部表情编辑中局部重点的重要性，并通过几个局部重点捕捉身份相关特征，有效地减轻编辑产生的伪影和模糊。</p><figure><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230312143755.png" alt="" /><figcaption>image.png</figcaption></figure><p>Cascade EF-GAN中的生成模型由一个Expression Transformer和一个Refiner组成。Expression Transformer执行带有局部焦点的表情编辑，Refiner融合表情转换器的输出并细化最终编辑。</p><p>Expression Transformer通过在全局和局部分支中处理面部图像来解决这个问题，其中全局分支捕获全局面部结构，局部分支专注于更详细的面部特征。Transformer将面部图像和目标表情标签作为输入。<strong>所有分支共享相似的网络架构，但不共享权重</strong></p><p>此外注意力被引入到全局和局部分支，以更好地捕捉细节和抑制伪影。在GANimation [32]中，使用视觉注意力来引导网络集中于转换与表情相关的区域。然而，在单个全局图像中应用注意力往往会引入模糊的注意力响应，如图3的第4列所示。这是因为全局注意力倾向于关注最显著的变化，例如图3中的嘴部区域，而眼睛和鼻子周围的细微变化则没有受到足够的关注。前面提到的局部分支中的独占式注意力有助于在局部区域实现更锐利的响应，如图3的第3列所示。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230312144711.png" alt="image.png" /></p><p>每个分支输出颜色特征图M_C和注意图M_A。对于原始输入图像I_in，每个分支的初始输出通过以下方式生成 <span class="math display">\[\mathcal{I}_{init}=M_A\otimes M_C+(1-M_A)\otimes I_{in}\]</span></p><p>Refiner负责融合表情转换器不同分支的输出，生成最终的表情编辑。如图2所示，三个局部分支的输出首先根据它们在面部图像中的各自位置缝合成单个图像。缝合的图像然后与全局分支的输出连接，并馈送到细化器以生成最终的表情编辑。</p><h4 id="prompt2prompt">prompt2prompt</h4><p>prompt2prompt<sup id="fnref:19" class="footnote-ref"><a href="#fn:19" rel="footnote"><span class="hint--top hint--rounded" aria-label="Mokady, R., Hertz, A., Aberman, K., Pritch, Y., &amp; Cohen-Or, D. (2022). Null-text Inversion for Editing Real Images using Guided Diffusion Models.">[19]</span></a></sup> 是Google提出的一种基于Imagen的图像编辑方法，相比于直接text2image生成，文本引导图片生成要求原来图像绝大部分区变化不大，先前的方法需要用户指定mask来引导生成。prompt2prompt的主要方法是将交叉注意力机制引入diffusion中，得到每个token对应的attention map，一种有三种操作的方式 1. token换词，那么直接替换attention map即可。 2. 加词，则是直接在对应位置加入新的attention map。 3. token增强——直接提高对应的map的权重。</p><p>但这种方法也有一些局限，例如需要用户给一个合理的prompt，细节的生成不太好，不能对图中的物体进行移位操作。</p><h4 id="instructpix2pix">InstructPix2Pix</h4><p>InstructPix2Pix<sup id="fnref:27" class="footnote-ref"><a href="#fn:27" rel="footnote"><span class="hint--top hint--rounded" aria-label="Brooks, T., Holynski, A., &amp; Efros, AlexeiA. (2022). InstructPix2Pix: Learning to Follow Image Editing Instructions.">[27]</span></a></sup> 是一种无需微调就可以快速编辑图像的方法，结合了两个大型预训练模型的知识——语言模型和文本到图像模型——生成了大量的图像编辑示例数据集。通过在这些数据上进行训练，并在推理时能够适用于真实图像和用户编写的指令。但也有一些局限例如数据带来的偏差，能会对图像进行不必要的过度更改。</p><h2 id="prompt">prompt</h2><p>prompt提示可以给文字生成图片提供语义信息。</p><h4 id="clip-1">CLIP</h4><p>CLIP<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Radford, A., Kim, J., Hallacy, C., Ramesh, A., Goh, G., Agarwal, S., … Sutskever, I. (2021). Learning Transferable Visual Models From Natural Language Supervision.">[6]</span></a></sup> 使用了<code>A photo of a &#123;object&#125;</code>作为prompt，<code>object</code> 是推理过程中的选择项，作者也讨论了大量的prompt相关的问题。一个常见的问题是一词多义。当一个类的名称是提供给CLIP文本编码器的唯一信息时，由于缺乏上下文，它无法区分哪个词的含义。在某些情况下，同一个单词的多个含义可能作为不同的类包含在同一个数据集中。另一个问题是，在我们的预训练数据集中，与图像配对的文本只是一个单词的情况相对较少。通常文本是一个完整的句子，以某种方式描述图像。通过使用<code>A photo of a &#123;object&#125;</code> 就可以使ImageNet的准确率提高1.3%。作者还发现在不同的数据集上使用不同的prompt可以取得不同的结果。</p><h4 id="controlnet-1">ControlNet</h4><p>在 ControlNet<sup id="fnref:13" class="footnote-ref"><a href="#fn:13" rel="footnote"><span class="hint--top hint--rounded" aria-label="Zhang, L., &amp; Agrawala, M. (n.d.). Adding Conditional Control to Text-to-Image Diffusion Models.">[13]</span></a></sup> 模型采取了<em>三种</em> prompt 1. No prompt：也就是"" 2. Default prompt:由于stable diffusion本质上是使用prompt进行训练的，因此空字符串可能是模型的意外输入，如果没有提供提示，SD 往往会生成随机纹理图。更好的设置是使用无意义的提示，"an image", "a nice image", "a professional image",etc。在作者的设置中，使用"a professional, detailed, high-quality image"作为default prompt。 3. Automatic prompt:为了测试fully automatic pipeline的SOTA，作者还尝试使用fully automatic pipeline（例如，BLIP）使用“default prompt”模式获得的结果生成prompts。作者会使用生成的提示再次扩散。 4. User prompt：用户自定义的输入</p><h4 id="prompt2prompt-1">prompt2prompt</h4><p>prompt2prompt<sup id="fnref:19" class="footnote-ref"><a href="#fn:19" rel="footnote"><span class="hint--top hint--rounded" aria-label="Mokady, R., Hertz, A., Aberman, K., Pritch, Y., &amp; Cohen-Or, D. (2022). Null-text Inversion for Editing Real Images using Guided Diffusion Models.">[19]</span></a></sup>的操作就是通过prompt进行的。</p><h3 id="clip-interrogator">CLIP-interrogator</h3><p>在背景图生成这个任务下有一个可能需要的步骤，从给出的人物图得到一些prompt生成图片，CLIP-interrogator 就是为了这样的任务而生的，开源的有CLIP-Interrogator<sup id="fnref:16" class="footnote-ref"><a href="#fn:16" rel="footnote"><span class="hint--top hint--rounded" aria-label="_CLIP interrogator_. (n.d.). A Hugging Face Space by Pharma. Retrieved April 19, 2023, from https://huggingface.co/spaces/pharma/CLIP-Interrogator">[16]</span></a></sup><sup id="fnref:18" class="footnote-ref"><a href="#fn:18" rel="footnote"><span class="hint--top hint--rounded" aria-label="pharmapsychotic. (n.d.). _GitHub - Pharmapsychotic/clip-interrogator: Image to prompt with BLIP and CLIP_. GitHub. Retrieved April 19, 2023, from https://github.com/pharmapsychotic/clip-interrogator">[18]</span></a></sup> 和CLIP-Interrogator2<sup id="fnref:17" class="footnote-ref"><a href="#fn:17" rel="footnote"><span class="hint--top hint--rounded" aria-label="_CLIP interrogator 2_. (n.d.). A Hugging Face Space by Fffiloni. Retrieved April 19, 2023, from https://huggingface.co/spaces/fffiloni/CLIP-Interrogator-2">[17]</span></a></sup> .模型主要通过CLIP对以后数据集进行匹配获取prompt、而通过BLIP获得图像最直观的理解。Code底层也是需要CLIP和BLIP作为核心完成后面的工作。</p><h2 id="数据集">数据集</h2><h3 id="wit">WIT</h3><p>openai 在CLIP<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Radford, A., Kim, J., Hallacy, C., Ramesh, A., Goh, G., Agarwal, S., … Sutskever, I. (2021). Learning Transferable Visual Models From Natural Language Supervision.">[6]</span></a></sup> 提到他们构建了一个新的数据集，从互联网上各种公开可用的资源中收集了4亿(图像，文本)对。为了尝试覆盖尽可能广泛的视觉内容，对每一类都有大概有2000对对整个数据集进行平衡。结果数据集的总字数与用于训练GPT-2的WebText数据集相似。这个数据集称为WebImageText的WIT。</p><p>作者团队从直接与摄影师一起工作的提供商那里获得了一组新的高分辨率的11M图像。即使在下采样之后，这些图像的分辨率也明显高于许多现有的视觉数据集。</p><h3 id="sa-1b">SA-1B</h3><p>segment anything<sup id="fnref:15" class="footnote-ref"><a href="#fn:15" rel="footnote"><span class="hint--top hint--rounded" aria-label="Kirillov, A., Mintun, E., Ravi, N., Mao, H., Rolland, C., Gustafson, L., … Girshick, R. (n.d.). Segment Anything.">[15]</span></a></sup> 是Meta最新提出的一个用于目标分割的方法，他们为了更好的训练模型制作了一个迄今为止最大的分割数据集，1100万张在10亿次授权且尊重隐私的图像上的数据集，同时开源了他们的数据集，此外还有一种Data engine 的方法来快速生成数据集。</p><p>Data engine 分为三个阶段：（1）模型辅助手动注释阶段，（2）混合自动预测掩码和模型辅助注释的半自动阶段，以及（3）全自动阶段，</p><h4 id="手动阶段">手动阶段</h4><p>在第一阶段，类似于经典的交互式分割，一组专业注释者通过使用由 SAM 驱动的基于浏览器的交互分割工具点击前景/背景对象点来标记掩码。可以使用像素精确的“刷”和“擦除”工具来细化掩码。模型辅助注释直接在浏览器内实时运行（使用预先计算的图像嵌入），从而实现真正的交互体验。标注不受语义约束，可以自由地标注"stuff" and "things"</p><p><strong>注释者被要求按突出顺序标记对象，一旦掩码需要超过 30 秒进行注释，便鼓励继续下一个图像。</strong></p><p>在SOTA之后，SAM就开始使用公共数据集进行训练，在经过了足够多的数据标注后，就用新标注的数据重新训练。随着收集更多的掩码，图像使用了ViT-H作为编码器。这样的模型训练一共进行了六次。随着模型的改进，每个掩码的平均注释时间从 34 秒减少到 14 秒。随着SAM的改进，每张图像的平均掩码数从20个掩码增加到44个掩码。总体而言，作者在这个阶段从 120k 张图像收集了 4.3M 掩码。</p><h4 id="半自动化阶段">半自动化阶段</h4><p>这个阶段的目标是增加mask的多样性。为了将标记集中在不太突出的对象上，首先自动检测confident masks。然后向注释者展示了用这些掩码预先填充的图像，并要求他们注释任何额外的未注释对象。为了检测confident masks，作者使用通用的“对象”类别在所有第一阶段掩码上训练了一个边界框检测器。在这个阶段，作者在 180k 图像中收集了一个额外的 5.9M 掩码（总共 10.2M 掩码）。在第一阶段，在新收集的数据（5 次）上定期重新训练模型。每个掩码的平均注释时间可以回到了到 34 秒（不包括自动掩码），因为这些对象对标签更具挑战性。每张图像的平均掩码数从 44 个掩码到 72 个掩码（包括自动掩码）。</p><h4 id="全自动化阶段">全自动化阶段</h4><p>这个阶段的主要目的是解决歧义</p><p>这个过程作者使用<span class="math inline">\(32*32\)</span>网格的点对图像进行预测，并为每个点预测一组可能对应于有效对象的掩码。如果说一个点位于一个部件或子部件上，我们的模型将返回子部分，部分和整个对象(subpart, part, and whole object)。利用模型中的IoU预测模块来选择confident mask,IOU阈值是0.7，那么这个掩码就被认为是是稳定的。为了进一步提高小mask的质量，还处理了多个重叠的放大mask。</p><h2 id="感想">感想</h2><p>(数据删除)</p><h2 id="参考文献">参考文献</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Sohl-Dickstein, J., Weiss, EricL., Maheswaranathan, N., &amp; Ganguli, S. (2015). Deep Unsupervised Learning using Nonequilibrium Thermodynamics. <a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>Ho, JonathanC., Jain, A., &amp; Abbeel, P. (2020). Denoising Diffusion Probabilistic Models. <a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>Song, J., Meng, C., &amp; Ermon, S. (2020). Denoising Diffusion Implicit Models. <a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>Ronneberger, O., Fischer, P., &amp; Brox, T. (2015). U-Net: Convolutional Networks for Biomedical Image Segmentation. In Lecture Notes in Computer Science,Medical Image Computing and Computer-Assisted Intervention – MICCAI 2015 (pp. 234–241). https://doi.org/10.1007/978-3-319-24574-4_28 <a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>Rombach, R., Blattmann, A., Lorenz, D., Esser, P., &amp; Ommer, B. (2022). High-Resolution Image Synthesis with Latent Diffusion Models. 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). Presented at the 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), New Orleans, LA, USA. https://doi.org/10.1109/cvpr52688.2022.01042 <a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>Radford, A., Kim, J., Hallacy, C., Ramesh, A., Goh, G., Agarwal, S., … Sutskever, I. (2021). Learning Transferable Visual Models From Natural Language Supervision. <a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:7" class="footnote-text"><span>Li, Y., Fan, H., Hu, R., Feichtenhofer, C., &amp; He, K. (2022). Scaling Language-Image Pre-training via Masking. <a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:8" class="footnote-text"><span>Yang, Y., Huang, W., Wei, Y., Peng, H., Jiang, X., Jiang, H., … Research, M. (n.d.). Attentive Mask CLIP. <a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:9" class="footnote-text"><span>Nichol, A., Dhariwal, P., Ramesh, A., Shyam, P., Mishkin, P., McGrew, B., … Chen, M. (n.d.). GLIDE: Towards Photorealistic Image Generation and Editing with Text-Guided Diffusion Models. <a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:10" class="footnote-text"><span>Kawar, B., Zada, S., Lang, O., Tov, O., Chang, H., Dekel, T., … Irani, M. (2022). Imagic: Text-Based Real Image Editing with Diffusion Models. <a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:11" class="footnote-text"><span>Ramesh, A., Dhariwal, P., Nichol, A., Chu, C., &amp; Chen, M. (n.d.). Hierarchical Text-Conditional Image Generation with CLIP Latents. <a href="#fnref:11" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:12" class="footnote-text"><span>Saharia, C., Chan, W., Saxena, S., Li, L., Whang, J., Denton, E., … Norouzi, M. (n.d.). Photorealistic Text-to-Image Diffusion Models with Deep Language Understanding. <a href="#fnref:12" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:13" class="footnote-text"><span>Zhang, L., &amp; Agrawala, M. (n.d.). Adding Conditional Control to Text-to-Image Diffusion Models. <a href="#fnref:13" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:14" class="footnote-text"><span>Bar-Tal, O., Yariv, L., Lipman, Y., &amp; Dekel, T. (2023). MultiDiffusion: Fusing Diffusion Paths for Controlled Image Generation. <a href="#fnref:14" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:15" class="footnote-text"><span>Kirillov, A., Mintun, E., Ravi, N., Mao, H., Rolland, C., Gustafson, L., … Girshick, R. (n.d.). Segment Anything. <a href="#fnref:15" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:16" class="footnote-text"><span><em>CLIP interrogator</em>. (n.d.). A Hugging Face Space by Pharma. Retrieved April 19, 2023, from https://huggingface.co/spaces/pharma/CLIP-Interrogator <a href="#fnref:16" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:17" class="footnote-text"><span><em>CLIP interrogator 2</em>. (n.d.). A Hugging Face Space by Fffiloni. Retrieved April 19, 2023, from https://huggingface.co/spaces/fffiloni/CLIP-Interrogator-2 <a href="#fnref:17" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:18" class="footnote-text"><span>pharmapsychotic. (n.d.). <em>GitHub - Pharmapsychotic/clip-interrogator: Image to prompt with BLIP and CLIP</em>. GitHub. Retrieved April 19, 2023, from https://github.com/pharmapsychotic/clip-interrogator <a href="#fnref:18" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:19" class="footnote-text"><span>Mokady, R., Hertz, A., Aberman, K., Pritch, Y., &amp; Cohen-Or, D. (2022). Null-text Inversion for Editing Real Images using Guided Diffusion Models. <a href="#fnref:19" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:20" class="footnote-text"><span>Song, Y., Dhariwal, P., Chen, M., &amp; Sutskever, I. (n.d.). Consistency Models. <a href="#fnref:20" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:21" class="footnote-text"><span>Abbas, M., Kivinen, J., &amp; Raiko, T. (2016). International Conference on Learning Representations (ICLR). <a href="#fnref:21" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:22" class="footnote-text"><span>Alaluf, Y., Tov, O., Mokady, R., Gal, R., &amp; Bermano, A. (2021). HyperStyle: StyleGAN Inversion with HyperNetworks for Real Image Editing. <a href="#fnref:22" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:23" class="footnote-text"><span>Dinh, TanM., Tran, A., Nguyen, R., &amp; Hua, B.-S. (n.d.). HyperInverter: Improving StyleGAN Inversion via Hypernetwork. <a href="#fnref:23" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:24" class="footnote-text"><span>Heathen. github.com/automatic1111/stable-diffusion-webui/discussions/2670, hypernetwork style training, a tiny guide, 2022. <a href="#fnref:24" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:25" class="footnote-text"><span>Poole, B., Jain, A., Barron, J., Mildenhall, B., Research, G., &amp; Berkeley, U. (n.d.). DREAMFUSION: TEXT-TO-3D USING 2D DIFFUSION. <a href="#fnref:25" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:26" class="footnote-text"><span>Nichol, A., Jun, H., Dhariwal, P., Mishkin, P., &amp; Chen, M. (2022). Point-E: A System for Generating 3D Point Clouds from Complex Prompts. <a href="#fnref:26" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:27" class="footnote-text"><span>Brooks, T., Holynski, A., &amp; Efros, AlexeiA. (2022). InstructPix2Pix: Learning to Follow Image Editing Instructions. <a href="#fnref:27" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:28" class="footnote-text"><span>Wu, R., Zhang, G., Lu, S., &amp; Chen, T. (2020, March 12). <em>Cascade EF-GAN: Progressive facial expression editing with local focuses</em>. arXiv.Org. https://arxiv.org/abs/2003.05905 <a href="#fnref:28" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图像生成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Segment Anything笔记</title>
    <link href="/2023/04/07/Segment%20Anything%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/04/07/Segment%20Anything%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="segment-anything笔记">Segment Anything笔记</h1><p>Segment Anything project是一个用于图像分割的新任务、模型和数据集。在他刚出来的那一天，知乎等平台就已经高呼CV已死。为了这个项目，作者创建了迄今为止最大的分割数据集，1100万张在10亿次授权且尊重隐私的图像上的数据集。模型也被设计和训练成了promptable,就是说可以给他一些提示。作者在多个数据集测试了他的结果并认为结果令人满意。</p><figure><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230407073917.png" alt="" /><figcaption>image.png</figcaption></figure><p>代码开源<a href="https://github.com/facebookresearch/segment-anything">GitHub</a></p><p>项目地址<a href="https://segment-anything.com/">https://segment-anything.com/</a></p><h2 id="引言">引言</h2><p>作者在引言中讨论了NLP工作中prompt的巨大作用，并回顾了视觉领域多模态的重要工作CLIP和ALIGN，最后说明了他们的目标和工作。</p><p>首先，在网络上经过预训练的大型语言模型凭借其强大的zero-shot和few-shot能力革新NLP，prompt的引入使得这些模型zero-shot和few-shot性能与微调模型出奇的好。经验趋势表明，这种行为随着模型规模、数据集大小和总训练计算的增加而改善。</p><p>CLIP和ALIGN使用对比学习来训练对齐两种模态的文本和图像编码器。经过训练后，prompt可以实现对新视觉概念和数据分布的zero-shot概括。这种编码器还与其他模块有效组合，以实现下游任务，如图像生成（例如，DALL·E）。虽然在视觉和语言编码器方面已经取得了很大进展，但计算机视觉包括了超出这一范围的广泛问题，而且对于其中许多问题，还不存在丰富的训练数据。</p><p>作者提到在这项工作中，他们的目标是建立一个图像分割的基础模型。也就是说，他们在寻求开发一个可提示的模型，并使用能够实现强大泛化的任务在广泛的数据集上对其进行预训练。有了这个模型，他们的目标是使用即时工程解决新数据分布上的一系列下游分割问题。</p><p>这个计划的成功取决于三个组成部分：任务、模型和数据。为了开发它们，作者解决了以下关于图像分割的问题： 1. 什么样的样本可以实现零样本泛化 2. 相应的模型架构是什么 3. 什么样的数据可以支撑这个人物和模型</p><p>这些问题错综复杂，作者首先定义了一个promptable的分割任务，这可以提供强大的预训练目标，并且有广泛的下游任务可以应用。这个任务需要一个支持灵活的prompt的模型并且可以输出分割结果。为了训练这个模型，作者需要一个多样性的，大型的数据集，因此作者构建了一个数据引擎，使用高效的模型进行迭代。作者介绍了每个组件然后是创建的数据集和有效性的实验。</p><h2 id="任务">任务</h2><p>作者从NLP领域获得灵感，在NLP的任务中，预测下一个token用于基础模型的训练，并通过prompt engineering 解决不同的下游任务。为了建立这样一个分割的基础模型，作者的目标书建立一个具有类似能力的任务 ### Task promptable的分割任务是给定任何prompt都能返回有效的分割掩码。有效的mask意味着即使prompt是不准确的或者涉及到多个对象的也应该的能够输出正确的或者合理的掩码。如图所示，每列显示SAM从单个不明确的点提示生成的3个有效掩码。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230407194759.png" alt="image.png" /></p><h3 id="预训练">预训练</h3><p>promptable segmentation task 提出了一种自然的预训练算法，该算法模拟每个训练样本的提示序列（例如，点、框、掩码），并将模型的掩码预测与基本事实进行比较。作者将这种方法从交互式分割中改编出来，尽管与交互式分割不同，交互式分割的目的是在足够的用户输入后最终预测有效的掩码，但promptable segmentation task 的目的是始终预测任何提示的有效掩码，即使提示不明确的/错误的/荒谬的。</p><h3 id="zero-shot-推理">Zero-shot 推理</h3><p>直观地说，预训练任务赋予了模型在推理时对任何提示做出适当响应的能力，因此下游任务可以通过设计适当的提示来解决。一般来说，一系列实用的分割任务可以作为提示。除了自动数据集标记外，作者还在第7部分中的实验中探索了五个不同的示例任务。 ## 模型 SAM包括了三个部分 一个 image encoder, 一个 flexible prompt encoder, 和一个 fast mask decoder. <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230407203046.png" alt="image.png" /></p><h3 id="image-encoder">image encoder</h3><p>受可扩展性和强大的预训练方法的启发，作者使用了MAE预训练的视觉转换器（ViT），该转换器至少适用于处理高分辨率输入。图像编码器每个图像运行一次，并且在prompt运行之前运行</p><h3 id="prompt-encoder">prompt encoder</h3><p>作者考虑了两组提示：稀疏(sparse)（点、框、文本）和密集(dense)（掩码）。MAE通过位置编码来表示点和框，这些位置编码与每个使用CLIP的现成文本编码器来编码过的prompt的学习嵌入相加。dense prompt（即掩码）使用卷积嵌入，并与图像嵌入逐元素求和。</p><h3 id="mask-decoder">mask decoder</h3><p>掩码解码器有效地将图像嵌入、提示嵌入和输出标记映射到掩码。这种设计受到的启发，对 Transformer decoder 进行了修改，然后是动态掩码预测头。修改后的解码器块在两个方向上使用提示自注意力和交叉注意力（(prompt-to-image embedding，反之亦然）来更新所有嵌入。在运行两个块后，对图像嵌入进行上采样，MLP将输出标记映射到动态线性分类器，然后计算每个图像位置的mask foreground 概率。</p><h2 id="data-engine">Data engine</h2><p>由于分割掩码在互联网上并不丰富，作者构建了一个数据引擎来实现1.1B 掩码数据集 SA-1B 的集合。</p><p>数据引擎分为三个阶段：（1）模型辅助手动注释阶段，（2）混合自动预测掩码和模型辅助注释的半自动阶段，以及（3）全自动阶段，</p><h3 id="手动阶段">手动阶段</h3><p>在第一阶段，类似于经典的交互式分割，一组专业注释者通过使用由 SAM 驱动的基于浏览器的交互分割工具点击前景/背景对象点来标记掩码。可以使用像素精确的“刷”和“擦除”工具来细化掩码。模型辅助注释直接在浏览器内实时运行（使用预先计算的图像嵌入），从而实现真正的交互体验。标注不受语义约束，可以自由地标注"stuff" and "things"</p><p><strong>注释者被要求按突出顺序标记对象，一旦掩码需要超过 30 秒进行注释，便鼓励继续下一个图像。</strong></p><p>在SOTA之后，SAM就开始使用公共数据集进行训练，在经过了足够多的数据标注后，就用新标注的数据重新训练。随着收集更多的掩码，图像使用了ViT-H作为编码器。这样的模型训练一共进行了六次。随着模型的改进，每个掩码的平均注释时间从 34 秒减少到 14 秒。随着SAM的改进，每张图像的平均掩码数从20个掩码增加到44个掩码。总体而言，作者在这个阶段从 120k 张图像收集了 4.3M 掩码。</p><h3 id="半自动化阶段">半自动化阶段</h3><p>这个阶段的目标是增加mask的多样性。为了将标记集中在不太突出的对象上，首先自动检测confident masks。然后向注释者展示了用这些掩码预先填充的图像，并要求他们注释任何额外的未注释对象。为了检测confident masks，作者使用通用的“对象”类别在所有第一阶段掩码上训练了一个边界框检测器。在这个阶段，作者在 180k 图像中收集了一个额外的 5.9M 掩码（总共 10.2M 掩码）。在第一阶段，在新收集的数据（5 次）上定期重新训练模型。每个掩码的平均注释时间可以回到了到 34 秒（不包括自动掩码），因为这些对象对标签更具挑战性。每张图像的平均掩码数从 44 个掩码到 72 个掩码（包括自动掩码）。</p><h3 id="全自动化阶段">全自动化阶段</h3><p>这个阶段的主要目的是解决歧义</p><p>正文部分说的不太清楚，在附录部分作者做了详细的解释。一共分为四个部分，Cropping，Filtering，Postprocessing，Automatic mask generation model。</p><p>这个过程作者使用<span class="math inline">\(32*32\)</span>网格的点对图像进行预测，并为每个点预测一组可能对应于有效对象的掩码。如果说一个点位于一个部件或子部件上，我们的模型将返回子部分，部分和整个对象(subpart, part, and whole object)。利用模型中的IoU预测模块来选择confident mask.如果将概率图阈值设为0.5−δ和0.5 + δ会产生相似的掩码，那么这个掩码就被认为是是稳定的。为了进一步提高小mask的质量，还处理了多个重叠的放大mask。</p><p>全自动掩码生成应用于数据集中的所有 11M 图像，总共产生了 1.1B 的高质量掩码。</p><h2 id="数据集">数据集</h2><p>SA的数据集使用data engine 构建的多样的高分辨率的有隐私保护的图像和1.1B个掩码组成。作者发布了这个这个数据集来帮助未来计算机视觉基础模型。SA-1B 将在某些研究用途的有利许可协议下发布，并为研究人员保护。 ### 图像 作者团队从直接与摄影师一起工作的提供商那里获得了一组新的高分辨率的11M图像。即使在下采样之后，这些图像的分辨率也明显高于许多现有的视觉数据集</p><h3 id="掩码">掩码</h3><p>数据引擎产生了 1.1B 掩码，其中 99.1% 是全自动生成的。因此，自动掩码的质量至关重要。作者团队将这些mask与专业标记的数据集进行标记，发现自动掩码对于训练模型是高质量和有效的。受这些发现的启发，SA-1B 仅包含自动生成的掩码。</p><blockquote><p>To estimate mask quality, we randomly sampled 500 images (∼50k masks) and asked our professional annotators to improve the quality of all masks in these images. Annotators did so using our model and pixel-precise "brush" and "eraser" editing tools. This procedure resulted in pairs of automatically predicted and professionally corrected masks. We computed IoU between each pair and found that 94% of pairs have greater than 90% IoU (and 97% of pairs have greater than 75% IoU). For comparison, prior work estimates inter-annotator consistency at 85-91% IoU [44, 60]. Our experiments in §7 confirm by human ratings that mask quality is high relative to a variety of datasets and that training our model on automatic masks is nearly as good as using all masks produced by the data engine. ## Responsible AI</p></blockquote><h2 id="zero-shot推理实验">Zero-Shot推理实验</h2><p>作者在这里讨论了五个任务，其中四个与训练数据完全不同。这也避免了模型训练过程中能够看到答案。这几个任务分别是 1. zero-shot单点有效掩码评估 2. 执行边缘检测 3. 分割所有内容，即对象提议生成 4. 分割检测到的对象，即实例分割， 5. 作为概念验证，从自由形式的文本中分割对象。</p><h2 id="讨论">讨论</h2><p>自机器学习的早期以来，预训练模型已经适应下游任务。近年来，随着对规模的日益重视，这种范式变得越来越重要，并且此类模型最近被称为为“基础模型”，即"大规模在广泛的数据上训练并适应广泛的下游任务"</p><p>作者的工作是与此高度相关的，尽管分割只是计算机视觉任务的一个子集。作者还将他们的方法的一个方面与另一项工作进行了对比<a href="https://arxiv.org/abs/2108.07258">Rishi Bommasani, Drew A Hudson, Ehsan Adeli, Russ Altman, Simran Arora, Sydney von Arx, Michael S Bernstein, Jeannette Bohg, Antoine Bosselut, Emma Brunskill, et al. On the opportunities and risks of foundation models. arXiv:2108.07258, 2021. 1, 12</a>，# On the Opportunities and Risks of Foundation Models强调了自监督学习在基础模型中的作用。虽然SA模型是用自监督技术(MAE)初始化的，但它的绝大多数能力来自于大规模的监督训练。在数据引擎可以扩展可用注释的情况下，监督训练提供了一种有效的解决方案。</p><p>SA不可避免地也有一些局限性，SAM是为通用性和使用广度而设计的，不同于以往的很多工作，它不是高IoU交互式分割。虽然SAM可以执行许多任务，但目前尚不清楚如何设计简单的提示符来实现语义和全景分割。最后，还有一些领域特定的工具，它们在各自的领域中依然有希望优于SAM。</p><p>总而言之，Segment Anything项目是将图像分割提升到基础模型时代的一种尝试。这项工作的主要贡献是一个新的任务(提示分割)，模型(SAM)和数据集(SA-1B)，使这一飞跃成为可能。SAM是否达到了基础模型的地位，仍然要看它在社区中是如何使用的，但这项工作的前景，超过1B个掩模的发布，以及作者的快速分割模型将有助于铺平前进的道路。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图像分割</tag>
      
      <tag>多模态</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Imagic笔记</title>
    <link href="/2023/03/29/Imagic%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/29/Imagic%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="imagic笔记">Imagic笔记</h1><p>先前的工作大多数方法目前仅限于以下一种:特定的编辑类型(例如，对象叠加，样式转换)，合成生成的图像，或需要一个共同对象的多个输入图像。文章作者展示了将复杂的基于文本的语义编辑应用于单个真实图像的能力。与之前的工作相反，这篇文章提出的方法只需要一个输入图像和一个目标文本(所需的编辑)。它生成一个与输入图像和目标文本一致的文本嵌入，同时微调扩散模型以捕获特定于图像的外观。</p><p>扩散模型是一种强大的最先进的生成模型，能够进行高质量的图像合成。在自然语言文本提示的条件下，它们能够生成与所请求的文本很好地对齐的图像。在工作中使用它们来编辑真实的图像，而不是合成新的图像。文章作者通过一个简单的3步过程来实现这一点，如图所示:首先优化文本嵌入，使其生成与输入图像相似的图像。然后，对预训练的生成扩散模型(以优化的嵌入为条件)进行微调，以更好地重建输入图像。最后，在目标文本嵌入和优化后的文本之间进行线性插值，得到一个结合了输入图像和目标文本的表示。然后将这种表示传递给带有微调模型的生成扩散过程，输出最终编辑的图像。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230312151044.png" alt="image.png" /></p><p>作者这进一步得到了一项人类感知评估研究的支持，在一项名为TEdBench -文本编辑基准的新基准测试中，评分者强烈倾向于图像而不是其他方法。</p><h2 id="方法">方法</h2><p>作者将整个过程分成三个部分</p><ul><li>优化文本嵌入，以在目标文本嵌入附近找到与给定图像最匹配的文本嵌入</li><li>微调扩散模型，以更好地匹配给定的图像</li><li>在优化的嵌入和目标文本嵌入之间进行线性插值，以找到一个既能达到输入图像的保真度又能达到目标文本对齐的点。</li></ul><h3 id="text-embedding-optimization">Text embedding optimization</h3><p>目标文本首先通过文本编码器，它输出其对应的文本嵌入<span class="math inline">\(\textbf{e}_{tgt}\in\mathbb{R}^{T\times d}\)</span> ，其中<span class="math inline">\(T\)</span>是给定目标文本中的标记数，<span class="math inline">\(d\)</span>是标记嵌入维数。然后冻结生成扩散模型<span class="math inline">\(f_\theta\)</span>的 参数，并使用[[DDPM]]目标<span class="math display">\[\mathcal{L}(\mathbf{x},\mathbf{e},\theta)=\mathbb{E}_{t,\epsilon}\left[\left\|\epsilon-f_{\theta}(\mathbf{x}_{t},t,\mathbf{e})\right\|_{2}^{2}\right]\]</span>优化目标文本嵌入<span class="math inline">\(E_{tgt}\)</span>.其中<span class="math inline">\(t\sim Uniform[1,T]\)</span> , <span class="math inline">\(x_t\)</span>是使用<span class="math inline">\(\boldsymbol{\epsilon}{\sim}\mathcal{N}(0,\text{I})\)</span>和方程1获得的x(输入图像)的噪声版本，<span class="math inline">\(\theta\)</span>是预训练的扩散模型权重。这将产生与输入图像尽可能匹配的文本嵌入。作者运行这个过程的步骤相对较少，以保持接近最初的目标文本嵌入，获得<span class="math inline">\(E_{opt}\)</span>。这种接近性在嵌入空间中实现了有意义的线性插值，而对于遥远的嵌入不表现出线性行为。</p><figure><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230312163802.png" alt="" /><figcaption>image.png</figcaption></figure><h3 id="model-fine-tuning">Model fine-tuning</h3><p>请注意，当经过生成扩散过程时，得到的优化嵌入<span class="math inline">\(E_{opt}\)</span>并不一定会导致输入图像<span class="math inline">\(X_{exactly}\)</span>，因为作者的方法优化运行了少量步骤(见图7中的左上角图像)。因此，在方法的第二阶段，通过使用公式2中所示的相同损失函数优化模型参数<span class="math inline">\(\theta\)</span>来缩小这一差距，同时冻结优化的嵌入。这个过程移动模型以适应输入图像<span class="math inline">\(x\)</span>在点<span class="math inline">\(E_{opt}\)</span>处的位置。同时，微调底层生成方法中出现的任何辅助扩散模型，例如超分辨率模型。作者用相同的重构损失对它们进行微调，但以<span class="math inline">\(E_{tgt}\)</span>为条件，因为<span class="math inline">\(E_{opt}\)</span>仅针对基本模型进行了优化。这些辅助模型的优化确保了保留基本分辨率中不存在的<span class="math inline">\(x\)</span>的高频细节 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230312164454.png" alt="image.png" /></p><h3 id="text-embedding-interpolation">Text embedding interpolation</h3><p>由于生成扩散模型被训练为在优化的嵌入<span class="math inline">\(E_{opt}\)</span>处完全重建输入图像，作者使用它来应用所需的编辑，从而沿着目标文本嵌入的方向前进。更正式地说，第三阶段是<span class="math inline">\(E_{tgt}\)</span>和<span class="math inline">\(E_{opt}\)</span>之间的简单线性插值。对于给定的超参数<span class="math inline">\(\eta\in[0,1]\)</span>，就得到了<span class="math display">\[\bar{\mathbf{e}}=\eta\cdot\mathbf{e}_{tgt}+(1-\eta)\cdot\mathbf{e}_{opt}\]</span> 这是表示期望编辑图像的嵌入。然后，应用基础生成扩散过程使用微调模型，条件是<span class="math inline">\(\bar{\mathbf{e}}\)</span>。这将导致低分辨率的编辑图像，然后使用微调辅助模型，以目标文本为条件进行超分辨。这个生成过程输出最终的高分辨率编辑图像<span class="math inline">\(x\)</span>。</p><h2 id="实验">实验</h2><h3 id="消融实验">消融实验</h3><p>作者在消融研究中发现微调会强制引入来自输入图像的细节，超出了仅优化的嵌入，使他们的方案能够保留这些细节用于中间的η值，从而实现语义上有意义的线性插值。因此作者得出结论，模型微调对其方法的成功至关重要。</p><p>作者尝试了尝试了文本嵌入优化步骤的数量。作者通过实验表明通过较少的步骤优化文本嵌入将限制模型的编辑能力，而通过超过100步的优化几乎没有额外的价值。</p><h3 id="局限性">局限性</h3><p>作者在研究中发现了两种方法失败的情况：一种是所需编辑的效果非常微弱（如果有的话），因此与目标文本不太匹配；另一种是编辑效果很好，但会影响到外部图像细节，如缩放或摄像机角度。作者在第10张图中分别展示了这两种失败情况的示例。当编辑效果不够强烈时，增加η通常可以实现期望的结果，但在少数情况下会导致原始图像细节的显著丢失（对于所有测试的随机种子）。至于缩放和摄像机角度的变化，这通常发生在我们从低η值逐渐增加到较大值时，因此很难避免。作者在附录中展示了这一点，并在TEdBench中包含了额外的失败案例。这些局限性可能可以通过不同的方式优化文本嵌入或扩散模型来缓解，或者类似于<a href="https://arxiv.org/abs/2208.01626">Hertz etal.</a>的交叉关注控制。作者将这些选项留给未来的工作。</p><figure><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230329195843.png" alt="" /><figcaption>image.png</figcaption></figure><p>此外，由于该方法依赖于预训练的文本到图像扩散模型，因此继承了模型的生成限制和偏见。因此，当所需编辑涉及生成底层模型的失败案例时，会产生不必要的伪像。例如，Imagen在人脸方面的生成性能不佳</p><h2 id="结论和未来的工作">结论和未来的工作</h2><p>作者认为下一步的工作主要有两个方面 - 一是进一步提高算法对输入图像的准确性和对身份的保护，同时增强对随机种子和插值参数 η 的敏感性； - 二是开发自动选择每个请求编辑的 η 值的方法</p><p>社会影响方面作者则认为模型容易受到基于文本的生成模型的社会偏见的影响，这些技术可能被恶意方用于合成虚假的图像以误导观众。为了缓解这种情况，需要进一步研究如何识别合成编辑或生成内容</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图像生成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE,Unity和WebGL技术对比</title>
    <link href="/2023/03/21/UE,Unity%E5%92%8CWebGL%E6%8A%80%E6%9C%AF%E5%AF%B9%E6%AF%94/"/>
    <url>/2023/03/21/UE,Unity%E5%92%8CWebGL%E6%8A%80%E6%9C%AF%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<h1 id="ueunity和webgl技术对比">UE,Unity和WebGL技术对比</h1><p>随着科技的不断进步和数字化时代的到来，元宇宙（Metaverse）已经成为了人们对未来虚拟世界的向往和探索。构建一个具有真实感、互动性和无限可能性的元宇宙需要借助于强大的技术平台。UE（Unreal Engine）、Unity和WebGL作为当前最主流的数字娱乐和游戏开发引擎，被广泛应用于游戏、影视等领域。那么在构建元宇宙的过程中，这三种技术平台各自有什么优缺点？它们又分别适用于哪些场景呢？本文将会深入比较这三种技术平台的差异与联系，并探讨它们在构建元宇宙方面的优缺点及适用场景。</p><h2 id="ue">UE</h2><p>Unreal Engine（以下简称UE）是一个流行的游戏引擎，它被广泛用于创建2D和3D游戏、虚拟现实应用程序和模拟器等。</p><h3 id="优势">优势</h3><ol type="1"><li><p>强大的可视化编辑器：UE具有易于使用的可视化编辑器，使得开发人员可以快速构建游戏场景和世界，而无需编写复杂的代码。</p></li><li><p>跨平台支持：UE支持多个操作系统和平台，包括Windows、Mac、Linux、iOS和Android等，因此开发者可以轻松地将游戏或应用程序移植到不同的设备上。</p></li><li><p>模块化设计：UE允许开发者将游戏逻辑和功能划分为独立的模块，从而提高了代码的可维护性和可重用性。</p></li><li><p>社区支持：UE拥有庞大的用户社区，其中包括开源代码、教程、示例项目、脚本和插件等资源，这些都能够加速开发过程。</p></li><li><p>支持虚幻市场：UE拥有一个虚幻市场，使开发者可以购买和出售游戏资产、工具和插件等，从而节省开发成本和时间。</p></li></ol><h3 id="劣势">劣势</h3><ol type="1"><li><p>入门门槛较高：UE可能需要一些技术能力和时间才能学会，尤其是对于初学者来说，它的学习曲线可能相对陡峭。</p></li><li><p>高昂的费用：虽然UE是免费的，但如果要在商业项目中使用，则需要支付5%的版税。此外，如果您需要访问源代码，则需要购买专业版本。</p></li><li><p>性能问题：与其他游戏引擎相比，UE可能需要更高的硬件配置以及更长的加载时间，导致游戏运行时的性能受到影响。</p></li></ol><h3 id="发展前景">发展前景</h3><p>UE的未来前景非常光明。随着虚拟现实和增强现实技术的不断发展，UE作为一个全面的游戏引擎，在这个领域有着巨大的潜力。UE拥有强大的开发工具和社区支持，可以加速游戏和应用程序的开发过程。此外，UE还支持跨平台开发，在全球范围内开发者社区都很活跃，这也预示着UE未来将在游戏和虚拟现实市场占据更大的份额。</p><h2 id="unity">Unity</h2><p>Unity是一个流行的跨平台游戏引擎，被广泛用于创建2D和3D游戏、虚拟现实应用程序和模拟器等。以下是Unity的优势和劣势以及发展前景的详细分析：</p><h3 id="优势-1">优势</h3><ol type="1"><li><p>跨平台支持：Unity支持多个操作系统和平台，包括Windows、Mac、Linux、iOS和Android等，因此开发者可以轻松地将游戏或应用程序移植到不同的设备上。</p></li><li><p>可视化编辑器：Unity具有易于使用的可视化编辑器，使得开发人员可以快速构建游戏场景和世界，而无需编写复杂的代码。</p></li><li><p>大量资源：Unity拥有庞大的用户社区，其中包括开源代码、教程、示例项目、脚本和插件等资源，这些都能够加速开发过程。</p></li><li><p>支持多种语言：Unity支持多种编程语言，包括C#、JavaScript和Boo等，使开发者可以选择最适合自己的编程语言。</p></li><li><p>发布方便：使用Unity可以轻松地发布游戏到多个平台和应用商店中，如Steam、App Store和Google Play等。</p></li></ol><h3 id="劣势-1">劣势</h3><ol type="1"><li><p>性能问题：与其他游戏引擎相比，Unity可能需要更高的硬件配置以及更长的加载时间，导致游戏运行时的性能受到影响。</p></li><li><p>版本管理问题：由于Unity的版本更新频繁，更新后可能会出现一些兼容性问题，需要花费更多的时间来解决。</p></li><li><p>费用较高：虽然Unity可以免费使用，但如果需要访问高级功能和技术支持，则需要购买专业版。</p></li></ol><h3 id="发展前景-1">发展前景</h3><p>随着虚拟现实和增强现实技术的不断发展，Unity作为一个全面的游戏引擎，在这个领域有着巨大的潜力。Unity已经成为了VR/AR应用程序开发中的主要玩家之一，其3D渲染能力和跨平台支持也使它在游戏市场占据着重要地位。未来，Unity将继续扩大其功能和工具集，以满足不断变化的市场需求。同时，Unity还在积极改进其开发者体验，增加可访问性和可扩展性，以吸引更多的开发者。总体来说，Unity具有非常广阔的发展前景，将在游戏和虚拟现实市场占据重要地位。</p><h2 id="webgl">WebGL</h2><p>WebGL是一种基于Web的3D图形渲染技术，它可以在浏览器中运行3D游戏和应用程序。以下是WebGL的优势和劣势以及发展前景的详细分析：</p><h3 id="优势-2">优势</h3><ol type="1"><li><p>开放性：WebGL是一个开放标准，无需安装任何插件或软件即可在Web浏览器中运行，任何人都可以轻松访问。</p></li><li><p>跨平台支持：由于WebGL技术的跨平台特性，游戏和应用程序可以在多个设备和操作系统上运行。</p></li><li><p>安全性：WebGL仅在用户的浏览器环境中运行，保护了用户的计算机不受恶意软件攻击和病毒感染的风险。</p></li><li><p>易于使用：WebGL允许开发者使用JavaScript等常见的Web编程语言，而无需学习专门的游戏引擎或开发工具。</p></li><li><p>可扩展性：WebGL允许开发者使用各种第三方库和框架，从而扩展其功能和性能。</p></li></ol><h3 id="劣势-2">劣势</h3><ol type="1"><li><p>性能问题：由于WebGL是基于Web技术构建的，因此它的性能可能受到浏览器和设备的限制，导致游戏运行时的性能相对较低。</p></li><li><p>兼容性问题：WebGL在旧版浏览器上可能无法正常工作，而且不同的浏览器可能会有不同的兼容性问题。</p></li><li><p>复杂性问题：WebGL需要掌握一定的Web编程知识和技能，并且需要处理底层的图形渲染细节和优化问题。</p></li></ol><h3 id="发展前景-2">发展前景</h3><p>随着云游戏、虚拟现实和增强现实等新技术的出现，WebGL作为一种开放、易用和跨平台的3D图形渲染技术，具有非常广阔的发展前景。未来，WebGL将继续推进其性能和兼容性的提高，以满足不断增长的游戏和应用程序市场需求。同时，WebGL还将与WebAssembly等新技术结合使用，提高其在游戏领域的可扩展性和性能表现。总体来说，WebGL将成为未来游戏和应用程序开发的重要趋势之一，为开发者提供更加灵活和创新的解决方案。</p><h2 id="实例">实例</h2><ol type="1"><li><p>使用Unreal Engine：《堡垒之夜》、《生化奇兵无限》、《失落的章节》等游戏都是使用UE引擎开发的。</p></li><li><p>使用Unity：《跑跑卡丁车》、《絕地求生：刺激战场》、《Beat Saber》等游戏都是使用Unity引擎开发的。</p></li><li><p>使用WebGL：Sketchfab是一个基于WebGL技术的在线3D模型库，用户可以在浏览器中查看和分享3D模型。Google Maps也使用了WebGL技术来呈现3D建筑和景点的效果。</p></li><li><p>使用Unreal Engine 和 Unity：虚拟现实设备 Oculus Rift 和 HTC Vive 都支持 UE 和 Unity 游戏引擎，许多 VR 游戏和应用程序都是使用这两个引擎开发的。</p></li><li><p>使用Unity 和 WebGL：Clara.io 是一个基于WebGL技术的三维建模和渲染平台，它使用Unity作为前端工具，并支持导出到WebGL格式以供在线展示。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>ThreeJS</tag>
      
      <tag>元宇宙</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ControlNet笔记</title>
    <link href="/2023/03/20/ControlNet%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/20/ControlNet%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="controlnet笔记">ControlNet笔记</h1><p>作者的代码开源在<a href="https://github.com/lllyasviel/ControlNet">GitHub</a>。</p><p>想要体验ControlNet看<a href="https://studyinglover.com/2023/03/20/%E9%80%9A%E8%BF%87colab%E4%BD%93%E9%AA%8CControlNet/">我的文章</a></p><h2 id="介绍">介绍</h2><p>作者在文章开头先对当前大型text-to-image model提出了疑问：这种基于提示的控制是否满足我们的需求？例如在图像处理中，考虑许多具有明确问题公式的长期任务，这些大型模型能否被应用于促进这些特定任务？我们应该建立什么样的框架来处理广泛的问题条件和用户控制？在特定任务中，大型模型能否保持从数十亿图像中获得的优势和能力？</p><blockquote><p>does this prompt-based control satisfy our needs? For example in image processing, considering many long-standing tasks with clear problem formulations, can these large models be applied to facilitate these specific tasks? What kind of framework should we build to handle the wide range of problem conditions and user controls? In specific tasks, can large models preserve the advantages and capabilities obtained from billions of images?</p></blockquote><p>接下来，作者提供了他们研究了大量模型后的发现 1. 需要具有鲁棒性的神经网络训练方法来避免过度拟合，并在针对特定问题训练大型模型时保持泛化能力。 2. 当图像处理任务使用数据驱动解决方案处理时，不可能总是使用大型计算集群，因此快速训练方法对于在可接受的时间和内存空间（例如在个人设备上）内将大型模型优化到特定任务很重要。这将进一步要求利用预训练的权重，以及微调策略或迁移学习。 3. 各种图像处理问题有不同的问题定义、用户控制或图像注释形式。考虑到一些特定的任务，如深度到图像、姿势到人等，这些问题本质上需要将原始输入解释为对象级或场景级别的理解，使得手工制作的程序方法不太可行。为了在许多任务中实现学习到的解决方案，端到端学习是必不可少的。</p><p>ControlNet可以用多种数据类型作为训练数据，例如Canny edges, Hough lines, user scribbles, human key points, segmentation maps, shape normals, depths, etc.</p><p>ControlNet也可以在个人计算机上进行训练，实现在有大型显存和多个gpu的集群上训练一样的效果。</p><h2 id="模型结构">模型结构</h2><p>ControlNet是一种端到端的网络，他将正常的网络参数变成了两份："trainable copy" and "locked copy"。</p><ul><li>"locked copy" 保留了从数十亿张图像中学习到的网络能力</li><li>"trainable copy" 在特定于任务的数据集上进行训练以学习条件控制。</li></ul><p>"trainable copy" 和 "locked copy"用一种称为“zero convolution”的卷积层连接，其中卷积权重逐渐从零增长到以学习方式优化参数。"zero convolution"即1 * 1卷积</p><h2 id="方法">方法</h2><h3 id="网络架构">网络架构</h3><p>ControlNet 操纵神经网络块的输入条件，以进一步控制整个神经网络的整体行为。</p><p>以2D图像为例，给定一张图像(特征图)<span class="math inline">\(\boldsymbol{x}\in\mathbb{R}^{h\times w\times c}\)</span> ,<span class="math inline">\(h,w,c\)</span> 分别代表高度，宽度，深度。一个将x转换为y的神经网络我们可以以将他记作<span class="math inline">\(\mathcal{F(\cdot;\Theta)}\)</span></p><p><span class="math display">\[\boldsymbol{y}=\mathcal{F}(\boldsymbol{x};\Theta)\]</span> <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230311152613.png" alt="image.png" /></p><p>我们把zero convolution记作<span class="math inline">\(\mathcal{Z}(\cdot;\cdot)\)</span> ,那么ControlNet就可以记作<span class="math display">\[\begin{matrix}\boldsymbol{y_c}=\mathcal{F}(\boldsymbol{x};\Theta)+\mathcal{Z}(\boldsymbol{F}(\boldsymbol{x}+\mathcal{Z}(\boldsymbol{c};\Theta_{\text{z1}});\Theta_{\text{z2}})\end{matrix}\]</span> <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230311152920.png" alt="image.png" /></p><p>由于zero convolution的权重初始为0，那么就有<span class="math display">\[\begin{cases}\mathcal{Z}(c;\Theta_{\text{z1}})=\mathbf{0}\\ \mathcal{F}(\boldsymbol{x}+\mathcal{Z}(\boldsymbol{c};\Theta_{\text{z1}});\Theta_{\text{c}})=\mathcal{F}(\boldsymbol{x};\Theta_{\text{c}})=\mathcal{F}(\boldsymbol{x};\Theta_{\text{c}})\\ \mathcal{Z}(\mathcal{F}(\boldsymbol{x}+\mathcal{Z}(\boldsymbol{c};\Theta_{\text{z1}});\Theta_{\text{c}});\Theta_{\text{z2}})=\mathcal{Z}(\mathcal{F}(\boldsymbol{x};\Theta_{\text{c}});\Theta_{\text{z2}})=\mathbf{0}\end{cases}\]</span> 可以得出<span class="math inline">\(y_c=y\)</span>,即当ControlNet被应用到任何一个网络上时，不会对这个网络的效果产生任何影响。它完美保留了任何神经网络块的能力、功能和结果质量，任何进一步优化都将随着微调而变得快速</p><p>作者也推导了zero convolution的梯度。网络的前向过程可以写成<span class="math display">\[\mathcal{Z}(\boldsymbol{I};\{\boldsymbol{W},\boldsymbol{B}\})_{p,i}=\boldsymbol{B}_{i}+\sum_{j}^{c}\boldsymbol{I}_{p,i}\boldsymbol{W}_{i,j}\]</span> 在最开始，zero convolution 的参数<span class="math inline">\(W\)</span>和<span class="math inline">\(B\)</span> 都是0，只要输入<span class="math inline">\(I\)</span>不为0，那么就有 <span class="math display">\[\begin{cases}\dfrac{\partial\mathcal{Z}(\textbf{I};\{\textbf{W},\textbf{B}\})_{p,i}}{\partial\textbf{B}_i}=1\quad\\ \frac{\partial\mathcal{Z}(\mathbf{I};\{\mathbf{W},\mathbf{B}\})_{p,i}}{\partial\mathbf{I}_{p,i}}=\sum_{j}^{c}\mathbf{W}_{i,j}=0 \\ \frac{\partial\mathcal{Z}(\mathbf{I};\{W,\mathbf{B}\})_{p,i}}{\partial W_{i,j}}=\mathbf{I}_{p,i}\neq\mathbf{0} \end{cases}\]</span> 我们可以看到，虽然zero convolution会导致<span class="math inline">\(I\)</span> 上的梯度变为零，但权重和偏差的梯度不受影响。只要特征 <span class="math inline">\(I\)</span> 非零，权重 <span class="math inline">\(W\)</span> 将在第一个梯度下降迭代中优化为非零矩阵.考虑经典的梯度下降<span class="math display">\[W^*=W-\beta_{\mathbb{If}}\cdot\dfrac{\partial\mathcal{L}}{\partial\mathcal{Z}(\mathbf{I};\{W,B\})}\odot\dfrac{\partial\mathcal{Z}(\mathbf{I};\{W,B\})}{\partial W}\neq\mathbf{0}\]</span> <span class="math inline">\(W*\)</span> 代表了第一次梯度下降之后的权重，<span class="math inline">\(\odot\)</span> 是Hadamard product，即对应的各个元素相乘(<span class="math inline">\(c_{ij}=a_{ij}×b_{ij}\)</span>) 。</p><p>在这一步之后，我们可以得到<span class="math display">\[\dfrac{\partial\mathcal{Z}(\mathbf{I};\{\mathbf{W}^*,\mathbf{B}\})_{p,i}}{\partial\mathbf{I}_{p,i}}=\sum\limits_j^c\mathbf{W}_{i,j}^*\neq\mathbf{0}\]</span> 这里包含了非零的梯度并且神经网络开始学习。这样，零卷积就变成了一种独特的连接层，它以学习的方式从零逐步增长到优化的参数。</p><h3 id="在stable-diffusion上的controlnet">在stable diffusion上的ControlNet</h3><p>咕咕咕(以后补上)</p><h3 id="训练">训练</h3><p>图像扩散模型是学习逐步去噪图像以生成样本。去噪可能发生在像素空间或从训练数据中编码的Latent Space中。stable diffusion使用latent image作为训练域。在这种情况下，术语"image", "pixel"和"denoising"都指的是“latent space”中的相应概念</p><p>给定图像 <span class="math inline">\(z_0\)</span>，扩散算法逐渐向图像添加噪声并产生噪声图像 <span class="math inline">\(z_t\)</span>，其中 t 是添加噪声的次数。当 <span class="math inline">\(t\)</span> 足够大时，图像近似于纯噪声。给定一组条件，包括时间步 <span class="math inline">\(t\)</span>、文本提示 <span class="math inline">\(c_t\)</span> 以及特定于任务的条件 <span class="math inline">\(c_f\)</span>，图像扩散算法学习网络 <span class="math inline">\(\epsilon_{\theta}\)</span> 以预测添加到噪声图像的噪声 <span class="math inline">\(z_t\)</span>,对于<span class="math display">\[\mathcal{L}=\mathbb{E}_{\boldsymbol{z}_0,t,\boldsymbol{c}_t,\boldsymbol{c}_i,\boldsymbol{\epsilon}\mathcal{N}(0,1)}\bigg[\|\epsilon-\epsilon_\theta(z_t,t,\boldsymbol{c}_t,\boldsymbol{c}_\mathbb{I}))\|_2^2\bigg]\]</span> 其中<span class="math inline">\(\mathcal{L}\)</span> 是整个扩散模型的整体学习目标。这种学习目标可以直接用于微调扩散模型。</p><p>在训练过程中，作者随机的将50%的prompt换成了空的prompt，作者认为这可以增强模型从文本内容识别语义信息的能力。这主要是因为当 stable diffusion 模型看不到提示时，decoder倾向于从输入控制图中学习更多的语义作为提示的替代品。</p><h3 id="改进训练">改进训练</h3><p>作者在这一节讨论了两种极端情况，分别是计算设备及其有限时例如个人电脑，和计算设备机器充足时</p><h4 id="small-scale-training">Small-Scale Training</h4><p>当计算设备有限时，作者发现部分打破ControlNet与stable diffusion之间的联系可以加速收敛。默认情况下是将ControlNet连接到“SD Middle Block”和“SD Decoder Block 1,2,3,4”。作者发现，只连接<em>Middle Block</em>而不连接Decoder Block 1,2,3,4可以将训练速度提高1.6倍(在RTX 3070TI笔记本电脑GPU上测试)。当模型在结果和条件之间表现出合理的关联时，这些断开连接的链接可以在持续训练中再次连接，以促进精确控制。</p><h4 id="large-scale-training">Large-Scale Training</h4><p>在这里，大规模训练是指可以使用强大的计算集群（至少 8 个 Nvidia A100 80G 或等效）和大型数据集（至少 100 万个训练图像对）的情况。这通常适用于数据很容易获得的任务，例如，由canny检测到的边缘图。在这种情况下，由于过拟合的风险相对较低，可以训练 ControlNets 进行大量迭代（通常为 50k 多个步骤），然后解锁稳定扩散的所有权重并联合训练整个模型作为一个整体。这将导致更具体的问题模型(This would lead to a more problem-specific model.)。</p><h2 id="实验">实验</h2><h3 id="设置">设置</h3><p>作者的实验是在<span class="math inline">\(CFG-scale=9.0\)</span> 进行的，采样器是DDPM。默认的步数是20步，在模型采取了<em>三种</em> prompt</p><h4 id="prompt">prompt</h4><ol type="1"><li>No prompt：也就是""</li><li>Default prompt:由于stable diffusion本质上是使用prompt进行训练的，因此空字符串可能是模型的意外输入，如果没有提供提示，SD 往往会生成随机纹理图。更好的设置是使用无意义的提示，"an image", "a nice image", "a professional image",etc。在作者的设置中，我们使用"a professional, detailed, high-quality image"作为default prompt。</li><li>Automatic prompt:为了测试fully automatic pipeline的SOTA，作者还尝试使用fully automatic pipeline（例如，BLIP）使用“default prompt”模式获得的结果生成prompts。作者会使用生成的提示再次扩散。</li><li>User prompt：用户自定义的输入</li></ol>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图像生成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过colab体验ControlNet</title>
    <link href="/2023/03/20/%E9%80%9A%E8%BF%87colab%E4%BD%93%E9%AA%8CControlNet/"/>
    <url>/2023/03/20/%E9%80%9A%E8%BF%87colab%E4%BD%93%E9%AA%8CControlNet/</url>
    
    <content type="html"><![CDATA[<h1 id="通过colab体验controlnet">通过colab体验ControlNet</h1><h2 id="跑通流程">跑通流程</h2><p>首先，我们要会xxxx并且有一个Google账号。这是一句废话。</p><h3 id="启动webui">启动webui</h3><p>访问<a href="https://colab.research.google.com/">https://colab.research.google.com/</a> 然后登陆自己的谷歌账号，</p><p>然后访问<a href="https://github.com/camenduru/stable-diffusion-webui-colab">https://github.com/camenduru/stable-diffusion-webui-colab</a></p><figure><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230324163856.png" alt="" /><figcaption>image.png</figcaption></figure><p>可以看到这里有很多的colab可以使用。</p><blockquote><p><code>lite</code> has a stable WebUI and stable installed extensions. <code>stable</code> has ControlNet, a stable WebUI, and stable installed extensions.<br /><code>nightly</code> has ControlNet, the latest WebUI, and daily installed extension updates</p></blockquote><p>为了稳定的使用并且能使用ControlNet,这里我们使用<em>stable</em> 版本，我选了第一个如下图 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230324164312.png" alt="image.png" /></p><p>点击进入后我们就能看到这样的界面了 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230320150108.png" alt="image.png" /></p><p>如图，点击我画出来的，运行这个notebook。经过一番耐心的等待，你在控制台的最下面会看到这么几行<img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230324164418.png" alt="image.png" /></p><p>点击最下面的两个链接中的任意一个，会跳转到webui的页面，我们主要用到的是<code>text2img</code>和<code>img2img</code>.</p><p>我们以<code>text2img</code>为例，这里只说常用的功能，如图所示。</p><p>这里的prompt就是提示词，假如你想让他画一只猫猫，你就在prompt的位置写上<code>cat</code>,negative prompt就是说排除掉那些词语，例如我们不想要红色的猫猫，我们可以写<code>red_cat</code> <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230320151053.png" alt="image.png" /></p><p>这里需要解释一堆东西</p><ol type="1"><li>Sampling method适用于生成图像的算法</li><li>Restore faces是使用GFPGAN来修复人脸</li><li>Tiling生成一张可以平铺的图片</li><li>Hires. fix 用两阶段的方法生成图像，先生成一张低分辨率的图片，然后在不改变构图的情况下继续优化细节</li><li>Batch count 生成多少个批次(注意显存)</li><li>Batch size 一个批次生成多少张图片(注意显存)</li><li>CFG Scale 这个值和图片引导与图片相关程度挂钩，值越低图片越有创意</li></ol><h3 id="启用controlnet">启用ControlNet</h3><p>滑到最下面，打开ControlNet功能(可能布局有所不同) <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230320151223.png" alt="image.png" /></p><p>打开之后如图 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230320151404.png" alt="image.png" /> <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230320151648.png" alt="image.png" /></p><p>如果你想先看一下controlnet会按照什么来绘画，你可以通过创建画布下面的Preview来查看。</p><p>这里推荐一个网站<a href="https://prompthero.com/search?model=Stable+Diffusion&amp;q=video+game+concept+art&amp;source=f7591caf953">https://prompthero.com/search?model=Stable+Diffusion&amp;q=video+game+concept+art&amp;source=f7591caf953</a> ,里面有各种各样的prompt，也是游戏风格的。</p><p>我们随便选一个prompt来生成一张图 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230320153127.png" alt="image.png" /></p><p>我们可以把图片放到<code>img2img</code>继续体验，使用方法和<code>text2img</code>基本一样。</p><h2 id="qa">Q&amp;A</h2><h3 id="posex">posex</h3><p>在新版本的stable diffusion webui中你会发现这个插件 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230324173639.png" alt="image.png" /></p><p>这是一个open pose编辑器，你可以在这里编辑openpose，然后把编辑好的图片发给ControlNet</p><h3 id="additional-networks">Additional Networks</h3><figure><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230324174228.png" alt="" /><figcaption>image.png</figcaption></figure><p>一般在ControlNet上面，这个的作用的加入一些自己找的模型。</p><h3 id="controlnet概念">ControlNet概念</h3><h4 id="模型">模型</h4><p>在作者的<a href="https://arxiv.org/abs/2302.05543">论文</a>和<a href="https://github.com/lllyasviel/ControlNet">GitHub仓库</a>和论文详细的写了各种模型是什么样子的(累了，偷个懒，有需要再写)</p><h4 id="预处理器">预处理器</h4><p>处理图片的一种方式，个人认为和传统图像处理的那些方法是一致的，处理的结合和上面作者的论文<a href="https://arxiv.org/abs/2302.05543">arxiv</a>和<a href="https://github.com/lllyasviel/ControlNet">GitHub仓库</a>中式一样的</p>]]></content>
    
    
    
    <tags>
      
      <tag>图像生成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cascade EF-GAN笔记</title>
    <link href="/2023/03/12/Cascade%20EF-GAN%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/12/Cascade%20EF-GAN%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="cascade-ef-gan">Cascade EF-GAN</h1><p>Cascade EF-GAN可以更好地保留与身份相关的特征和细节，特别是在眼睛、鼻子和嘴巴周围，进一步帮助减少生成的面部图像中的伪影和模糊。</p><h2 id="模型架构">模型架构</h2><p>作者设计了一种级联式网络，同原本对一张人脸做更改变成了对一张人脸和脸上几个部分同时做更改。因为对一个人类来说分辨一个人的方式就是看人的眼睛，鼻子和嘴巴。Cascade EF-GAN能够识别面部表情编辑中局部重点的重要性，并通过几个局部重点捕捉身份相关特征，有效地减轻编辑产生的伪影和模糊。</p><figure><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230312143755.png" alt="" /><figcaption>image.png</figcaption></figure><p>Cascade EF-GAN中的生成模型由一个Expression Transformer和一个Refiner组成。Expression Transformer执行带有局部焦点的表情编辑，Refiner融合表情转换器的输出并细化最终编辑。</p><p>Expression Transformer通过在全局和局部分支中处理面部图像来解决这个问题，其中全局分支捕获全局面部结构，局部分支专注于更详细的面部特征。Transformer将面部图像和目标表情标签作为输入。<strong>所有分支共享相似的网络架构，但不共享权重</strong></p><p>此外注意力被引入到全局和局部分支，以更好地捕捉细节和抑制伪影。在GANimation [32]中，使用视觉注意力来引导网络集中于转换与表情相关的区域。然而，在单个全局图像中应用注意力往往会引入模糊的注意力响应，如图3的第4列所示。这是因为全局注意力倾向于关注最显著的变化，例如图3中的嘴部区域，而眼睛和鼻子周围的细微变化则没有受到足够的关注。前面提到的局部分支中的独占式注意力有助于在局部区域实现更锐利的响应，如图3的第3列所示。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230312144711.png" alt="image.png" /></p><p>每个分支输出颜色特征图M_C和注意图M_A。对于原始输入图像I_in，每个分支的初始输出通过以下方式生成 <span class="math display">\[\mathcal{I}_{init}=M_A\otimes M_C+(1-M_A)\otimes I_{in}\]</span></p><p>Refiner负责融合表情转换器不同分支的输出，生成最终的表情编辑。如图2所示，三个局部分支的输出首先根据它们在面部图像中的各自位置缝合成单个图像。缝合的图像然后与全局分支的输出连接，并馈送到细化器以生成最终的表情编辑。</p><h2 id="模型训练">模型训练</h2><p>如果直接级联多个EF-GAN模块并从零开始训练，很难获得良好的表达式编辑。作者推测，这在很大程度上是由于早期EF-GAN模块的噪声面部图像。将这些噪声较大的人脸图像作为输入，级联EF-GAN的后期很容易受到影响，产生较差的编辑效果。此外，还会积累不必要的编辑，使网络参数难以优化。</p><p>解决方式是先训练单个EF-GAN执行单步面部表情转换，接着使用训练良好的EF-GAN的权重来初始化级联中所有后续EF-GAN，并微调所有端到端的网络参数。通过这种训练方案，级联中的每个EF-GAN模块都有很好的初始化，从而使中间的面部表情图像对后期学习有意义的表情转换信息变得有用。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图像生成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Everybody Dance Now笔记</title>
    <link href="/2023/03/11/Everybody%20Dance%20Now/"/>
    <url>/2023/03/11/Everybody%20Dance%20Now/</url>
    
    <content type="html"><![CDATA[<h1 id="everybody-dance-now">Everybody Dance Now</h1><p>为了完成给定一个人跳舞的视频到另一个人的目标，文章作者将这个过程分成三部：<strong>pose detection, global pose normalization, and mapping from normalized pose stick figures to the target subject</strong></p><h2 id="pose-detection">pose detection</h2><p>使用openpose对骨骼点进行标注<span class="math inline">\((x,y)\)</span> <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230311142224.png" alt="image.png" /></p><h2 id="global-pose-normalization">global pose normalization</h2><p>在不同的视频中，被拍摄的对象的肢体比例可能不同，或者站得离相机更近或更远。因此，在将两个对象之间的动作进行转换时，可能需要转换源人物的姿势关键点，使其符合目标人物的身体形状和位置，就像图3中的转换部分一样。作者通过分析每个人物的姿势高度和脚踝位置，并在两个视频中的最近和最远脚踝位置之间使用线性映射来找到这种转换。在收集这些位置之后，再根据每个帧的对应姿势检测计算其比例和平移。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230311142651.png" alt="原文图三" /></p><h2 id="mapping-from-normalized-pose-stick-figures-to-the-target-subject">mapping from normalized pose stick figures to the target subject</h2><ol type="1"><li><p>训练一个可以从source生成target人物的pix2pix GAN <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230311143611.png" alt="image.png" /></p></li><li><p>motion transfer 把source的舞蹈转移到目标人物身上 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230311143636.png" alt="image.png" /></p></li><li><p>对人脸做特别的修正，使用了faceGAN <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230311143533.png" alt="image.png" /></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图像生成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从0开始写c语言课设</title>
    <link href="/2023/03/03/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%86%99c%E8%AF%AD%E8%A8%80%E8%AF%BE%E8%AE%BE/"/>
    <url>/2023/03/03/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%86%99c%E8%AF%AD%E8%A8%80%E8%AF%BE%E8%AE%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="从0开始写c语言课设">从0开始写c语言课设</h1><h2 id="项目简述">项目简述</h2><p>管理系统是C语言课设的经典项目，但是在chatGPT已经兴起的今天依然有不少同学因课设而困扰，本文将从0开始写一个简单的药店管理系统。</p><p>项目开源于 <a href="https://github.com/StudyingLover/c_curriculum_design">GitHub</a></p><pre><code class=" mermaid">flowchart TD;    login--&gt;read_from_file    login--&gt;encrypt--&gt;login    read_from_file--&gt;*head    *head--&gt;add_drug    *head--&gt;modify_drug    *head--&gt;delete_drug    *head--&gt;insert_drug    *head--&gt;drug_sort    *head--&gt;search    add_drug--&gt;save_to_file    modify_drug--&gt;save_to_file    delete_drug--&gt;save_to_file    drug_sort--&gt;save_to_file    insert_drug--&gt;save_to_file    search--&gt;save_to_file</code></pre><pre><code class=" mermaid">flowchart TD;    main--&gt;login    login--&gt;encrypt    encrypt--&gt;login    login--&gt;read_from_file    read_from_file--&gt;add_drug    read_from_file--&gt;modify_drug    read_from_file--&gt;delete_drug    read_from_file--&gt;insert_drug    read_from_file--&gt;drug_sort    read_from_file--&gt;search    search --&gt;id    search --&gt;name    search --&gt;stock    add_drug--&gt;save_to_file    modify_drug--&gt;save_to_file    delete_drug--&gt;save_to_file    drug_sort--&gt;save_to_file    insert_drug--&gt;save_to_file    search--&gt;save_to_file</code></pre><h2 id="开发环境">开发环境</h2><ul><li>操作系统：Windows 10</li><li>CMake：3.10</li><li>GCC：mingw32 6.3</li><li>IDE：Clion</li></ul><h2 id="项目结构">项目结构</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.<br>├── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span><br>├── CMakeLists<span class="hljs-selector-class">.txt</span><br>├── README<span class="hljs-selector-class">.md</span><br>├── <span class="hljs-selector-class">.gitignore</span><br>├── include<br>│   ├── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.h</span><br>│   └── actions<br>│       ├── add<span class="hljs-selector-class">.h</span><br>│       ├── delete<span class="hljs-selector-class">.h</span><br>│       ├── sort<span class="hljs-selector-class">.h</span><br>│       ├── modify<span class="hljs-selector-class">.h</span><br>│       ├── search<span class="hljs-selector-class">.h</span><br>│       ├── insert<span class="hljs-selector-class">.h</span><br>│       ├── search<span class="hljs-selector-class">.h</span><br>│   └── date<br>│       ├── date<span class="hljs-selector-class">.h</span><br>│   └── log<br>│       ├── log<span class="hljs-selector-class">.h</span><br>│   └── user<br>│       ├── user<span class="hljs-selector-class">.h</span>   <br>├── <span class="hljs-attribute">src</span><br>│   ├── actions<br>│       ├── add<span class="hljs-selector-class">.c</span><br>│       ├── delete<span class="hljs-selector-class">.c</span><br>│       ├── sort<span class="hljs-selector-class">.c</span><br>│       ├── modify<span class="hljs-selector-class">.c</span><br>│       ├── search<span class="hljs-selector-class">.c</span><br>│       ├── insert<span class="hljs-selector-class">.c</span><br>│       ├── search<span class="hljs-selector-class">.c</span><br>│   └── date<br>│       ├── date<span class="hljs-selector-class">.c</span><br>│   └── log<br>│       ├── log<span class="hljs-selector-class">.c</span><br>│   └── user<br>│       ├── user<span class="hljs-selector-class">.c</span>   <br>├── build<br>├── config<br>│   ├── drugs<span class="hljs-selector-class">.txt</span><br>├── cmake-build-debug<br></code></pre></td></tr></table></figure><h2 id="项目设计">项目设计</h2><h3 id="功能简介">功能简介</h3><pre><code class=" mermaid">flowchart TB药店管理系统--&gt;账号注册/登录账号注册/登录--&gt;创建药品账号注册/登录--&gt;修改药品账号注册/登录--&gt;展示现有药品账号注册/登录--&gt;删除药品账号注册/登录--&gt;搜索药品搜索药品--&gt;简单搜索搜索药品--&gt;复合搜索账号注册/登录--&gt;排序排序--&gt;按价格排序排序--&gt;按库存排序排序--&gt;按名字排序排序--&gt;按类别排序账号注册/登录--&gt;统计</code></pre><h3 id="药品属性">药品属性</h3><pre><code class=" mermaid">flowchart TB药品属性--&gt;药品名药品属性--&gt;药品类别药品属性--&gt;药品价格药品属性--&gt;药品库存药品属性--&gt;药品生产日期药品属性--&gt;药品有效期药品属性--&gt;药品生产厂家</code></pre><h3 id="时间计划">时间计划</h3><pre><code class=" mermaid">gantt    信息录入，信息查看 :des1, 2023-02-27,2023-02-28    信息删除，信息保存 :des2, after des1, 1d    搜索药品 :des3, after des2, 2d    信息统计 :des4, after des3, 1d</code></pre><h2 id="实现功能">实现功能</h2><p>我的博客mermaid支持存在一些问题，所以链表操作的示意图后面会补上 ### main.h 通过一个结构体定义了药品信息，包括药品id、药品名称、药品类型、药品价格、药品库存、生产日期、保质期、生产厂家等信息。生产日期格式为<code>yyyy-mm-dd</code> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_MAIN_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_MAIN_H</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drug</span> &#123;</span><br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br>    <span class="hljs-type">char</span> type[<span class="hljs-number">50</span>];<br>    <span class="hljs-type">float</span> price;<br>    <span class="hljs-type">int</span> stock;<br>    <span class="hljs-type">char</span> production_date[<span class="hljs-number">50</span>];  <span class="hljs-comment">// 生产日期</span><br>    <span class="hljs-type">char</span> expiration_date[<span class="hljs-number">50</span>];  <span class="hljs-comment">// 保质期</span><br>    <span class="hljs-type">char</span> manufacturer[<span class="hljs-number">50</span>];  <span class="hljs-comment">// 生产厂家</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drug</span> <span class="hljs-title">data</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_MAIN_H</span></span><br></code></pre></td></tr></table></figure></p><h3 id="登录">登录</h3><p>登陆部分复用了大二同学的一个项目，方法是写死一个管理员账号和密码，然后输入账号密码进行验证，验证成功后进入主菜单，否则重新输入，有三次输入机会。</p><ul><li>user.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_USER_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_USER_H</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_USER_H</span></span><br></code></pre></td></tr></table></figure></li><li>user.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-type">char</span> pass[<span class="hljs-number">15</span>] = <span class="hljs-string">&quot;abc123&quot;</span>, ch[<span class="hljs-number">15</span>] = <span class="hljs-string">&quot;12345678&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;please enter the correct username and password: (you have three chances to enter) \n//username: 12345678; correct password: abc123&quot;</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        <span class="hljs-type">char</span> pass1[<span class="hljs-number">15</span>], ch1[<span class="hljs-number">15</span>];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;**************************************************\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--------------------------------------------------\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\tlogin\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--------------------------------------------------\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;account:\n&quot;</span>);<br>        gets(ch1);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--------------------------------------------------\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;password:\n&quot;</span>);<br>        gets(pass1);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--------------------------------------------------\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;**************************************************\n\n\n&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(ch, ch1) == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">strcmp</span>(pass, pass1) == <span class="hljs-number">0</span>)<br>        &#123; <span class="hljs-comment">// 两字符串相等时为0</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;password correct\n&quot;</span>);<br>            system(<span class="hljs-string">&quot;cls&quot;</span>);<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong,please try again&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;you only have %d chance(s) to try&quot;</span>, <span class="hljs-number">3</span> - i - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">3</span> - <span class="hljs-number">1</span> - i == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        system(<span class="hljs-string">&quot;cls&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="文件读取与保存">文件读取与保存</h3><p>这里的功能是直接定义在<code>main.c</code>文件中的</p><ul><li>main.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> config_path[<span class="hljs-number">100</span>] = <span class="hljs-string">&quot;../config/drugs.txt&quot;</span>;<span class="hljs-comment">//文件路径,../是因为main.c和config文件夹在同一目录下，但是编译后的可执行文件在build文件夹下，所以需要返回上一级目录</span><br><br><span class="hljs-keyword">struct</span> node *<span class="hljs-title function_">read_from_file</span><span class="hljs-params">()</span><br>&#123;<br>    FILE *fp = fopen(config_path, <span class="hljs-string">&quot;r+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Cannot open file.\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">head</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">tail</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-type">char</span> line[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">while</span> (fgets(line, <span class="hljs-number">100</span>, fp) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;len:%d  ,  %s&quot;</span>,<span class="hljs-built_in">strlen</span>(line),line);<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drug</span> <span class="hljs-title">new_drug</span>;</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(line) == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">sscanf</span>(line, <span class="hljs-string">&quot;%d,%[^,],%[^,],%f,%d,%[^,],%[^,],%[^,]&quot;</span>, &amp;new_drug.id, new_drug.name,<br>               new_drug.type, &amp;new_drug.price, &amp;new_drug.stock, new_drug.production_date, new_drug.expiration_date, new_drug.manufacturer);<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> (<span class="hljs-keyword">struct</span> node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>        new_node-&gt;data = new_drug;<br>        new_node-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            head = new_node;<br>            tail = new_node;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            tail-&gt;next = new_node;<br>            tail = new_node;<br>        &#125;<br>    &#125;<br><br>    fclose(fp);<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_to_file</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head)</span><br>&#123;<br>    FILE *fp = fopen(config_path, <span class="hljs-string">&quot;w+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Cannot open file.\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">current</span> =</span> head;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%d,%s,%s,%.2f,%d,%s,%s,%s\n&quot;</span>, current-&gt;data.id, current-&gt;data.name,<br>                current-&gt;data.type, current-&gt;data.price, current-&gt;data.stock, current-&gt;data.production_date, current-&gt;data.expiration_date, current-&gt;data.manufacturer);<br>        current = current-&gt;next;<br>    &#125;<br><br>    fclose(fp);<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="添加药品">添加药品</h3><p>这里分两种情况讨论 1. 头节点为空，直接添加 2. 头节点不为空，遍历链表，找到最后一个节点，然后添加</p><ul><li>add.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;date/date.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">add_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **head)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drug</span> <span class="hljs-title">new_drug</span>;</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug ID: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;new_drug.id);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug name: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.name);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug type: \n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 means prescription drugs , and 2 means OTC(over-the-counter drugs)&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.type);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug price: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;new_drug.price);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug stock: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;new_drug.stock);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug production date: \n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the format of date is YYYY-MM-DD ,for example ,2022-03-02&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.production_date);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug expiration date(days): &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.expiration_date);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug manufacturer: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.manufacturer);<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> (<span class="hljs-keyword">struct</span> node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>    new_node-&gt;data = new_drug;<br>    new_node-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (*head == <span class="hljs-literal">NULL</span>) &#123;<br>        *head = new_node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">struct</span> node *current = *head;<br>        <span class="hljs-keyword">while</span> (current-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>            current = current-&gt;next;<br>        &#125;<br>        current-&gt;next = new_node;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>add.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_ADD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_ADD_H</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">add_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **head)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_ADD_H</span></span><br></code></pre></td></tr></table></figure></li></ul><h3 id="删除药品">删除药品</h3><ul><li><p>delete.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_DELETE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_DELETE_H</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">delete_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **head, <span class="hljs-type">int</span> id)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_DELETE_H</span></span><br></code></pre></td></tr></table></figure></p></li><li><p>delete.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">delete_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **head, <span class="hljs-type">int</span> id)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">current</span> =</span> *head;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">previous</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (current-&gt;data.id == id) &#123;<br>            <span class="hljs-keyword">if</span> (previous == <span class="hljs-literal">NULL</span>) &#123;<br>                *head = current-&gt;next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                previous-&gt;next = current-&gt;next;<br>            &#125;<br><br>            <span class="hljs-built_in">free</span>(current);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Drug with ID %d has been deleted.\n&quot;</span>, id);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        previous = current;<br>        current = current-&gt;next;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Drug with ID %d not found.\n&quot;</span>, id);<br>&#125;<br></code></pre></td></tr></table></figure></p></li></ul><h3 id="修改药品">修改药品</h3><ul><li>modify.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">modify_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head)</span> &#123;<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the ID of the drug you want to modify: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;id);<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">current</span> =</span> head;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (current-&gt;data.id == id) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new name of the drug: &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, current-&gt;data.name);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new type of the drug: \n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 means prescription drugs , and 2 means OTC(over-the-counter drugs)&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, current-&gt;data.type);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new price of the drug: &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;current-&gt;data.price);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new stock of the drug: &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;current-&gt;data.stock);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new production date of the drug: \n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the format of date is YYYY-MM-DD ,for example ,2022-03-02&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, current-&gt;data.production_date);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new expiration date of the drug(days): &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, current-&gt;data.expiration_date);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new manufacturer of the drug: &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, current-&gt;data.manufacturer);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Drug with ID %d has been modified.\n&quot;</span>, id);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        current = current-&gt;next;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Drug with ID %d not found.\n&quot;</span>, id);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>modify.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_MODIFY_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_MODIFY_H</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">modify_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_MODIFY_H</span></span><br></code></pre></td></tr></table></figure></li></ul><h3 id="查询药品">查询药品</h3><p>查询部分采用了及其暴力的方法，给每个要查询的属性写一个函数，然后遍历链表，将所有符合条件的药品都打印出来。</p><ul><li>search.h</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_SEARCH_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_SEARCH_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../main.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">search_by_id</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head, <span class="hljs-type">int</span> id)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">search_by_name</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head, <span class="hljs-type">char</span> *name)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_SEARCH_H</span></span><br></code></pre></td></tr></table></figure><ul><li>search.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;log/log.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">search_by_id</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head, <span class="hljs-type">int</span> id)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">current</span> =</span> head;<br>    <span class="hljs-type">int</span> found = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (current-&gt;data.id == id) &#123;<br>            print_drug(current-&gt;data);<br>            found = <span class="hljs-number">1</span>;<br>        &#125;<br><br>        current = current-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!found) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No drug with ID %d found.\n&quot;</span>, id);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">search_by_name</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head, <span class="hljs-type">char</span> *name)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">current</span> =</span> head;<br>    <span class="hljs-type">int</span> found = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(current-&gt;data.name, name) == <span class="hljs-number">0</span>) &#123;<br>            print_drug(current-&gt;data);<br>            found = <span class="hljs-number">1</span>;<br>        &#125;<br><br>        current = current-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!found) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No drug with name \&quot;%s\&quot; found.\n&quot;</span>, name);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head)</span> &#123;<br>    <span class="hljs-type">int</span> choice, id;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Choose a search criteria:\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1. ID\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2. Name\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter your choice: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;choice);<br><br>    <span class="hljs-keyword">switch</span> (choice) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the ID of the drug to search: &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;id);<br>            search_by_id(head, id);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the name of the drug to search: &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, name);<br>            search_by_name(head, name);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid choice. Please try again.\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="插入药品">插入药品</h3><p>这是一个我也不知道为什么要写的功能，但是我还是写了，就是在链表中插入一个药品，插入的位置是按照ID来搜索的。 - insert.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_INSERT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_INSERT_H</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **head, <span class="hljs-type">int</span> last_id)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_INSERT_H</span></span><br></code></pre></td></tr></table></figure></p><ul><li>insert.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **head , <span class="hljs-type">int</span> last_id)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drug</span> <span class="hljs-title">new_drug</span>;</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug ID: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;new_drug.id);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug name: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.name);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug type: \n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 means prescription drugs , and 2 means OTC(over-the-counter drugs)&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.type);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug price: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;new_drug.price);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug stock: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;new_drug.stock);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug production date: \n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the format of date is YYYY-MM-DD ,for example ,2022-03-02&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.production_date);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug expiration date: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.expiration_date);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug manufacturer: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.manufacturer);<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> (<span class="hljs-keyword">struct</span> node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>    new_node-&gt;data = new_drug;<br>    new_node-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (*head == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        *head = new_node;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">//将新节点插入到last_id所在的位置之后</span><br>        <span class="hljs-keyword">struct</span> node *current = *head;<br>        <span class="hljs-keyword">while</span> (current-&gt;data.id != last_id)<br>        &#123;<br>            current = current-&gt;next;<br>        &#125;<br>        new_node-&gt;next = current-&gt;next;<br>        current-&gt;next = new_node;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure> ### 统计药品 统计药品的功能是统计出当前库存中的药品的总数，总价值。</li><li>count.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_COUNT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_COUNT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../main.h&quot;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">countMedicine</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node * head)</span>;<br><span class="hljs-type">float</span> <span class="hljs-title function_">countTotalValue</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node* head)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_COUNT_H</span></span><br><br></code></pre></td></tr></table></figure></li><li>count.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">countMedicine</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node* head)</span> &#123;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>* <span class="hljs-title">p</span> =</span> head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        count++;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><span class="hljs-type">float</span> <span class="hljs-title function_">countTotalValue</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node* head)</span> &#123;<br>    <span class="hljs-type">float</span> totalValue = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>* <span class="hljs-title">p</span> =</span> head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        totalValue += (p-&gt;data.price * p-&gt;data.stock);<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> totalValue;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="单个节点输出">单个节点输出</h3><p>这个函数是为了方便输出单个节点的数据，因为在输出链表的时候，每个节点都要输出，所以我就把这个函数单独拿出来了。</p><p>请注意，这个函数式在log文件夹下面的 - log.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_LOG_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_LOG_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../main.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> drug d)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_LOG_H</span></span><br></code></pre></td></tr></table></figure></p><ul><li>log.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> drug d)</span> &#123;<br><span class="hljs-comment">//    printf(&quot;%-10d%-20s%-10d\n&quot;, d.id, d.name, d.stock);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ID: %d, Name: %s, Type: %s, Price: %.2f, Stock: %d, Production Date: %s, Expiration Date: %s, Manufacturer: %s\n&quot;</span>, d.id, d.name, d.type, d.price, d.stock, d.production_date, d.expiration_date, d.manufacturer);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="日期处理">日期处理</h3><p>这个函数是为了处理日期，因为我在输入药品的时候，日期是以字符串的形式输入的，所以我就写了这个函数，把字符串转换成日期。</p><p>这个功能因为跨平台的问题，可能不能很好的运行。此外，在Linux下可以使用<code>strptime()</code>这个函数来做日期的转换，但是在Windows下没有这个函数。</p><ul><li>date.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_DATE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_DATE_H</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">getOverDate</span><span class="hljs-params">(<span class="hljs-type">char</span>* productionDate, <span class="hljs-type">char</span> shelfLife_str)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_DATE_H</span></span><br></code></pre></td></tr></table></figure></li><li>date.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;time.h&gt;</span><br><br><span class="hljs-comment">// On Windows platform, the function strptime() from time.h is not supported, I found.</span><br><br><span class="hljs-type">char</span>* <span class="hljs-title function_">getOverDate</span><span class="hljs-params">(<span class="hljs-type">char</span>* productionDate, <span class="hljs-type">char</span>* shelfLife_str)</span> &#123;<br>    <span class="hljs-type">char</span>* temp= shelfLife_str;<br>    <span class="hljs-type">int</span> shelfLife = atoi(temp);<br>    <span class="hljs-comment">// 将生产日期字符串按照 &quot;-&quot; 分割为年、月、日三个字符串</span><br>    <span class="hljs-type">char</span>* year = strtok(productionDate, <span class="hljs-string">&quot;-&quot;</span>);<br>    <span class="hljs-type">char</span>* month = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;-&quot;</span>);<br>    <span class="hljs-type">char</span>* day = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;-&quot;</span>);<br><br>    <span class="hljs-comment">// 将年、月、日字符串转换为整型变量</span><br>    <span class="hljs-type">int</span> year_int = atoi(year);<br>    <span class="hljs-type">int</span> month_int = atoi(month);<br>    <span class="hljs-type">int</span> day_int = atoi(day);<br><br>    <span class="hljs-comment">// 计算过期日期的年、月、日</span><br>    year_int += (shelfLife / <span class="hljs-number">365</span>);<br>    shelfLife %= <span class="hljs-number">365</span>;<br>    month_int += (shelfLife / <span class="hljs-number">30</span>);<br>    day_int += (shelfLife % <span class="hljs-number">30</span>);<br>    <span class="hljs-keyword">if</span> (day_int &gt; <span class="hljs-number">30</span>) &#123;<br>        day_int -= <span class="hljs-number">30</span>;<br>        month_int++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (month_int &gt; <span class="hljs-number">12</span>) &#123;<br>        month_int -= <span class="hljs-number">12</span>;<br>        year_int++;<br>    &#125;<br><br>    <span class="hljs-comment">// 将过期日期的年、月、日转换为字符串</span><br>    <span class="hljs-type">char</span>* expirationDate = (<span class="hljs-type">char</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">11</span>);<br>    <span class="hljs-built_in">sprintf</span>(expirationDate, <span class="hljs-string">&quot;%04d-%02d-%02d&quot;</span>, year_int, month_int, day_int);<br><br>    <span class="hljs-keyword">return</span> expirationDate;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="功能整合">功能整合</h2><p>将上面的功能整合起来，就是我们的主函数了。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/count.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/search.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;log/log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;user/user.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/add.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/delete.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/modify.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/sort.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/insert.h&quot;</span></span><br><br><span class="hljs-type">char</span> config_path[<span class="hljs-number">100</span>] = <span class="hljs-string">&quot;../config/drugs.txt&quot;</span>;<br><br><span class="hljs-keyword">struct</span> node *<span class="hljs-title function_">read_from_file</span><span class="hljs-params">()</span><br>&#123;<br>    FILE *fp = fopen(config_path, <span class="hljs-string">&quot;r+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Cannot open file.\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">head</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">tail</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-type">char</span> line[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">while</span> (fgets(line, <span class="hljs-number">100</span>, fp) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drug</span> <span class="hljs-title">new_drug</span>;</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(line) == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">sscanf</span>(line, <span class="hljs-string">&quot;%d,%[^,],%[^,],%f,%d,%[^,],%[^,],%[^,]&quot;</span>, &amp;new_drug.id, new_drug.name,<br>               new_drug.type, &amp;new_drug.price, &amp;new_drug.stock, new_drug.production_date, new_drug.expiration_date, new_drug.manufacturer);<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> (<span class="hljs-keyword">struct</span> node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>        new_node-&gt;data = new_drug;<br>        new_node-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            head = new_node;<br>            tail = new_node;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            tail-&gt;next = new_node;<br>            tail = new_node;<br>        &#125;<br>    &#125;<br><br>    fclose(fp);<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_to_file</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head)</span><br>&#123;<br>    FILE *fp = fopen(config_path, <span class="hljs-string">&quot;w+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Cannot open file.\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">current</span> =</span> head;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%d,%s,%s,%.2f,%d,%s,%s,%s\n&quot;</span>, current-&gt;data.id, current-&gt;data.name,<br>                current-&gt;data.type, current-&gt;data.price, current-&gt;data.stock, current-&gt;data.production_date, current-&gt;data.expiration_date, current-&gt;data.manufacturer);<br>        current = current-&gt;next;<br>    &#125;<br><br>    fclose(fp);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> t;<br>    t = login();<br>    <span class="hljs-keyword">if</span> (t == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;you have entered the wrong password for three times, the program will exit.&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">head</span> =</span> read_from_file();<br>    <span class="hljs-type">int</span> option = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span> (option != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please select an option:\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1. Add a new drug\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2. Modify an existing drug\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3. Display drug list\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4. Delete a drug\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;5. Search\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;6. Sort\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;7. Statistics\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;8. insert\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0. Quit\n&quot;</span>);<br><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;option);<br><br>        <span class="hljs-keyword">if</span> (option == <span class="hljs-number">1</span>)<br>        &#123;<br>            add_drug(&amp;head);<br>            <span class="hljs-type">int</span> save_option = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Save changes to file?\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1. Yes\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2. No\n&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;save_option);<br><br>            <span class="hljs-keyword">if</span> (save_option == <span class="hljs-number">1</span>)<br>            &#123;<br>                save_to_file(head);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">2</span>)<br>        &#123;<br>            modify_drug(head);<br>            <span class="hljs-type">int</span> save_option = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Save changes to file?\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1. Yes\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2. No\n&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;save_option);<br><br>            <span class="hljs-keyword">if</span> (save_option == <span class="hljs-number">1</span>)<br>            &#123;<br>                save_to_file(head);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">3</span>)<br>        &#123;<br>            <span class="hljs-keyword">struct</span> node *current = head;<br>            <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>)<br>            &#123;<br>                print_drug(current-&gt;data);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>                current = current-&gt;next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">4</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> delete_id;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;delete_id);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, delete_id);<br>            delete_drug(&amp;head, delete_id);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">5</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> search_option = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Choose a search criteria:\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1. Simple search\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2. Complex search\n&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;search_option);<br>            <span class="hljs-keyword">if</span> (search_option == <span class="hljs-number">1</span>)<br>            &#123;<br>                search(head);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (search_option == <span class="hljs-number">2</span>)<br>            &#123;<br>                search_complex(head);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid option. Please try again.\n&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">6</span>)<br>        &#123;<br>            drug_sort(head);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">7</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;total:%d\n&quot;</span>, countMedicine(head));<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;total price:%.2f\n&quot;</span>, countTotalValue(head));<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">8</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> insert_id;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;insert_id);<br>            insert_drug(&amp;head, insert_id);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Bye!\n&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid option. Please try again.\n&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    save_to_file(head);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></p><h2 id="项目编译">项目编译</h2><h3 id="windows">Windows</h3><h4 id="clionvscodeothers">Clion/VScode/others</h4><p>使用自带的cmake工具或插件进行编译</p><h4 id="bash">bash</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> ./build<br>cmake .. -G <span class="hljs-string">&quot;MinGW Makefiles&quot;</span><br>cmake --build .<br></code></pre></td></tr></table></figure><h3 id="linuxmacos">Linux/MacOS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> ./build<br>cmake ..<br>make<br></code></pre></td></tr></table></figure><h3 id="github-actions">github actions</h3><p>在<code>.github/workflows</code>文件夹下创建文件<code>build.yml</code> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">on</span> <span class="hljs-string">Ubuntu</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br>  <span class="hljs-attr">pull_request:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">ref:</span> <span class="hljs-string">master</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Get</span> <span class="hljs-string">CMake</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">symbitic/install-cmake@master</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">build</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          mkdir build</span><br><span class="hljs-string">          cd ./build</span><br><span class="hljs-string">          cmake ..</span><br><span class="hljs-string">          make</span><br></code></pre></td></tr></table></figure> 然后上传到Github即可自动编译。如果你希望获取编译好的文件，可以在最后加上将编译好的文件push到master分支的操作。</p><h2 id="感谢">感谢</h2><p><strong>感谢JetBrains学生认证提供的Clion免费许可证</strong> <img src="https://t7.baidu.com/it/u=2893921812,2528969823&amp;fm=74&amp;app=80&amp;size=f256,256&amp;n=0&amp;f=JPEG&amp;fmt=auto?sec=1678122000&amp;t=dca9fd6eaa4d57f7f0c991def94b5c84" alt="JetBrains" /> <strong>感谢GitHub学生认证提供的copilot</strong> <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230305215914.png" alt="copilot" /> <strong>感谢openai的chatGPT</strong></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DALLE2笔记</title>
    <link href="/2023/02/09/DALLE2%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/02/09/DALLE2%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="dalle2笔记">DALLE2笔记</h1><iframe src="//player.bilibili.com/player.html?aid=770625648&amp;bvid=BV17r4y1u77B&amp;cid=766807720&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><h2 id="abstract">Abstract</h2><pre><code class=" mermaid">graph LR;文本--CLIP模型--&gt;文本特征;文本特征--prior生成图像特征--&gt;两阶段模型;两阶段模型--decoder--&gt;图像;文本--ground truth--&gt;两阶段模型;</code></pre><p>基于扩散模型的解码器能够通过给定信息的解码器，生成很多不一样的图片 ，语义信息和风格比较接近，只是细节不一样。</p><p>可以直接修改和编辑模型，是zero-shot的，不需要重新训练。</p><p>整体上Dalle2都是一个扩散模型 ## Introduction</p><p>扩散模型是一种概率分布模型，生成图片是从一个分布中采样，多样性很高，保真度比不过GAN。20年之后有一系列模型改进了这一点。这一系列工作采用了很多技巧，其中一个比较著名的是引导guideance technique，能够牺牲一部分多样性来达到更好的保真度。</p><p><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230209161230.png" /> 上半部分说的是CLIP，下半部分是DALLE2。</p><p>CLIP模型中文本和图像分别通过一个文本编码器和一个图像编码器，得到一个文本特征和一个图像特征。对应的文本特征和图像特征之间就是正样本，不对应的就是负样本。通过这种方式来做对比学习，把文本编码器和图像编码器都学的很好，文本和图像的特征就真的联系在了一起。CLIP模型训练好了之后，文本编码器和图像编码器就锁住了，在Dalle2中就不会再训练了。</p><p>两阶段训练方式最暴力的方式其实是中间有个大模型，中间去学一些融合的特征，直接生成就可以了。但如何像作者在摘要所说的，中间有一个显式的生成过程，先从文本生成文本特征，再生成图像特征再由图像特征生成图片效果就会好很多。</p><p>训练的时候，先用已有图像(CLIP模型中的图片)生成的图像特征作为ground truth去监督，也就是用文本特征来预测ground truth这个图像特征。推理的时候由文本特征就可以直接生成类似CLIP生成的图像特征。</p><h2 id="图像生成">图像生成</h2><h3 id="gan">GAN</h3><p><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230210171156.png" /> 训练两个网络，一个是生成器，一个是判别器。生成器的目标是生成一个和真实图片尽可能相似的图片，判别器的目标是判断一个图片是真实的还是生成的。两个网络相互竞争，最终生成器生成的图片和真实图片的分布越来越接近。</p><p>有一个缺点就是训练不够稳定，因为需要同时训练两个网络。此外多样性比较差。 ### auto-encoder</p><p><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230210171228.png" /> 给定一个输入x，过一个编码器，然后就能得到一个特征z(特征维度一般会小很多，所以管他叫bottleneck)，再过一个解码器，得到一个图像。训练时的目标函数就是尽可能重建原来输入x</p><h3 id="denoising-auto-encoder">denoising auto-encoder</h3><p><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230210171318.png" /> 先把原图进行一定的打乱，然后把扰乱之后的特征传给编码器，后续和auto-encoder一样。训练时的目标函数还是尽可能重建原来输入x</p><h3 id="varitional-auto-encoder">varitional auto-encoder</h3><p><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230210171503.png" /> 中间不在是学习一个特征，而是去学习了一个分布。作者假设了中间是一个高斯分布，就可以用均值和方差来表示。具体来说就是得到编码器出来的特征之后，在后面加一些fc层，预测一个均值和方差，得到对应的均值和方差之后，我们用公式<span class="math inline">\(z=u+\sigma\epsilon\)</span>采样一个z出来,然后给解码器。</p><p>预测的时候，我们可以把编码器去掉，直接用均值和方差来预测。</p><p>从数学角度讲，这个模型是一个概率模型，给定x得到z这一过程就是一个后验概率，学出来的distribution就是一个先验分布，给定z预测x就是likelihood,这里做的就是maximum likelihood。</p><p>图像多样性好得多</p><h3 id="vqvaevector-quantised-vae">VQVAE(vector quantised VAE)</h3><p><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230210171524.png" /> 将VAE做量化。之前的VAE不好把图片做大，分类也不是很好学，所以取而代之的是不做分布的预测，而是以codebook代替。cookbook可以理解成聚类的中心，cookbook大小一般是<span class="math inline">\(K*D\)</span>,<span class="math inline">\(K\)</span>的大小一般是8192，<span class="math inline">\(D\)</span>的大小一般是512或者768，意思是由8912个长度为D的向量。</p><p>输入x先经过一个编码器，得到一个特征图大小为<span class="math inline">\(h*w\)</span>,将特征图里的向量和cookbook里的特征做对比，看和哪个聚类中心最接近，然后把聚类中心的编码存到矩阵Z中，用矩阵z作为新的特征。</p><p>优化起来相对容易。</p><p>想做生成的话，就需要再训练一个prior网络.论文作者训练了一个pixelCNN，用来生成图片。</p><h3 id="vqvae2">VQVAE2</h3><p>模型变成了层级式的，加入了全局式的建模，加上了attention，表达能力增强。把pixelCNN换成了GPT.</p><h3 id="dall-e">DALL-E</h3><p><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230210171634.png" /> 文本先通过BPE编码，得到一个256维特征。还有一个图像，256<em>256,经过一个VQ-VAE(来自训练好的cookbook，直接拿过来用),得到图像特征32</em>32,维度下降了很多，一共有1024个token，将文本特征和图像特征连接起来，变成了一个1028的序列，将序列给GPT，训练GPT。</p><p>推理则是提供一个文本，得到文本特征，用GPT从文本特征徐策图片特征，用自回归的方式生成图片。生成出来的图片用CLIP排序，得到最好的图片。</p><h3 id="diffusion-model">Diffusion model</h3><p><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230209180240.png" /> 假设有一个<span class="math inline">\(x_0\)</span>，每次加入一个很小的正态分布噪声，加了很多次之后就会变成一个真正的正态分布的噪声，这就是diffusion的forward过程。</p><p>将过程反转，整个模型都是共享参数的。</p><p>diffusion model采取了一个比较常见的模型结构U-NET,先用一个编码器把图像一点一点压小，再用一个解码器一点点恢复回来，前后尺寸大小一样。中间加上shortcut。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230210172229.png" /></p><p>不足时训练比较贵，推理也比较慢</p><h3 id="ddpm">DDPM</h3><p>DDPM是对diffusion的改进，不再去预测图片，而是去预测添加的噪声，U-NET的参数除了图像，还加入了一个time embedding用来表示到了反向扩散第几步。</p><p>学习正态分布是只需要学习均值，方差设置成常数也可以表现得很好</p><h3 id="classifier-guidence-diffusion">classifier guidence diffusion</h3><p>反向扩散过程 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230209181540.png" /></p><p>训练同时训练一个图像分类器(在加了噪声的ImageNET上训练)，当有一个图片，直接扔给图片分类器，可以得到一个交叉熵损失函数，得到一个梯度，用梯度帮助图片生成(暗含了图片是否有物体)</p><h3 id="classifier-free-guidance">classifier-free guidance</h3><p>训练的时候生成了两个输出，一个是有条件时生成输出，一个是没有条件时生成输出。训练的时候随机去掉文本，知道有文本输出和无文本输出的差距，就可以从无条件输出得到有条件输出</p><h2 id="method">method</h2><p>数据集依然是图片文本对 ### decoder</p><p>用了CLIP guidence(这个guidence指的是在decoder的过程中，输入是t时刻的一个带噪声的图像，最终输出是一个图像)和classifier-free guidance，guidence信号要么来自CLIP，要么来自文本。训练的时候有10%的时间把CLIP特征设成0，有50%把文本随机丢掉。</p><p>用了级联式生成，训练过程中还加入了噪声。</p><h3 id="prior">prior</h3><ul><li>auto-regressive自回归</li><li>diffusion 扩散模型 不管是auto-regressive还是diffusion，都是用了classifier-free guidance</li></ul><p>auto-regressive效率太低</p><p>对于diffusion prior，作者训练了一个transformer decoder，输入输出是embedding,U-NET就不合适了。模型输入输入有文本，CLIP的文本特征，还有time step (步数的embedding)，还有加过噪声之后的图像特征，transformer本身的embedding(这个embedding被用来预测没有加过噪声的图像特征)。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>yolov5和yolov5-face环境搭建和常见踩坑</title>
    <link href="/2023/02/07/yolov5%E5%B8%B8%E8%A7%81%E8%B8%A9%E5%9D%91/"/>
    <url>/2023/02/07/yolov5%E5%B8%B8%E8%A7%81%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h2 id="yolov5环境搭建">yolov5环境搭建</h2><p>在随便哪新建一个<code>requirements.txt</code>文件 内容是 <figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs txt"># YOLOv5 requirements<br># Usage: pip install -r requirements.txt<br><br># Base ----------------------------------------<br>matplotlib&gt;=3.2.2<br>numpy&gt;=1.18.5<br>opencv-python&gt;=4.1.1<br>Pillow&gt;=7.1.2<br>PyYAML&gt;=5.3.1<br>requests&gt;=2.23.0<br>scipy&gt;=1.4.1<br>torch&gt;=1.7.0<br>torchvision&gt;=0.8.1<br>tqdm&gt;=4.64.0<br>protobuf&lt;=3.20.1  # https://github.com/ultralytics/yolov5/issues/8012<br><br># Logging -------------------------------------<br>tensorboard&gt;=2.4.1<br># wandb<br># clearml<br><br># Plotting ------------------------------------<br>pandas&gt;=1.1.4<br>seaborn&gt;=0.11.0<br><br># Export --------------------------------------<br># coremltools&gt;=5.2  # CoreML export<br># onnx&gt;=1.9.0  # ONNX export<br># onnx-simplifier&gt;=0.4.1  # ONNX simplifier<br># nvidia-pyindex  # TensorRT export<br># nvidia-tensorrt  # TensorRT export<br># scikit-learn==0.19.2  # CoreML quantization<br># tensorflow&gt;=2.4.1  # TFLite export (or tensorflow-cpu, tensorflow-aarch64)<br># tensorflowjs&gt;=3.9.0  # TF.js export<br># openvino-dev  # OpenVINO export<br><br># Extras --------------------------------------<br>ipython  # interactive notebook<br>psutil  # system utilization<br>thop&gt;=0.1.1  # FLOPs computation<br># albumentations&gt;=1.0.3<br># pycocotools&gt;=2.0  # COCO mAP<br># roboflow<br><br></code></pre></td></tr></table></figure> 然后在当前目录下打开命令行，创建一个环境 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n yolov5 python<br></code></pre></td></tr></table></figure> 创建好环境之后，激活环境 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate yolov5<br></code></pre></td></tr></table></figure> 然后安装依赖 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -r requirements.txt<br></code></pre></td></tr></table></figure> 安装完成后代码就可以运行了</p><h2 id="划分数据集">划分数据集</h2><p>新建一个<code>split_train_val.py</code>文件，内容如下 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">split_dataset</span>(<span class="hljs-params">src_folder, dest_folder, ratio</span>):<br>    images_folder = os.path.join(src_folder, <span class="hljs-string">&quot;images&quot;</span>)<br>    labels_folder = os.path.join(src_folder, <span class="hljs-string">&quot;labels&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(images_folder) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> os.path.exists(labels_folder):<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Source folder doesn&#x27;t exist.&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(dest_folder):<br>        os.makedirs(dest_folder)<br><br>    train_folder = os.path.join(dest_folder, <span class="hljs-string">&quot;train&quot;</span>)<br>    val_folder = os.path.join(dest_folder, <span class="hljs-string">&quot;val&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(train_folder):<br>        os.makedirs(train_folder)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(val_folder):<br>        os.makedirs(val_folder)<br><br>    train_images_folder = os.path.join(train_folder, <span class="hljs-string">&quot;images&quot;</span>)<br>    train_labels_folder = os.path.join(train_folder, <span class="hljs-string">&quot;labels&quot;</span>)<br>    val_images_folder = os.path.join(val_folder, <span class="hljs-string">&quot;images&quot;</span>)<br>    val_labels_folder = os.path.join(val_folder, <span class="hljs-string">&quot;labels&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(train_images_folder):<br>        os.makedirs(train_images_folder)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(train_labels_folder):<br>        os.makedirs(train_labels_folder)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(val_images_folder):<br>        os.makedirs(val_images_folder)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(val_labels_folder):<br>        os.makedirs(val_labels_folder)<br><br>    images = [f <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> os.listdir(images_folder) <span class="hljs-keyword">if</span> f.endswith(<span class="hljs-string">&quot;.bmp&quot;</span>) ]<br>    num_images = <span class="hljs-built_in">len</span>(images)<br><br>    <span class="hljs-keyword">for</span> i, image <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(images):<br>        image_path = os.path.join(images_folder, image)<br>        label_path = os.path.join(labels_folder, os.path.splitext(image)[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;.txt&quot;</span>)<br>        <span class="hljs-keyword">if</span> random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>) &lt; ratio:<br>            dest_images_folder = train_images_folder<br>            dest_labels_folder = train_labels_folder<br>        <span class="hljs-keyword">else</span>:<br>            dest_images_folder = val_images_folder<br>            dest_labels_folder = val_labels_folder<br>        shutil.copy2(image_path, os.path.join(dest_images_folder, image))<br>        shutil.copy2(label_path, os.path.join(dest_labels_folder, os.path.splitext(image)[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;.txt&quot;</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Copied &#123;&#125;/&#123;&#125; images&quot;</span>.<span class="hljs-built_in">format</span>(i + <span class="hljs-number">1</span>, num_images))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    src_folder = <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment"># 原始数据集的路径</span><br>    dest_folder = <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment"># 分割后的数据集的路径</span><br>    ratio = <span class="hljs-number">0.8</span>  <span class="hljs-comment"># 将 80% 的图片分到训练集，20% 的图片分到验证集</span><br><br>    split_dataset(src_folder, dest_folder, ratio)<br><br></code></pre></td></tr></table></figure> 划分训练集和验证集，运行<code>split_train_val.py</code>，传入刚才保存的文件夹路径，会将图片和标签划分到一个新的文件夹 <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> data<br><span class="hljs-bullet">    -</span> train<br><span class="hljs-bullet">        -</span> images<br><span class="hljs-bullet">        -</span> labels<br><span class="hljs-bullet">    -</span> val<br><span class="hljs-bullet">        -</span> images<br><span class="hljs-bullet">        -</span> labels<br></code></pre></td></tr></table></figure></p><h2 id="yolov5常见踩坑">yolov5常见踩坑</h2><h3 id="not-enough-values-to-unpack-expected-2-got-0">not enough values to unpack (expected 2, got 0)</h3><p>如图 <img src="https://drive.studyinglover.com/api/raw/?path=/photos/blog/yolov5-setting/93bbd4d663cd589dfdd522e0479bb46.png" /></p><p>我们需要检查一下我们标记的txt文件 举个例子</p><p>这是我们需要的标记格式</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">0 0.5 0.5 0.5 0.5<br></code></pre></td></tr></table></figure><p>这是错误的标注格式 <figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">0 0.5 0.5 0.5 0.5<br><br></code></pre></td></tr></table></figure></p><p>问题就出在了最后一行的<code>\n</code>上，我们删除最后一行就可以了。我用chatGPT写了一个函数来做这件事 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 去除txt文件中的空行</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_empty_lines</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        lines = f.readlines()<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(line)&gt;<span class="hljs-number">3</span>:<br>                f.write(line)<br></code></pre></td></tr></table></figure></p><h3 id="assertionerror-no-results.txt-files-found-in-contentyolov5-facerunstrainexp-nothing-to-plot.">AssertionError: No results.txt files found in /content/yolov5-face/runs/train/exp, nothing to plot.</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata">Traceback (most recent call last):<br><span class="hljs-keyword">File</span> <span class="hljs-string">&quot;train.py&quot;</span>, <span class="hljs-keyword">line</span> 513, <span class="hljs-keyword">in</span><br>train(hyp, opt, device, tb_writer, wandb)<br><span class="hljs-keyword">File</span> <span class="hljs-string">&quot;train.py&quot;</span>, <span class="hljs-keyword">line</span> 400, <span class="hljs-keyword">in</span> train<br>plot_results(save_dir=save_dir) # <span class="hljs-keyword">save</span> <span class="hljs-keyword">as</span> results.png<br><span class="hljs-keyword">File</span> <span class="hljs-string">&quot;/content/yolov5-face/utils/plots.py&quot;</span>, <span class="hljs-keyword">line</span> 393, <span class="hljs-keyword">in</span> plot_results<br><span class="hljs-keyword">assert</span> len(files), &#x27;<span class="hljs-keyword">No</span> results.txt files found <span class="hljs-keyword">in</span> %s, nothing to <span class="hljs-keyword">plot</span>.&#x27; % os.path.abspath(save_dir)<br>AssertionError: <span class="hljs-keyword">No</span> results.txt files found <span class="hljs-keyword">in</span> /content/yolov5-face/runs/train/exp, nothing to <span class="hljs-keyword">plot</span>.<br></code></pre></td></tr></table></figure><p>出现这个问题的原因是此代码块未运行 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Results</span><br>       <span class="hljs-keyword">if</span> ckpt.get(<span class="hljs-string">&#x27;training_results&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>           <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(results_file, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>               file.write(ckpt[<span class="hljs-string">&#x27;training_results&#x27;</span>])  <span class="hljs-comment"># write results.txt</span><br></code></pre></td></tr></table></figure> 如果你只使用单 GPU 并设置 epoch &lt;20，这个块将不起作用。解决方案是设置epoch&gt;20。</p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>copliot才是代码开发神器</title>
    <link href="/2023/02/04/copliot%E6%89%8D%E6%98%AF%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E7%A5%9E%E5%99%A8/"/>
    <url>/2023/02/04/copliot%E6%89%8D%E6%98%AF%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E7%A5%9E%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="copliot才是代码开发神器">copliot才是代码开发神器</h1><p>本文使用copilot和chatGPT辅助完成</p><p>copilot是微软的AI代码生成器，可以帮助我们快速完成代码编写(这句copilot简介是copilot写的)。在openai的chatGPT出现后，copilot的风头有所下降，直到刚才…… 几分钟前我在写我的博客<a href="https://studyinglover.com/2023/02/04/ThreeJS%E5%AE%9E%E7%8E%B0%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E8%BD%AC3d%E5%9D%90%E6%A0%87/">ThreeJS实现屏幕坐标转3d坐标</a>时，原本的第一段代码是这样的： <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">get3DPosition</span>(<span class="hljs-params">x, y, camera, scene, hyper_z</span>) &#123;<br>        <span class="hljs-keyword">var</span> vector = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector3</span>();<br>        <span class="hljs-comment">// calculate mouse position in normalized device coordinates</span><br>        <span class="hljs-comment">// (-1 to +1) for both components</span><br>        vector.<span class="hljs-property">x</span> = (x / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>        vector.<span class="hljs-property">y</span> = - (y / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        vector.<span class="hljs-property">z</span> = hyper_z;<br><br>        <span class="hljs-comment">// unproject the vector</span><br>        vector.<span class="hljs-title function_">unproject</span>(camera);<br><br>        <span class="hljs-comment">// calculate the ray from the camera to the vector</span><br>        <span class="hljs-keyword">var</span> ray = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Raycaster</span>(camera.<span class="hljs-property">position</span>, vector.<span class="hljs-title function_">sub</span>(camera.<span class="hljs-property">position</span>).<span class="hljs-title function_">normalize</span>());<br><br>        <span class="hljs-comment">// check for intersection with objects in the scene</span><br>        <span class="hljs-keyword">var</span> intersects = ray.<span class="hljs-title function_">intersectObjects</span>(scene.<span class="hljs-property">children</span>);<br>        <span class="hljs-keyword">if</span> (intersects.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> intersects[<span class="hljs-number">0</span>].<span class="hljs-property">point</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure> 正当我写完 &gt; 官方为我们提供了一个接口<code>vector.unproject(camera)</code> 打算粘贴上我的代码时，copilot突然给了我一大段代码提示，并给出了我一段代码</p><p>emmmmmmmmmm,当时的我是有点懵的，我回去看了看当时这段代码的目的，发现这段代码的目的(实不相瞒写到这copilot又给我一段提示(实不相瞒写到这copilot又给我一段提示(......)))先获取点击的坐标点，再获取我点击的3d物体的名称。所以前半部分没问题，真正要改的是后部分。更改后的代码如下： <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">screenToWorld</span>(<span class="hljs-params">screenX, screenY, camera，hyper_z</span>) &#123;<br>    <span class="hljs-keyword">const</span> vector = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector3</span>();<br>    vector.<span class="hljs-title function_">set</span>(<br>        (screenX / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>,<br>        -(screenY / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>,<br>        hyper_z<br>    );<br>    vector.<span class="hljs-title function_">unproject</span>(camera);<br>    vector.<span class="hljs-title function_">applyMatrix4</span>(camera.<span class="hljs-property">matrixWorldInverse</span>);<br>    <span class="hljs-keyword">return</span> vector;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>你以为结束了吗，当我继续往下写我的博客，写道 &gt; 这里的<code>hyper_z</code>网上很多教程认为是写0.5,</p><p>copilot又给我一段代码提示，，这次的提示是这样的 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230204214713.png" /> 还好还好，这次代码的目的没搞错，只是整个代码都可能写错了而已……</p><p>经过一番思考，我决定继续按照原先的代码写，因为我已经尝试了代码的效果，勉强可以达到我们的要求。</p><p>最后，我想说的是，copilot真的是一个神器，但是要注意，它只是一个辅助工具，不要完全依赖它，因为它可能会给你一些错误的代码提示，这时候你就要自己去思考了。(这段话还是copilot写的)</p><p>总而言之，Copilot是代码开发领域中高效且创新的工具。它具有易于使用的界面和先进的功能，已被证明是开发人员的游戏规则改变者，并被广泛认为是最终的代码开发工具。无论您是经验丰富的程序员还是刚刚入门，Copilot都提供了您需要的工具，可以比以往更快、更高效地完成工作。(这段话是chatGPT写的)</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Microsoft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThreeJS实现屏幕坐标转3d坐标</title>
    <link href="/2023/02/04/ThreeJS%E5%AE%9E%E7%8E%B0%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E8%BD%AC3d%E5%9D%90%E6%A0%87/"/>
    <url>/2023/02/04/ThreeJS%E5%AE%9E%E7%8E%B0%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E8%BD%AC3d%E5%9D%90%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<h1 id="threejs实现屏幕坐标转3d坐标">ThreeJS实现屏幕坐标转3d坐标</h1><p>本文使用chatGPT辅助完成</p><p>在虚拟世界中，3D坐标与屏幕坐标之间的转换是一个重要的问题。使用ThreeJS开发3D场景时，经常需要将屏幕坐标转换为3D坐标。在本文中，我们将介绍如何使用ThreeJS实现屏幕坐标转3D坐标的两种方法</p><h2 id="根据相机的投影矩阵和射线拾取">根据相机的投影矩阵和射线拾取</h2><p>在我的笔记<a href="https://studyinglover.com/2022/12/29/%E6%91%84%E5%83%8F%E6%9C%BA%E6%A8%A1%E5%9E%8B/">摄像机模型</a>中详细推导了相机的投影矩阵。</p><p>在ThreeJS中，相机的投影矩阵是一个4x4的矩阵，它将3D坐标转换为屏幕坐标。我们可以使用这个矩阵将屏幕坐标转换为3D坐标。 官方为我们提供了一个接口<code>vector.unproject(camera)</code>,它可以将屏幕坐标转换为3D坐标。但是这个接口只能将屏幕坐标转换为相机坐标系下的3D坐标，如果我们需要将屏幕坐标转换为世界坐标系下的3D坐标，我们需要使用<code>vector.applyMatrix4(camera.matrixWorldInverse)</code>将相机坐标系下的3D坐标转换为世界坐标系下的3D坐标。(这里代码本来不是这么写的，但是copilot给了我好多提示，我就照着他的提示改了改，如果你发现代码有问题，问问chatGPT吧)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">screenToWorld</span>(<span class="hljs-params">screenX, screenY, camera，hyper_z</span>) &#123;<br>    <span class="hljs-keyword">const</span> vector = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector3</span>();<br>    vector.<span class="hljs-title function_">set</span>(<br>        (screenX / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>,<br>        -(screenY / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>,<br>        hyper_z<br>    );<br>    vector.<span class="hljs-title function_">unproject</span>(camera);<br>    vector.<span class="hljs-title function_">applyMatrix4</span>(camera.<span class="hljs-property">matrixWorldInverse</span>);<br>    <span class="hljs-keyword">return</span> vector;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>hyper_z</code>网上很多教程认为是写0.5,但是我实际试了一下，发现效果很差，就把他改成了一个超参数。后来在一位不能透露姓名的大佬的帮助下，得知这个参数的值应该写成1。我试了下，勉强可以得到预期的效果</p><h2 id="通过深度图采样shader改深度缓冲">通过深度图采样，shader改深度缓冲</h2><p>这种方法是通过深度图采样，shader改深度缓冲，然后再通过深度缓冲得到3D坐标。这种方法的优点是可以得到更精确的3D坐标，但是缺点是需要使用shader，而且需要修改深度缓冲，可能会影响性能。</p><p>感谢chatGPT，我只需要把我需要的内容告诉他，他就会给我写一个完整的代码。 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">convert2Dto3D</span>(<span class="hljs-params">mouseX, mouseY, camera, width, height, scene</span>) &#123;<br>        <span class="hljs-comment">// 构建纹理</span><br>        <span class="hljs-keyword">var</span> depthTarget = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">WebGLRenderTarget</span>(width, height);<br>        depthTarget.<span class="hljs-property">texture</span>.<span class="hljs-property">minFilter</span> = <span class="hljs-variable constant_">THREE</span>.<span class="hljs-property">LinearFilter</span>;<br><br>        <span class="hljs-comment">// 渲染深度图</span><br>        renderer.<span class="hljs-title function_">render</span>(scene, camera, depthTarget);<br><br>        <span class="hljs-comment">// 创建着色器</span><br>        <span class="hljs-keyword">var</span> material = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">ShaderMaterial</span>(&#123;<br>            <span class="hljs-attr">uniforms</span>: &#123;<br>                <span class="hljs-attr">mouse</span>: &#123; <span class="hljs-attr">value</span>: <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector2</span>(mouseX, mouseY) &#125;,<br>                <span class="hljs-attr">depthMap</span>: &#123; <span class="hljs-attr">value</span>: depthTarget.<span class="hljs-property">texture</span> &#125;,<br>                <span class="hljs-attr">projectionMatrix</span>: &#123; <span class="hljs-attr">value</span>: camera.<span class="hljs-property">projectionMatrix</span> &#125;,<br>                <span class="hljs-attr">viewMatrix</span>: &#123; <span class="hljs-attr">value</span>: camera.<span class="hljs-property">matrixWorldInverse</span> &#125;<br>            &#125;,<br>            <span class="hljs-attr">vertexShader</span>: <span class="hljs-string">`</span><br><span class="hljs-string">                uniform vec2 mouse;</span><br><span class="hljs-string">                uniform mat4 projectionMatrix;</span><br><span class="hljs-string">                uniform mat4 viewMatrix;</span><br><span class="hljs-string">                uniform sampler2D depthMap;</span><br><span class="hljs-string">                varying vec4 pos;</span><br><span class="hljs-string">                void main() &#123;</span><br><span class="hljs-string">                    pos = vec4(position, 1.0);</span><br><span class="hljs-string">                    gl_Position = projectionMatrix * viewMatrix * pos;</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            `</span>,<br>            <span class="hljs-attr">fragmentShader</span>: <span class="hljs-string">`</span><br><span class="hljs-string">                uniform vec2 mouse;</span><br><span class="hljs-string">                uniform sampler2D depthMap;</span><br><span class="hljs-string">                varying vec4 pos;</span><br><span class="hljs-string">                void main() &#123;</span><br><span class="hljs-string">                    float depth = texture2D(depthMap, mouse).r;</span><br><span class="hljs-string">                    vec4 viewPos = vec4(mouse * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);</span><br><span class="hljs-string">                    vec4 worldPos = viewMatrix * viewPos;</span><br><span class="hljs-string">                    worldPos /= worldPos.w;</span><br><span class="hljs-string">                    gl_FragColor = vec4(worldPos.xyz, 1.0);</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            `</span><br>        &#125;);<br><br>        <span class="hljs-comment">// 创建一个平面作为渲染目标</span><br>        <span class="hljs-keyword">var</span> plane = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">PlaneBufferGeometry</span>(width, height);<br>        <span class="hljs-keyword">var</span> mesh = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Mesh</span>(plane, material);<br>        scene.<span class="hljs-title function_">add</span>(mesh);<br><br>        <span class="hljs-comment">// 渲染一次着色器并获取结果</span><br>        renderer.<span class="hljs-title function_">render</span>(scene, camera);<br>        <span class="hljs-keyword">var</span> pixelBuffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-number">4</span>);<br>        renderer.<span class="hljs-title function_">readRenderTargetPixels</span>(depthTarget, mouseX, height - mouseY, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, pixelBuffer);<br>        <span class="hljs-keyword">var</span> worldPos = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector3</span>(<br>            (pixelBuffer[<span class="hljs-number">0</span>] / <span class="hljs-number">255</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>,<br>            (pixelBuffer[<span class="hljs-number">1</span>] / <span class="hljs-number">255</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>,<br>            (pixelBuffer[<span class="hljs-number">2</span>] / <span class="hljs-number">255</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span><br>        );<br>        worldPos.<span class="hljs-title function_">applyMatrix4</span>(camera.<span class="hljs-property">matrixWorldInverse</span>);<br>        scene.<span class="hljs-title function_">remove</span>(mesh);<br>        <span class="hljs-keyword">return</span> worldPos;<br>    &#125;,<br><br>    <span class="hljs-comment">//获取触摸点的坐标并转换为ThreeJS中的坐标</span><br>    <span class="hljs-attr">touch_crash_detect</span>: <span class="hljs-keyword">function</span> <span class="hljs-title function_">touch_crash_detect</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchmove&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">// screen3D_to_3DCoord(event.touches[0].clientX, event.touches[0].clientY,camera, window.innerWidth, window.innerHeight);</span><br>            <span class="hljs-keyword">let</span> pos = space_pos_convert.<span class="hljs-title function_">get3DPosition</span>(event.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientX</span>, event.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientY</span>, camera, scene, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (pos.<span class="hljs-property">y</span> != <span class="hljs-number">0</span>) &#123;<br>                pos.<span class="hljs-property">y</span> = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> pos;<br>            <span class="hljs-comment">// playerMesh.position.set(pos.x, pos.y, pos.z);</span><br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThreeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在fluid主题中加入Google广告</title>
    <link href="/2023/01/27/%E5%9C%A8fluid%E4%B8%BB%E9%A2%98%E4%B8%AD%E5%8A%A0%E5%85%A5Google%E5%B9%BF%E5%91%8A/"/>
    <url>/2023/01/27/%E5%9C%A8fluid%E4%B8%BB%E9%A2%98%E4%B8%AD%E5%8A%A0%E5%85%A5Google%E5%B9%BF%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="在fluid主题中加入google广告">在fluid主题中加入Google广告</h1><p>在fluid的<a href="https://hexo.fluid-dev.com/posts/fluid-adsense/">官方文档</a>中，提供了在fluid主题中加入Google广告的方法，但是其中提到的参数<code>data-ad-slot</code>并没有说清怎么获取，所以我决定详细写一下如何获取。</p><h2 id="注册google-adsense">注册Google Adsense</h2><p>访问<a href="https://www.google.com/adsense/start/">Google Adsense</a>，注册一个账号，然后点击右侧的广告。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230127100353.png" /></p><h2 id="创建一个广告单元">创建一个广告单元</h2><p>选择上方的按广告单元 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230127100502.png" /></p><p>这里我选择了推荐的展示广告 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230127100605.png" /></p><p>接着自定义广告单元，自定义广告 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230127100808.png" /></p><p>接着就能看到广告代码了，其中就有我们需要的<code>data-ad-client</code>和<code>data-ad-slot</code>参数</p><p>例如，我的代码是这样的红框中的就是我们需要的参数 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230127101239.png" /></p><h2 id="嵌入到fluid主题中">嵌入到fluid主题中</h2><p>在博客根目录下找到 scripts 文件夹（不存在就创建一个），进入后任意创建一个 js 文件，比如 <code>inject.js</code>，复制以下内容： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;theme_inject&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">injects</span>) &#123;<br>injects.<span class="hljs-property">bodyEnd</span>.<span class="hljs-title function_">raw</span>(<span class="hljs-string">&#x27;adsense&#x27;</span>, <span class="hljs-string">&#x27;&lt;script async src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-xxxxxx&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;&#x27;</span>);<br>injects.<span class="hljs-property">head</span>.<span class="hljs-title function_">raw</span>(<span class="hljs-string">&#x27;adsense&#x27;</span>, <span class="hljs-string">&#x27;&lt;style&gt;ins.adsbygoogle[data-ad-status=&quot;unfilled&quot;] &#123; display: none !important; &#125;&lt;/style&gt;&#x27;</span>);<br>injects.<span class="hljs-property">postLeft</span>.<span class="hljs-title function_">raw</span>(<span class="hljs-string">&#x27;adsense&#x27;</span>, <span class="hljs-string">&#x27;&lt;aside class=&quot;sidebar d-none d-xl-block&quot; style=&quot;margin-right:-1rem;z-index:-1&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:flex;justify-content:center;min-width:160px;max-width:300px;width:100%;height:600px;position:sticky;top:2rem&quot; data-ad-client=&quot;ca-pub-xxxxxx&quot; data-ad-slot=&quot;yyyyyy&quot;&gt;&lt;/ins&gt;&lt;script&gt; (adsbygoogle = window.adsbygoogle || []).push(&#123;&#125;); &lt;/script&gt;&lt;/aside&gt;&#x27;</span>);<br>injects.<span class="hljs-property">postCopyright</span>.<span class="hljs-title function_">raw</span>(<span class="hljs-string">&#x27;adsense&#x27;</span>, <span class="hljs-string">&#x27;&lt;div style=&quot;width:100%;display:flex;justify-content:center;margin-bottom:1.5rem&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:flex;justify-content:center;max-width:845px;width:100%;height:90px&quot; data-ad-client=&quot;ca-pub-xxxxxx&quot; data-ad-slot=&quot;yyyyyy&quot;&gt;&lt;/ins&gt;&lt;script&gt; (adsbygoogle = window.adsbygoogle || []).push(&#123;&#125;); &lt;/script&gt;&lt;/div&gt;&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure> 复制之后，把其中 <code>ca-pub-xxxxxx</code> 和 <code>data-ad-slot="yyyyyy"</code> 换成我们上面获取到的参数即可。</p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>在网页或博客中嵌入ppt</title>
    <link href="/2023/01/26/%E5%9C%A8%E7%BD%91%E9%A1%B5%E6%88%96%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%B5%8C%E5%85%A5ppt/"/>
    <url>/2023/01/26/%E5%9C%A8%E7%BD%91%E9%A1%B5%E6%88%96%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%B5%8C%E5%85%A5ppt/</url>
    
    <content type="html"><![CDATA[<p>当我们想要与他人共享ppt时，除了传统的展示方式外，还将其保存到 OneDrive，然后就可以将其嵌入到网页或博客中。</p><p>嵌入ppt的代码<strong>必须</strong>从PowerPoint <strong>网页版</strong> 获取。</p><p>网页版地址为https://office.live.com/start/PowerPoint.aspx</p><p>在网页版打开ppt后，点击右上角的文件按钮 <img src="https://cdn.jsdelivr.net/gh//StudyingLover/anything/20230126203458.png" /></p><p>选择共享，然后点击嵌入 <img src="https://cdn.jsdelivr.net/gh//StudyingLover/anything/20230126203758.png" /></p><p>可以自由调整大小，然后点击复制，插入你想插入位置即可 <img src="https://cdn.jsdelivr.net/gh//StudyingLover/anything/20230126203942.png" /></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Microsoft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsdelivr加速Github文件</title>
    <link href="/2023/01/20/jsdelivr%E5%8A%A0%E9%80%9FGithub%E6%96%87%E4%BB%B6/"/>
    <url>/2023/01/20/jsdelivr%E5%8A%A0%E9%80%9FGithub%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>假设GitHub路径为<code>https://github.com/username/repo-name/path/to/file</code> ,用jsdelivr可以加速或者在html中引用，路径为<code>https://cdn.jsdelivr.net/gh/username/repo-name/path/to/file</code></p><p>这里实现了一个简单的链接转换函数，可以将GitHub路径转换为jsdelivr路径 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_first_occurrence</span>(<span class="hljs-params">string, substring</span>):<br>    <span class="hljs-keyword">return</span> string.find(substring)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gh_path2jsdelivr</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-keyword">if</span>(find_first_occurrence(path,<span class="hljs-string">&quot;/blob/&quot;</span>) != -<span class="hljs-number">1</span>):<br>        path = path.replace(<span class="hljs-string">&quot;/blob/&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>    <span class="hljs-keyword">if</span>(find_first_occurrence(path,<span class="hljs-string">&quot;/main/&quot;</span>) != -<span class="hljs-number">1</span>):<br>        path = path.replace(<span class="hljs-string">&quot;/main/&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>    <span class="hljs-keyword">if</span>(find_first_occurrence(path,<span class="hljs-string">&quot;/master/&quot;</span>) != -<span class="hljs-number">1</span>):<br>        path = path.replace(<span class="hljs-string">&quot;/master/&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>    <span class="hljs-keyword">return</span> path.replace(<span class="hljs-string">&quot;github.com&quot;</span>, <span class="hljs-string">&quot;cdn.jsdelivr.net/gh&quot;</span>, <span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(gh_path2jsdelivr(<span class="hljs-string">&quot;&quot;</span>))<br><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ThreeJS导入失败</title>
    <link href="/2023/01/13/ThreeJS%E5%AF%BC%E5%85%A5%E5%A4%B1%E8%B4%A5/"/>
    <url>/2023/01/13/ThreeJS%E5%AF%BC%E5%85%A5%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-index.html </span><br><span class="hljs-deletion">-src.js</span><br><span class="hljs-deletion">-node_modules</span><br> -three<br>  -...<br></code></pre></td></tr></table></figure><p>在<code>src.js</code> 中用如下方式导入ThreeJS <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> THREE <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;three&#x27;</span>;<br></code></pre></td></tr></table></figure> <code>index.html</code> body如下 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/src/day01_a.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure> 出现报错 <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Uncaught TypeError: Failed <span class="hljs-built_in">to</span> <span class="hljs-built_in">resolve</span> module specifier <span class="hljs-string">&quot;three&quot;</span>. Relative references must <span class="hljs-built_in">start</span> <span class="hljs-keyword">with</span> either <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;./&quot;</span>, <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;../&quot;</span>.<br></code></pre></td></tr></table></figure> <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230103172514.png" alt="image.png" /> ## 解决方案 stackoverflow给出了解决方案https://stackoverflow.com/questions/65697410/not-using-node-js-uncaught-typeerror-failed-to-resolve-module-specifier-thre</p><figure><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230103172625.png" alt="" /><figcaption>image.png</figcaption></figure><p>删除<code>src.js</code>的导入，将<code>index.html</code> body改为 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/node_modules/three/build/three.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/src/day01_a.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThreeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>摄像机模型</title>
    <link href="/2022/12/29/%E6%91%84%E5%83%8F%E6%9C%BA%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/12/29/%E6%91%84%E5%83%8F%E6%9C%BA%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="摄像机模型">摄像机模型</h1><p>本文是鲁鹏老师机器视觉课程的笔记</p><h2 id="针孔模型与透镜">针孔模型与透镜</h2><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222201922.png" alt="" /><figcaption>image.png</figcaption></figure><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222201951.png" alt="" /><figcaption>image.png</figcaption></figure><p>虚拟像平面是倒着的</p><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222202148.png" alt="" /><figcaption>image.png</figcaption></figure><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222202224.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\(\dfrac{y&#39;}{f}=\dfrac{y}{z}\quad\implies y&#39;=f\dfrac{y}{z}\)</span></p><p><span class="math inline">\(\dfrac{x&#39;}{f}=\dfrac{x}{z}\quad\implies x&#39;=f\dfrac{x}{z}\)</span> <span class="math inline">\(P=\begin{bmatrix}x\\ y\\ z\end{bmatrix}\to P&#39;=\begin{bmatrix}x&#39;\\ y&#39;\end{bmatrix}\quad\quad\)</span></p><p><span class="math inline">\(\begin{cases}x&#39;=f\dfrac{x}{Z}\\ y&#39;=f\dfrac{y}{Z}\end{cases}\)</span></p><h3 id="光圈尺寸">光圈尺寸</h3><p>光圈偏大会导致场景模糊</p><p>光圈偏小会场景清晰，但偏暗 <img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222203219.png" alt="image.png" /></p><p><strong>增加透镜</strong> - 透镜将多条光线聚焦到胶片上，增加了照片的亮度： - 所有平行于光轴的光线都会会聚到焦点，焦点到透镜中心的距离称为焦距 - 穿过中心的光线的方向不发生改变</p><p><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222203452.png" alt="image.png" /> 根据折射定律： <span class="math inline">\(f=\frac{ {R} }{ {2}({n}-1)}\)</span> ,<span class="math inline">\(R\)</span> 是透镜球面半径，<span class="math inline">\(n\)</span>是透镜折射系数</p><p><span class="math inline">\(z&#39;=f+z_0\quad\begin{cases}x&#39;=z&#39;\dfrac{x}{z}\\ y&#39;=z&#39;\dfrac{y}{z}\end{cases}\)</span></p><p>要是透镜不合适，则会发生失焦 <img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222203756.png" alt="image.png" /></p><p>透镜将光线聚焦到胶片上 - 物体“聚焦”有特定距离 - 景深</p><h3 id="径向畸变">径向畸变</h3><p>图像中所成的像发生形变</p><p>径向畸变:图像像素点以畸变中心为中心点,沿着径向产生的位置偏差,从而导致</p><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222204142.png" alt="" /><figcaption>image.png</figcaption></figure><p>枕形畸变：畸变像点相对于理想像点沿径向向外偏移,远离中心 桶形畸变：畸变像点相对于理想点沿径向向中心靠拢</p><h2 id="摄像机几何">摄像机几何</h2><h3 id="齐次坐标">齐次坐标</h3><p><span class="math inline">\(E\to H\)</span> 图像点的齐次坐标<span class="math inline">\(\text{}(x,y)\Rightarrow\left[\begin{array}{c}x\\ y\\ 1\end{array}\right]\)</span></p><p>空间点的齐次坐标<span class="math inline">\((x,y,z)\Rightarrow\left[\begin{array}{c}x\\ y\\ z\\ 1\end{array}\right]\)</span></p><p><span class="math inline">\(H \to E\)</span> <span class="math inline">\(\left[\begin{array}{c}x\\ y\\ w\end{array}\right]\Rightarrow\left(x/w,y/w\right)\)</span></p><p><span class="math inline">\(\left[\begin{array}{c}x\\ y\\ z\\ w\end{array}\right]\Rightarrow\left(x/w,y/w,z/w\right)\)</span></p><p><span class="math inline">\(H \to E\)</span> 的转变不是唯一的，但<span class="math inline">\(E \to H\)</span> 的转变是唯一的</p><h3 id="像素坐标系">像素坐标系</h3><p>建立像平面到像素平面关系</p><ol type="1"><li>偏置</li></ol><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222204440.png" alt="" /><figcaption>image.png</figcaption></figure><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222204450.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\((x,y,z)\to(f\dfrac{x}{z}+c_x,f\dfrac{y}{z}+c_y)\)</span></p><ol start="2" type="1"><li>单位变换 <span class="math inline">\((x,y,z)\to({fk}\frac{x}{z}+c_x,{fl}\frac{y}{z}+c_y)\)</span> 单位：k.l：pixel/m , f:m k表示竖直方向上多少米表示一个像素，l表示水平方向上多少米表示一个像素</li></ol><p>记<span class="math inline">\(fk\)</span>为<span class="math inline">\(\alpha\)</span> ,<span class="math inline">\(fl\)</span>为<span class="math inline">\(\beta\)</span> <span class="math inline">\(P=(x,y,z)\rightarrow P^{\prime}=\left(\alpha{\frac{x}{z} }+c_{x},\beta{\frac{y}{z} }+c_{y}\right)\)</span> ，这里的<span class="math inline">\(c_x,c_y\)</span>是像素上的偏置</p><p><span class="math inline">\(P=(x,y,z)\rightarrow P^{\prime}=\left(\alpha{\frac{x}{z} }+c_{x},\beta{\frac{y}{z} }+c_{y}\right)\)</span>是非线性变换</p><p>在齐次坐标系下 <span class="math inline">\(P_h&#39;=\begin{bmatrix}\alpha x+c_x z\\ \beta y+c_yz\\ z\end{bmatrix}=\begin{bmatrix}\alpha&amp;0&amp;c_x&amp;0\\ 0&amp;\beta&amp;c_y&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\begin{bmatrix}x\\y\\z\\1\end{bmatrix}\)</span></p><p><span class="math inline">\(P&#39;_h\to P&#39;=(\alpha\dfrac{x}{z}+c_x,\beta\dfrac{y}{z}+c_y)\)</span></p><p><span class="math inline">\(P&#39;_h\)</span>是齐次，<span class="math inline">\(P&#39;\)</span> 是欧式</p><h3 id="摄像机的投影矩阵">摄像机的投影矩阵</h3><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222210401.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\(P&#39;=\begin{bmatrix}\alpha&amp;0&amp;c_x&amp;0\\ 0&amp;\beta&amp;c_y&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\begin{bmatrix}x\\ y\\ z\\ 1\end{bmatrix}=MP\)</span></p><p>其中<span class="math inline">\(M=\begin{bmatrix}\alpha&amp;-\alpha\cot\theta&amp;c_x&amp;0\\ 0&amp;\dfrac{\beta}{sin\theta}&amp;c_y&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\)</span></p><p>此时<span class="math inline">\(P\)</span>和<span class="math inline">\(P&#39;\)</span> 是线性表示 <span class="math inline">\(P&#39;\)</span>是<span class="math inline">\(3*1\)</span>矩阵，<span class="math inline">\(P\)</span> 是<span class="math inline">\(4*1\)</span>矩阵</p><h3 id="摄像机偏斜">摄像机偏斜</h3><p><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222210931.png" alt="image.png" /> <span class="math inline">\(P&#39;=\begin{bmatrix}\alpha&amp;-\alpha\cot\theta&amp;c_x&amp;0\\ 0&amp;\frac{\beta}{sin\theta}&amp;c_y&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\begin{bmatrix}x\\ y\\ z\\ 1\end{bmatrix}\)</span></p><h3 id="摄像机坐标系下的摄像机模型">摄像机坐标系下的摄像机模型</h3><p><span class="math inline">\(P&#39;=\begin{bmatrix}\alpha&amp;-\alpha\cot\theta&amp;c_x&amp;0\\ 0&amp;\frac{\beta}{sin\theta}&amp;c_y&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\begin{bmatrix}x\\ y\\ z\\ 1\end{bmatrix}=MP\)</span></p><p><span class="math inline">\(M=\begin{bmatrix}\alpha&amp;-\alpha\cot\theta&amp;c_x&amp;0\\ 0&amp;\frac{\beta}{sin\theta}&amp;c_y&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\)</span>被称为投影矩阵，</p><p><span class="math inline">\(K=\begin{bmatrix}\alpha&amp;-\alpha\cot\theta&amp;c_x\\ 0&amp;\frac{\beta}{sin\theta}&amp;c_y\\ 0&amp;0&amp;1\end{bmatrix}\)</span> 被称为摄像机内参数矩阵，内参数矩阵决定了摄像机坐标系下空间点到图像点的映射</p><p>摄像机内参数为<span class="math inline">\(\alpha,\beta,c_x,c_y,\theta\)</span>，K有五个自由度</p><h3 id="规范化投影变换">规范化投影变换</h3><p><span class="math inline">\(P&#39;=\begin{bmatrix}x\\ y\\ z\end{bmatrix}=\begin{bmatrix}1&amp;0&amp;0&amp;0\\ 0&amp;1&amp;0&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\begin{bmatrix}x\\ y\\ z\\ 1\end{bmatrix}\)</span></p><p>已知摄像机矩阵<span class="math inline">\(M\)</span> , <span class="math inline">\(P&#39;=I(MP)\)</span>,<span class="math inline">\(I=\begin{bmatrix}1&amp;0&amp;0\\ 0&amp;1&amp;0\\ 0&amp;0&amp;1\end{bmatrix}\)</span></p><p><span class="math inline">\(\begin{array}{c}\Re^4\xrightarrow{H}\Re^3\\ \boldsymbol{P&#39;}=M\boldsymbol{P}\end{array}\)</span></p><p><span class="math inline">\(P\)</span> 的欧式坐标<span class="math inline">\(\left[\begin{array}{c}{ {\frac{x}{z} }}\\ { {\frac{y}{z} }}\\ \end{array}\right]\)</span></p><h3 id="世界坐标系">世界坐标系</h3><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222212628.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\(O_w\)</span> 为世界坐标系 <span class="math inline">\(O\)</span>摄像机坐标系,<span class="math inline">\(C&#39;\)</span>像平面坐标系</p><p>齐次坐标系<span class="math inline">\(P=\left[\begin{matrix}{R}&amp;{T}\\ {0}&amp;{1}\\ \end{matrix}\right]\boldsymbol{P}_{w}\)</span> , <span class="math inline">\(\begin{bmatrix}x_w\\ y_w\\ z_w\\ 1\end{bmatrix}\)</span> ，即摄像机坐标系是世界坐标系经过一个旋转，再经过一个平移得到的</p><p>世界坐标系下<span class="math inline">\(P_w=R^T(P-T)\)</span></p><p>从世界坐标系到像素坐标系<span class="math inline">\(P&#39;=K[I\quad0]P=K[I\quad0]\begin{bmatrix}R&amp;T\\ 0&amp;1\end{bmatrix}P_w=K[R\quad T]P_w=MP_w=\left[{\begin{matrix}{m_{1} }\\ {m_{2} }\\ {m_{3} }\end{matrix} }\right]P_{\mathrm{w} }\)</span> <span class="math inline">\(\begin{bmatrix}R &amp; T\end{bmatrix}\)</span>称为外参数矩阵，K是内参数，这就是完整的摄像机模型</p><p><span class="math inline">\(M\)</span> 称为投影矩阵，有11个自由度</p><p>摄像机O点坐标为<span class="math inline">\(-R^TT\)</span></p><p><span class="math inline">\(\left[{\begin{matrix}{m_{1} }\\ {m_{2} }\\ {m_{3} }\end{matrix} }\right]P_{\mathrm{w} }\)</span> 是转换为欧式坐标系的写法，<span class="math inline">\(m_i\)</span> 是一个<span class="math inline">\(1*4\)</span> 的矩阵</p><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222215030.png" alt="" /><figcaption>image.png</figcaption></figure><h3 id="投影变化的性质">投影变化的性质</h3><ol type="1"><li>点投影为点</li><li>线投影为线</li><li>近大远小</li><li>角度不再保持</li><li>平行线相交</li></ol><h2 id="其他摄像机模型">其他摄像机模型</h2><h3 id="透视投影摄像机">透视投影摄像机</h3><p>^b240bc</p><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222220419.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\(P&#39;_{3\times1}=MP_W=K_{3\times3}[R\quad T]_{3\times4}P_{W4\times1}=\begin{bmatrix}m_1\\ m_2\\ m_3\end{bmatrix}P_w=\begin{bmatrix}m_1P_w\\ m_2P_w\\ m_3P_w\end{bmatrix}\stackrel{E}{\longrightarrow}(\dfrac{m_1P_w}{m_3P_w},\dfrac{m_2P_w}{m_3P_w})\quad,M=\begin{bmatrix}m_1\\ m_2\\ m_3\end{bmatrix}\)</span><br />### 弱透视投影摄像机</p><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222220925.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\(\begin{cases}x&#39;=\dfrac{f&#39;}{z}x\\ y&#39;=\dfrac{f&#39;}{z}y\end{cases}\rightarrow\begin{cases}x&#39;=\dfrac{f&#39;}{z_0}x\\ y&#39;=\dfrac{f}{z_0}y\end{cases}\)</span></p><p>从投影（透视）到弱透视<span class="math inline">\(M=K[RT]=\begin{bmatrix}A_{2\times3}&amp;b_{2\times1}\\ v_{1\times2}&amp;1\end{bmatrix}\quad\to M=\begin{bmatrix}A&amp;b\\ 0&amp;1\end{bmatrix}\quad\)</span></p><p><span class="math inline">\(P&#39;=MP_w=\begin{bmatrix}m_1\\ m_2\\ m_3\end{bmatrix}P_w=\begin{bmatrix}m_1P_w\\ m_2P_w\\ 1\end{bmatrix}\stackrel{E}{\longrightarrow}\left(m_{1}P_{W},m_{2}P_{w}\right)\)</span> ,<span class="math inline">\(m_1,m_2\)</span> 为放大率</p><p><span class="math inline">\(M=\begin{bmatrix}A&amp;b\\ v&amp;1\end{bmatrix}=\begin{bmatrix}m_1\\ m_2\\ m_3\end{bmatrix}=\begin{bmatrix}&amp;m_1&amp;\\ &amp;m_2&amp;\\ 0&amp;0&amp;0&amp;1\end{bmatrix}\)</span></p><h3 id="正交投影摄像机">正交投影摄像机</h3><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222222006.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\(\begin{cases}x&#39;=\dfrac{f&#39;}{z}x\\ y&#39;=\dfrac{f&#39;}{z}y\end{cases}\quad\to\quad\begin{cases}x&#39;=x\\ y&#39;=y\end{cases}\)</span></p><h3 id="各种摄像机模型的应用场合">各种摄像机模型的应用场合</h3><ul><li>正交投影<ul><li>更多应用在建筑设计(AUTOCAD)或者工业设计行业</li></ul></li><li>弱透视投影在数学方面更简单<ul><li>当物体较小且较远时准确，常用于图像识别任务</li></ul></li><li>透视投影对于3D到2D映射的建模更为准确<ul><li>用于运动恢复结构或SLAM</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
