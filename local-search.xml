<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Cascade EF-GAN笔记</title>
    <link href="/2023/03/12/Cascade%20EF-GAN%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/12/Cascade%20EF-GAN%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="cascade-ef-gan">Cascade EF-GAN</h1><p>Cascade EF-GAN可以更好地保留与身份相关的特征和细节，特别是在眼睛、鼻子和嘴巴周围，进一步帮助减少生成的面部图像中的伪影和模糊。</p><h2 id="模型架构">模型架构</h2><p>作者设计了一种级联式网络，同原本对一张人脸做更改变成了对一张人脸和脸上几个部分同时做更改。因为对一个人类来说分辨一个人的方式就是看人的眼睛，鼻子和嘴巴。Cascade EF-GAN能够识别面部表情编辑中局部重点的重要性，并通过几个局部重点捕捉身份相关特征，有效地减轻编辑产生的伪影和模糊。</p><figure><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230312143755.png" alt="" /><figcaption>image.png</figcaption></figure><p>Cascade EF-GAN中的生成模型由一个Expression Transformer和一个Refiner组成。Expression Transformer执行带有局部焦点的表情编辑，Refiner融合表情转换器的输出并细化最终编辑。</p><p>Expression Transformer通过在全局和局部分支中处理面部图像来解决这个问题，其中全局分支捕获全局面部结构，局部分支专注于更详细的面部特征。Transformer将面部图像和目标表情标签作为输入。<strong>所有分支共享相似的网络架构，但不共享权重</strong></p><p>此外注意力被引入到全局和局部分支，以更好地捕捉细节和抑制伪影。在GANimation [32]中，使用视觉注意力来引导网络集中于转换与表情相关的区域。然而，在单个全局图像中应用注意力往往会引入模糊的注意力响应，如图3的第4列所示。这是因为全局注意力倾向于关注最显著的变化，例如图3中的嘴部区域，而眼睛和鼻子周围的细微变化则没有受到足够的关注。前面提到的局部分支中的独占式注意力有助于在局部区域实现更锐利的响应，如图3的第3列所示。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230312144711.png" alt="image.png" /></p><p>每个分支输出颜色特征图M_C和注意图M_A。对于原始输入图像I_in，每个分支的初始输出通过以下方式生成 <span class="math display">\[\mathcal{I}_{init}=M_A\otimes M_C+(1-M_A)\otimes I_{in}\]</span></p><p>Refiner负责融合表情转换器不同分支的输出，生成最终的表情编辑。如图2所示，三个局部分支的输出首先根据它们在面部图像中的各自位置缝合成单个图像。缝合的图像然后与全局分支的输出连接，并馈送到细化器以生成最终的表情编辑。</p><h2 id="模型训练">模型训练</h2><p>如果直接级联多个EF-GAN模块并从零开始训练，很难获得良好的表达式编辑。作者推测，这在很大程度上是由于早期EF-GAN模块的噪声面部图像。将这些噪声较大的人脸图像作为输入，级联EF-GAN的后期很容易受到影响，产生较差的编辑效果。此外，还会积累不必要的编辑，使网络参数难以优化。</p><p>解决方式是先训练单个EF-GAN执行单步面部表情转换，接着使用训练良好的EF-GAN的权重来初始化级联中所有后续EF-GAN，并微调所有端到端的网络参数。通过这种训练方案，级联中的每个EF-GAN模块都有很好的初始化，从而使中间的面部表情图像对后期学习有意义的表情转换信息变得有用。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图像生成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Everybody Dance Now笔记</title>
    <link href="/2023/03/11/Everybody%20Dance%20Now/"/>
    <url>/2023/03/11/Everybody%20Dance%20Now/</url>
    
    <content type="html"><![CDATA[<h1 id="everybody-dance-now">Everybody Dance Now</h1><p>为了完成给定一个人跳舞的视频到另一个人的目标，文章作者将这个过程分成三部：<strong>pose detection, global pose normalization, and mapping from normalized pose stick figures to the target subject</strong></p><h2 id="pose-detection">pose detection</h2><p>使用openpose对骨骼点进行标注<span class="math inline">\((x,y)\)</span> <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230311142224.png" alt="image.png" /></p><h2 id="global-pose-normalization">global pose normalization</h2><p>在不同的视频中，被拍摄的对象的肢体比例可能不同，或者站得离相机更近或更远。因此，在将两个对象之间的动作进行转换时，可能需要转换源人物的姿势关键点，使其符合目标人物的身体形状和位置，就像图3中的转换部分一样。作者通过分析每个人物的姿势高度和脚踝位置，并在两个视频中的最近和最远脚踝位置之间使用线性映射来找到这种转换。在收集这些位置之后，再根据每个帧的对应姿势检测计算其比例和平移。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230311142651.png" alt="原文图三" /></p><h2 id="mapping-from-normalized-pose-stick-figures-to-the-target-subject">mapping from normalized pose stick figures to the target subject</h2><ol type="1"><li><p>训练一个可以从source生成target人物的pix2pix GAN <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230311143611.png" alt="image.png" /></p></li><li><p>motion transfer 把source的舞蹈转移到目标人物身上 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230311143636.png" alt="image.png" /></p></li><li><p>对人脸做特别的修正，使用了faceGAN <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230311143533.png" alt="image.png" /></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图像生成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从0开始写c语言课设</title>
    <link href="/2023/03/03/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%86%99c%E8%AF%AD%E8%A8%80%E8%AF%BE%E8%AE%BE/"/>
    <url>/2023/03/03/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%86%99c%E8%AF%AD%E8%A8%80%E8%AF%BE%E8%AE%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="从0开始写c语言课设">从0开始写c语言课设</h1><h2 id="项目简述">项目简述</h2><p>管理系统是C语言课设的经典项目，但是在chatGPT已经兴起的今天依然有不少同学因课设而困扰，本文将从0开始写一个简单的药店管理系统。</p><p>项目开源于 <a href="https://github.com/StudyingLover/c_curriculum_design">GitHub</a></p><pre><code class=" mermaid">flowchart TD;    login--&gt;read_from_file    login--&gt;encrypt--&gt;login    read_from_file--&gt;*head    *head--&gt;add_drug    *head--&gt;modify_drug    *head--&gt;delete_drug    *head--&gt;insert_drug    *head--&gt;drug_sort    *head--&gt;search    add_drug--&gt;save_to_file    modify_drug--&gt;save_to_file    delete_drug--&gt;save_to_file    drug_sort--&gt;save_to_file    insert_drug--&gt;save_to_file    search--&gt;save_to_file</code></pre><pre><code class=" mermaid">flowchart TD;    main--&gt;login    login--&gt;encrypt    encrypt--&gt;login    login--&gt;read_from_file    read_from_file--&gt;add_drug    read_from_file--&gt;modify_drug    read_from_file--&gt;delete_drug    read_from_file--&gt;insert_drug    read_from_file--&gt;drug_sort    read_from_file--&gt;search    search --&gt;id    search --&gt;name    search --&gt;stock    add_drug--&gt;save_to_file    modify_drug--&gt;save_to_file    delete_drug--&gt;save_to_file    drug_sort--&gt;save_to_file    insert_drug--&gt;save_to_file    search--&gt;save_to_file</code></pre><h2 id="开发环境">开发环境</h2><ul><li>操作系统：Windows 10</li><li>CMake：3.10</li><li>GCC：mingw32 6.3</li><li>IDE：Clion</li></ul><h2 id="项目结构">项目结构</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.<br>├── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span><br>├── CMakeLists<span class="hljs-selector-class">.txt</span><br>├── README<span class="hljs-selector-class">.md</span><br>├── <span class="hljs-selector-class">.gitignore</span><br>├── include<br>│   ├── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.h</span><br>│   └── actions<br>│       ├── add<span class="hljs-selector-class">.h</span><br>│       ├── delete<span class="hljs-selector-class">.h</span><br>│       ├── sort<span class="hljs-selector-class">.h</span><br>│       ├── modify<span class="hljs-selector-class">.h</span><br>│       ├── search<span class="hljs-selector-class">.h</span><br>│       ├── insert<span class="hljs-selector-class">.h</span><br>│       ├── search<span class="hljs-selector-class">.h</span><br>│   └── date<br>│       ├── date<span class="hljs-selector-class">.h</span><br>│   └── log<br>│       ├── log<span class="hljs-selector-class">.h</span><br>│   └── user<br>│       ├── user<span class="hljs-selector-class">.h</span>   <br>├── <span class="hljs-attribute">src</span><br>│   ├── actions<br>│       ├── add<span class="hljs-selector-class">.c</span><br>│       ├── delete<span class="hljs-selector-class">.c</span><br>│       ├── sort<span class="hljs-selector-class">.c</span><br>│       ├── modify<span class="hljs-selector-class">.c</span><br>│       ├── search<span class="hljs-selector-class">.c</span><br>│       ├── insert<span class="hljs-selector-class">.c</span><br>│       ├── search<span class="hljs-selector-class">.c</span><br>│   └── date<br>│       ├── date<span class="hljs-selector-class">.c</span><br>│   └── log<br>│       ├── log<span class="hljs-selector-class">.c</span><br>│   └── user<br>│       ├── user<span class="hljs-selector-class">.c</span>   <br>├── build<br>├── config<br>│   ├── drugs<span class="hljs-selector-class">.txt</span><br>├── cmake-build-debug<br></code></pre></td></tr></table></figure><h2 id="项目设计">项目设计</h2><h3 id="功能简介">功能简介</h3><pre><code class=" mermaid">flowchart TB药店管理系统--&gt;账号注册/登录账号注册/登录--&gt;创建药品账号注册/登录--&gt;修改药品账号注册/登录--&gt;展示现有药品账号注册/登录--&gt;删除药品账号注册/登录--&gt;搜索药品搜索药品--&gt;简单搜索搜索药品--&gt;复合搜索账号注册/登录--&gt;排序排序--&gt;按价格排序排序--&gt;按库存排序排序--&gt;按名字排序排序--&gt;按类别排序账号注册/登录--&gt;统计</code></pre><h3 id="药品属性">药品属性</h3><pre><code class=" mermaid">flowchart TB药品属性--&gt;药品名药品属性--&gt;药品类别药品属性--&gt;药品价格药品属性--&gt;药品库存药品属性--&gt;药品生产日期药品属性--&gt;药品有效期药品属性--&gt;药品生产厂家</code></pre><h3 id="时间计划">时间计划</h3><pre><code class=" mermaid">gantt    信息录入，信息查看 :des1, 2023-02-27,2023-02-28    信息删除，信息保存 :des2, after des1, 1d    搜索药品 :des3, after des2, 2d    信息统计 :des4, after des3, 1d</code></pre><h2 id="实现功能">实现功能</h2><p>我的博客mermaid支持存在一些问题，所以链表操作的示意图后面会补上 ### main.h 通过一个结构体定义了药品信息，包括药品id、药品名称、药品类型、药品价格、药品库存、生产日期、保质期、生产厂家等信息。生产日期格式为<code>yyyy-mm-dd</code> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_MAIN_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_MAIN_H</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drug</span> &#123;</span><br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br>    <span class="hljs-type">char</span> type[<span class="hljs-number">50</span>];<br>    <span class="hljs-type">float</span> price;<br>    <span class="hljs-type">int</span> stock;<br>    <span class="hljs-type">char</span> production_date[<span class="hljs-number">50</span>];  <span class="hljs-comment">// 生产日期</span><br>    <span class="hljs-type">char</span> expiration_date[<span class="hljs-number">50</span>];  <span class="hljs-comment">// 保质期</span><br>    <span class="hljs-type">char</span> manufacturer[<span class="hljs-number">50</span>];  <span class="hljs-comment">// 生产厂家</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drug</span> <span class="hljs-title">data</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_MAIN_H</span></span><br></code></pre></td></tr></table></figure></p><h3 id="登录">登录</h3><p>登陆部分复用了大二同学的一个项目，方法是写死一个管理员账号和密码，然后输入账号密码进行验证，验证成功后进入主菜单，否则重新输入，有三次输入机会。</p><ul><li>user.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_USER_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_USER_H</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_USER_H</span></span><br></code></pre></td></tr></table></figure></li><li>user.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-type">char</span> pass[<span class="hljs-number">15</span>] = <span class="hljs-string">&quot;abc123&quot;</span>, ch[<span class="hljs-number">15</span>] = <span class="hljs-string">&quot;12345678&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;please enter the correct username and password: (you have three chances to enter) \n//username: 12345678; correct password: abc123&quot;</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        <span class="hljs-type">char</span> pass1[<span class="hljs-number">15</span>], ch1[<span class="hljs-number">15</span>];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;**************************************************\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--------------------------------------------------\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\tlogin\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--------------------------------------------------\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;account:\n&quot;</span>);<br>        gets(ch1);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--------------------------------------------------\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;password:\n&quot;</span>);<br>        gets(pass1);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--------------------------------------------------\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;**************************************************\n\n\n&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(ch, ch1) == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">strcmp</span>(pass, pass1) == <span class="hljs-number">0</span>)<br>        &#123; <span class="hljs-comment">// 两字符串相等时为0</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;password correct\n&quot;</span>);<br>            system(<span class="hljs-string">&quot;cls&quot;</span>);<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong,please try again&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;you only have %d chance(s) to try&quot;</span>, <span class="hljs-number">3</span> - i - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">3</span> - <span class="hljs-number">1</span> - i == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        system(<span class="hljs-string">&quot;cls&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="文件读取与保存">文件读取与保存</h3><p>这里的功能是直接定义在<code>main.c</code>文件中的</p><ul><li>main.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> config_path[<span class="hljs-number">100</span>] = <span class="hljs-string">&quot;../config/drugs.txt&quot;</span>;<span class="hljs-comment">//文件路径,../是因为main.c和config文件夹在同一目录下，但是编译后的可执行文件在build文件夹下，所以需要返回上一级目录</span><br><br><span class="hljs-keyword">struct</span> node *<span class="hljs-title function_">read_from_file</span><span class="hljs-params">()</span><br>&#123;<br>    FILE *fp = fopen(config_path, <span class="hljs-string">&quot;r+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Cannot open file.\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">head</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">tail</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-type">char</span> line[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">while</span> (fgets(line, <span class="hljs-number">100</span>, fp) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;len:%d  ,  %s&quot;</span>,<span class="hljs-built_in">strlen</span>(line),line);<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drug</span> <span class="hljs-title">new_drug</span>;</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(line) == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">sscanf</span>(line, <span class="hljs-string">&quot;%d,%[^,],%[^,],%f,%d,%[^,],%[^,],%[^,]&quot;</span>, &amp;new_drug.id, new_drug.name,<br>               new_drug.type, &amp;new_drug.price, &amp;new_drug.stock, new_drug.production_date, new_drug.expiration_date, new_drug.manufacturer);<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> (<span class="hljs-keyword">struct</span> node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>        new_node-&gt;data = new_drug;<br>        new_node-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            head = new_node;<br>            tail = new_node;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            tail-&gt;next = new_node;<br>            tail = new_node;<br>        &#125;<br>    &#125;<br><br>    fclose(fp);<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_to_file</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head)</span><br>&#123;<br>    FILE *fp = fopen(config_path, <span class="hljs-string">&quot;w+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Cannot open file.\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">current</span> =</span> head;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%d,%s,%s,%.2f,%d,%s,%s,%s\n&quot;</span>, current-&gt;data.id, current-&gt;data.name,<br>                current-&gt;data.type, current-&gt;data.price, current-&gt;data.stock, current-&gt;data.production_date, current-&gt;data.expiration_date, current-&gt;data.manufacturer);<br>        current = current-&gt;next;<br>    &#125;<br><br>    fclose(fp);<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="添加药品">添加药品</h3><p>这里分两种情况讨论 1. 头节点为空，直接添加 2. 头节点不为空，遍历链表，找到最后一个节点，然后添加</p><ul><li>add.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;date/date.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">add_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **head)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drug</span> <span class="hljs-title">new_drug</span>;</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug ID: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;new_drug.id);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug name: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.name);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug type: \n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 means prescription drugs , and 2 means OTC(over-the-counter drugs)&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.type);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug price: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;new_drug.price);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug stock: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;new_drug.stock);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug production date: \n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the format of date is YYYY-MM-DD ,for example ,2022-03-02&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.production_date);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug expiration date(days): &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.expiration_date);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug manufacturer: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.manufacturer);<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> (<span class="hljs-keyword">struct</span> node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>    new_node-&gt;data = new_drug;<br>    new_node-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (*head == <span class="hljs-literal">NULL</span>) &#123;<br>        *head = new_node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">struct</span> node *current = *head;<br>        <span class="hljs-keyword">while</span> (current-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>            current = current-&gt;next;<br>        &#125;<br>        current-&gt;next = new_node;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>add.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_ADD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_ADD_H</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">add_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **head)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_ADD_H</span></span><br></code></pre></td></tr></table></figure></li></ul><h3 id="删除药品">删除药品</h3><ul><li><p>delete.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_DELETE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_DELETE_H</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">delete_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **head, <span class="hljs-type">int</span> id)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_DELETE_H</span></span><br></code></pre></td></tr></table></figure></p></li><li><p>delete.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">delete_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **head, <span class="hljs-type">int</span> id)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">current</span> =</span> *head;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">previous</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (current-&gt;data.id == id) &#123;<br>            <span class="hljs-keyword">if</span> (previous == <span class="hljs-literal">NULL</span>) &#123;<br>                *head = current-&gt;next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                previous-&gt;next = current-&gt;next;<br>            &#125;<br><br>            <span class="hljs-built_in">free</span>(current);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Drug with ID %d has been deleted.\n&quot;</span>, id);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        previous = current;<br>        current = current-&gt;next;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Drug with ID %d not found.\n&quot;</span>, id);<br>&#125;<br></code></pre></td></tr></table></figure></p></li></ul><h3 id="修改药品">修改药品</h3><ul><li>modify.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">modify_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head)</span> &#123;<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the ID of the drug you want to modify: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;id);<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">current</span> =</span> head;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (current-&gt;data.id == id) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new name of the drug: &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, current-&gt;data.name);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new type of the drug: \n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 means prescription drugs , and 2 means OTC(over-the-counter drugs)&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, current-&gt;data.type);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new price of the drug: &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;current-&gt;data.price);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new stock of the drug: &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;current-&gt;data.stock);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new production date of the drug: \n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the format of date is YYYY-MM-DD ,for example ,2022-03-02&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, current-&gt;data.production_date);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new expiration date of the drug(days): &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, current-&gt;data.expiration_date);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new manufacturer of the drug: &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, current-&gt;data.manufacturer);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Drug with ID %d has been modified.\n&quot;</span>, id);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        current = current-&gt;next;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Drug with ID %d not found.\n&quot;</span>, id);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>modify.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_MODIFY_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_MODIFY_H</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">modify_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_MODIFY_H</span></span><br></code></pre></td></tr></table></figure></li></ul><h3 id="查询药品">查询药品</h3><p>查询部分采用了及其暴力的方法，给每个要查询的属性写一个函数，然后遍历链表，将所有符合条件的药品都打印出来。</p><ul><li>search.h</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_SEARCH_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_SEARCH_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../main.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">search_by_id</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head, <span class="hljs-type">int</span> id)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">search_by_name</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head, <span class="hljs-type">char</span> *name)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_SEARCH_H</span></span><br></code></pre></td></tr></table></figure><ul><li>search.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;log/log.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">search_by_id</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head, <span class="hljs-type">int</span> id)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">current</span> =</span> head;<br>    <span class="hljs-type">int</span> found = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (current-&gt;data.id == id) &#123;<br>            print_drug(current-&gt;data);<br>            found = <span class="hljs-number">1</span>;<br>        &#125;<br><br>        current = current-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!found) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No drug with ID %d found.\n&quot;</span>, id);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">search_by_name</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head, <span class="hljs-type">char</span> *name)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">current</span> =</span> head;<br>    <span class="hljs-type">int</span> found = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(current-&gt;data.name, name) == <span class="hljs-number">0</span>) &#123;<br>            print_drug(current-&gt;data);<br>            found = <span class="hljs-number">1</span>;<br>        &#125;<br><br>        current = current-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!found) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No drug with name \&quot;%s\&quot; found.\n&quot;</span>, name);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head)</span> &#123;<br>    <span class="hljs-type">int</span> choice, id;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Choose a search criteria:\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1. ID\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2. Name\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter your choice: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;choice);<br><br>    <span class="hljs-keyword">switch</span> (choice) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the ID of the drug to search: &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;id);<br>            search_by_id(head, id);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the name of the drug to search: &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, name);<br>            search_by_name(head, name);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid choice. Please try again.\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="插入药品">插入药品</h3><p>这是一个我也不知道为什么要写的功能，但是我还是写了，就是在链表中插入一个药品，插入的位置是按照ID来搜索的。 - insert.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_INSERT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_INSERT_H</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **head, <span class="hljs-type">int</span> last_id)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_INSERT_H</span></span><br></code></pre></td></tr></table></figure></p><ul><li>insert.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **head , <span class="hljs-type">int</span> last_id)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drug</span> <span class="hljs-title">new_drug</span>;</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug ID: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;new_drug.id);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug name: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.name);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug type: \n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 means prescription drugs , and 2 means OTC(over-the-counter drugs)&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.type);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug price: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;new_drug.price);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug stock: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;new_drug.stock);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug production date: \n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the format of date is YYYY-MM-DD ,for example ,2022-03-02&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.production_date);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug expiration date: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.expiration_date);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug manufacturer: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.manufacturer);<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> (<span class="hljs-keyword">struct</span> node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>    new_node-&gt;data = new_drug;<br>    new_node-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (*head == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        *head = new_node;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">//将新节点插入到last_id所在的位置之后</span><br>        <span class="hljs-keyword">struct</span> node *current = *head;<br>        <span class="hljs-keyword">while</span> (current-&gt;data.id != last_id)<br>        &#123;<br>            current = current-&gt;next;<br>        &#125;<br>        new_node-&gt;next = current-&gt;next;<br>        current-&gt;next = new_node;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure> ### 统计药品 统计药品的功能是统计出当前库存中的药品的总数，总价值。</li><li>count.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_COUNT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_COUNT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../main.h&quot;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">countMedicine</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node * head)</span>;<br><span class="hljs-type">float</span> <span class="hljs-title function_">countTotalValue</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node* head)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_COUNT_H</span></span><br><br></code></pre></td></tr></table></figure></li><li>count.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">countMedicine</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node* head)</span> &#123;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>* <span class="hljs-title">p</span> =</span> head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        count++;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><span class="hljs-type">float</span> <span class="hljs-title function_">countTotalValue</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node* head)</span> &#123;<br>    <span class="hljs-type">float</span> totalValue = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>* <span class="hljs-title">p</span> =</span> head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        totalValue += (p-&gt;data.price * p-&gt;data.stock);<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> totalValue;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="单个节点输出">单个节点输出</h3><p>这个函数是为了方便输出单个节点的数据，因为在输出链表的时候，每个节点都要输出，所以我就把这个函数单独拿出来了。</p><p>请注意，这个函数式在log文件夹下面的 - log.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_LOG_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_LOG_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../main.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> drug d)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_LOG_H</span></span><br></code></pre></td></tr></table></figure></p><ul><li>log.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> drug d)</span> &#123;<br><span class="hljs-comment">//    printf(&quot;%-10d%-20s%-10d\n&quot;, d.id, d.name, d.stock);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ID: %d, Name: %s, Type: %s, Price: %.2f, Stock: %d, Production Date: %s, Expiration Date: %s, Manufacturer: %s\n&quot;</span>, d.id, d.name, d.type, d.price, d.stock, d.production_date, d.expiration_date, d.manufacturer);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="日期处理">日期处理</h3><p>这个函数是为了处理日期，因为我在输入药品的时候，日期是以字符串的形式输入的，所以我就写了这个函数，把字符串转换成日期。</p><p>这个功能因为跨平台的问题，可能不能很好的运行。此外，在Linux下可以使用<code>strptime()</code>这个函数来做日期的转换，但是在Windows下没有这个函数。</p><ul><li>date.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_DATE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_DATE_H</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">getOverDate</span><span class="hljs-params">(<span class="hljs-type">char</span>* productionDate, <span class="hljs-type">char</span> shelfLife_str)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_DATE_H</span></span><br></code></pre></td></tr></table></figure></li><li>date.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;time.h&gt;</span><br><br><span class="hljs-comment">// On Windows platform, the function strptime() from time.h is not supported, I found.</span><br><br><span class="hljs-type">char</span>* <span class="hljs-title function_">getOverDate</span><span class="hljs-params">(<span class="hljs-type">char</span>* productionDate, <span class="hljs-type">char</span>* shelfLife_str)</span> &#123;<br>    <span class="hljs-type">char</span>* temp= shelfLife_str;<br>    <span class="hljs-type">int</span> shelfLife = atoi(temp);<br>    <span class="hljs-comment">// 将生产日期字符串按照 &quot;-&quot; 分割为年、月、日三个字符串</span><br>    <span class="hljs-type">char</span>* year = strtok(productionDate, <span class="hljs-string">&quot;-&quot;</span>);<br>    <span class="hljs-type">char</span>* month = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;-&quot;</span>);<br>    <span class="hljs-type">char</span>* day = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;-&quot;</span>);<br><br>    <span class="hljs-comment">// 将年、月、日字符串转换为整型变量</span><br>    <span class="hljs-type">int</span> year_int = atoi(year);<br>    <span class="hljs-type">int</span> month_int = atoi(month);<br>    <span class="hljs-type">int</span> day_int = atoi(day);<br><br>    <span class="hljs-comment">// 计算过期日期的年、月、日</span><br>    year_int += (shelfLife / <span class="hljs-number">365</span>);<br>    shelfLife %= <span class="hljs-number">365</span>;<br>    month_int += (shelfLife / <span class="hljs-number">30</span>);<br>    day_int += (shelfLife % <span class="hljs-number">30</span>);<br>    <span class="hljs-keyword">if</span> (day_int &gt; <span class="hljs-number">30</span>) &#123;<br>        day_int -= <span class="hljs-number">30</span>;<br>        month_int++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (month_int &gt; <span class="hljs-number">12</span>) &#123;<br>        month_int -= <span class="hljs-number">12</span>;<br>        year_int++;<br>    &#125;<br><br>    <span class="hljs-comment">// 将过期日期的年、月、日转换为字符串</span><br>    <span class="hljs-type">char</span>* expirationDate = (<span class="hljs-type">char</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">11</span>);<br>    <span class="hljs-built_in">sprintf</span>(expirationDate, <span class="hljs-string">&quot;%04d-%02d-%02d&quot;</span>, year_int, month_int, day_int);<br><br>    <span class="hljs-keyword">return</span> expirationDate;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="功能整合">功能整合</h2><p>将上面的功能整合起来，就是我们的主函数了。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/count.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/search.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;log/log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;user/user.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/add.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/delete.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/modify.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/sort.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/insert.h&quot;</span></span><br><br><span class="hljs-type">char</span> config_path[<span class="hljs-number">100</span>] = <span class="hljs-string">&quot;../config/drugs.txt&quot;</span>;<br><br><span class="hljs-keyword">struct</span> node *<span class="hljs-title function_">read_from_file</span><span class="hljs-params">()</span><br>&#123;<br>    FILE *fp = fopen(config_path, <span class="hljs-string">&quot;r+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Cannot open file.\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">head</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">tail</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-type">char</span> line[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">while</span> (fgets(line, <span class="hljs-number">100</span>, fp) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drug</span> <span class="hljs-title">new_drug</span>;</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(line) == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">sscanf</span>(line, <span class="hljs-string">&quot;%d,%[^,],%[^,],%f,%d,%[^,],%[^,],%[^,]&quot;</span>, &amp;new_drug.id, new_drug.name,<br>               new_drug.type, &amp;new_drug.price, &amp;new_drug.stock, new_drug.production_date, new_drug.expiration_date, new_drug.manufacturer);<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> (<span class="hljs-keyword">struct</span> node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>        new_node-&gt;data = new_drug;<br>        new_node-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            head = new_node;<br>            tail = new_node;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            tail-&gt;next = new_node;<br>            tail = new_node;<br>        &#125;<br>    &#125;<br><br>    fclose(fp);<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_to_file</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head)</span><br>&#123;<br>    FILE *fp = fopen(config_path, <span class="hljs-string">&quot;w+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Cannot open file.\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">current</span> =</span> head;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%d,%s,%s,%.2f,%d,%s,%s,%s\n&quot;</span>, current-&gt;data.id, current-&gt;data.name,<br>                current-&gt;data.type, current-&gt;data.price, current-&gt;data.stock, current-&gt;data.production_date, current-&gt;data.expiration_date, current-&gt;data.manufacturer);<br>        current = current-&gt;next;<br>    &#125;<br><br>    fclose(fp);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> t;<br>    t = login();<br>    <span class="hljs-keyword">if</span> (t == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;you have entered the wrong password for three times, the program will exit.&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">head</span> =</span> read_from_file();<br>    <span class="hljs-type">int</span> option = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span> (option != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please select an option:\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1. Add a new drug\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2. Modify an existing drug\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3. Display drug list\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4. Delete a drug\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;5. Search\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;6. Sort\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;7. Statistics\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;8. insert\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0. Quit\n&quot;</span>);<br><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;option);<br><br>        <span class="hljs-keyword">if</span> (option == <span class="hljs-number">1</span>)<br>        &#123;<br>            add_drug(&amp;head);<br>            <span class="hljs-type">int</span> save_option = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Save changes to file?\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1. Yes\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2. No\n&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;save_option);<br><br>            <span class="hljs-keyword">if</span> (save_option == <span class="hljs-number">1</span>)<br>            &#123;<br>                save_to_file(head);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">2</span>)<br>        &#123;<br>            modify_drug(head);<br>            <span class="hljs-type">int</span> save_option = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Save changes to file?\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1. Yes\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2. No\n&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;save_option);<br><br>            <span class="hljs-keyword">if</span> (save_option == <span class="hljs-number">1</span>)<br>            &#123;<br>                save_to_file(head);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">3</span>)<br>        &#123;<br>            <span class="hljs-keyword">struct</span> node *current = head;<br>            <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>)<br>            &#123;<br>                print_drug(current-&gt;data);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>                current = current-&gt;next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">4</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> delete_id;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;delete_id);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, delete_id);<br>            delete_drug(&amp;head, delete_id);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">5</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> search_option = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Choose a search criteria:\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1. Simple search\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2. Complex search\n&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;search_option);<br>            <span class="hljs-keyword">if</span> (search_option == <span class="hljs-number">1</span>)<br>            &#123;<br>                search(head);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (search_option == <span class="hljs-number">2</span>)<br>            &#123;<br>                search_complex(head);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid option. Please try again.\n&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">6</span>)<br>        &#123;<br>            drug_sort(head);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">7</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;total:%d\n&quot;</span>, countMedicine(head));<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;total price:%.2f\n&quot;</span>, countTotalValue(head));<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">8</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> insert_id;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;insert_id);<br>            insert_drug(&amp;head, insert_id);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Bye!\n&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid option. Please try again.\n&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    save_to_file(head);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></p><h2 id="项目编译">项目编译</h2><h3 id="windows">Windows</h3><h4 id="clionvscodeothers">Clion/VScode/others</h4><p>使用自带的cmake工具或插件进行编译</p><h4 id="bash">bash</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> ./build<br>cmake .. -G <span class="hljs-string">&quot;MinGW Makefiles&quot;</span><br>cmake --build .<br></code></pre></td></tr></table></figure><h3 id="linuxmacos">Linux/MacOS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> ./build<br>cmake ..<br>make<br></code></pre></td></tr></table></figure><h3 id="github-actions">github actions</h3><p>在<code>.github/workflows</code>文件夹下创建文件<code>build.yml</code> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">on</span> <span class="hljs-string">Ubuntu</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br>  <span class="hljs-attr">pull_request:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">ref:</span> <span class="hljs-string">master</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Get</span> <span class="hljs-string">CMake</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">symbitic/install-cmake@master</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">build</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          mkdir build</span><br><span class="hljs-string">          cd ./build</span><br><span class="hljs-string">          cmake ..</span><br><span class="hljs-string">          make</span><br></code></pre></td></tr></table></figure> 然后上传到Github即可自动编译。如果你希望获取编译好的文件，可以在最后加上将编译好的文件push到master分支的操作。</p><h2 id="感谢">感谢</h2><p><strong>感谢JetBrains学生认证提供的Clion免费许可证</strong> <img src="https://t7.baidu.com/it/u=2893921812,2528969823&amp;fm=74&amp;app=80&amp;size=f256,256&amp;n=0&amp;f=JPEG&amp;fmt=auto?sec=1678122000&amp;t=dca9fd6eaa4d57f7f0c991def94b5c84" alt="JetBrains" /> <strong>感谢GitHub学生认证提供的copilot</strong> <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230305215914.png" alt="copilot" /> <strong>感谢openai的chatGPT</strong></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DALLE2笔记</title>
    <link href="/2023/02/09/DALLE2%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/02/09/DALLE2%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="dalle2笔记">DALLE2笔记</h1><iframe src="//player.bilibili.com/player.html?aid=770625648&amp;bvid=BV17r4y1u77B&amp;cid=766807720&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><h2 id="abstract">Abstract</h2><pre><code class=" mermaid">graph LR;文本--CLIP模型--&gt;文本特征;文本特征--prior生成图像特征--&gt;两阶段模型;两阶段模型--decoder--&gt;图像;文本--ground truth--&gt;两阶段模型;</code></pre><p>基于扩散模型的解码器能够通过给定信息的解码器，生成很多不一样的图片 ，语义信息和风格比较接近，只是细节不一样。</p><p>可以直接修改和编辑模型，是zero-shot的，不需要重新训练。</p><p>整体上Dalle2都是一个扩散模型 ## Introduction</p><p>扩散模型是一种概率分布模型，生成图片是从一个分布中采样，多样性很高，保真度比不过GAN。20年之后有一系列模型改进了这一点。这一系列工作采用了很多技巧，其中一个比较著名的是引导guideance technique，能够牺牲一部分多样性来达到更好的保真度。</p><p><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230209161230.png" /> 上半部分说的是CLIP，下半部分是DALLE2。</p><p>CLIP模型中文本和图像分别通过一个文本编码器和一个图像编码器，得到一个文本特征和一个图像特征。对应的文本特征和图像特征之间就是正样本，不对应的就是负样本。通过这种方式来做对比学习，把文本编码器和图像编码器都学的很好，文本和图像的特征就真的联系在了一起。CLIP模型训练好了之后，文本编码器和图像编码器就锁住了，在Dalle2中就不会再训练了。</p><p>两阶段训练方式最暴力的方式其实是中间有个大模型，中间去学一些融合的特征，直接生成就可以了。但如何像作者在摘要所说的，中间有一个显式的生成过程，先从文本生成文本特征，再生成图像特征再由图像特征生成图片效果就会好很多。</p><p>训练的时候，先用已有图像(CLIP模型中的图片)生成的图像特征作为ground truth去监督，也就是用文本特征来预测ground truth这个图像特征。推理的时候由文本特征就可以直接生成类似CLIP生成的图像特征。</p><h2 id="图像生成">图像生成</h2><h3 id="gan">GAN</h3><p><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230210171156.png" /> 训练两个网络，一个是生成器，一个是判别器。生成器的目标是生成一个和真实图片尽可能相似的图片，判别器的目标是判断一个图片是真实的还是生成的。两个网络相互竞争，最终生成器生成的图片和真实图片的分布越来越接近。</p><p>有一个缺点就是训练不够稳定，因为需要同时训练两个网络。此外多样性比较差。 ### auto-encoder</p><p><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230210171228.png" /> 给定一个输入x，过一个编码器，然后就能得到一个特征z(特征维度一般会小很多，所以管他叫bottleneck)，再过一个解码器，得到一个图像。训练时的目标函数就是尽可能重建原来输入x</p><h3 id="denoising-auto-encoder">denoising auto-encoder</h3><p><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230210171318.png" /> 先把原图进行一定的打乱，然后把扰乱之后的特征传给编码器，后续和auto-encoder一样。训练时的目标函数还是尽可能重建原来输入x</p><h3 id="varitional-auto-encoder">varitional auto-encoder</h3><p><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230210171503.png" /> 中间不在是学习一个特征，而是去学习了一个分布。作者假设了中间是一个高斯分布，就可以用均值和方差来表示。具体来说就是得到编码器出来的特征之后，在后面加一些fc层，预测一个均值和方差，得到对应的均值和方差之后，我们用公式<span class="math inline">\(z=u+\sigma\epsilon\)</span>采样一个z出来,然后给解码器。</p><p>预测的时候，我们可以把编码器去掉，直接用均值和方差来预测。</p><p>从数学角度讲，这个模型是一个概率模型，给定x得到z这一过程就是一个后验概率，学出来的distribution就是一个先验分布，给定z预测x就是likelihood,这里做的就是maximum likelihood。</p><p>图像多样性好得多</p><h3 id="vqvaevector-quantised-vae">VQVAE(vector quantised VAE)</h3><p><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230210171524.png" /> 将VAE做量化。之前的VAE不好把图片做大，分类也不是很好学，所以取而代之的是不做分布的预测，而是以codebook代替。cookbook可以理解成聚类的中心，cookbook大小一般是<span class="math inline">\(K*D\)</span>,<span class="math inline">\(K\)</span>的大小一般是8192，<span class="math inline">\(D\)</span>的大小一般是512或者768，意思是由8912个长度为D的向量。</p><p>输入x先经过一个编码器，得到一个特征图大小为<span class="math inline">\(h*w\)</span>,将特征图里的向量和cookbook里的特征做对比，看和哪个聚类中心最接近，然后把聚类中心的编码存到矩阵Z中，用矩阵z作为新的特征。</p><p>优化起来相对容易。</p><p>想做生成的话，就需要再训练一个prior网络.论文作者训练了一个pixelCNN，用来生成图片。</p><h3 id="vqvae2">VQVAE2</h3><p>模型变成了层级式的，加入了全局式的建模，加上了attention，表达能力增强。把pixelCNN换成了GPT.</p><h3 id="dall-e">DALL-E</h3><p><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230210171634.png" /> 文本先通过BPE编码，得到一个256维特征。还有一个图像，256<em>256,经过一个VQ-VAE(来自训练好的cookbook，直接拿过来用),得到图像特征32</em>32,维度下降了很多，一共有1024个token，将文本特征和图像特征连接起来，变成了一个1028的序列，将序列给GPT，训练GPT。</p><p>推理则是提供一个文本，得到文本特征，用GPT从文本特征徐策图片特征，用自回归的方式生成图片。生成出来的图片用CLIP排序，得到最好的图片。</p><h3 id="diffusion-model">Diffusion model</h3><p><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230209180240.png" /> 假设有一个<span class="math inline">\(x_0\)</span>，每次加入一个很小的正态分布噪声，加了很多次之后就会变成一个真正的正态分布的噪声，这就是diffusion的forward过程。</p><p>将过程反转，整个模型都是共享参数的。</p><p>diffusion model采取了一个比较常见的模型结构U-NET,先用一个编码器把图像一点一点压小，再用一个解码器一点点恢复回来，前后尺寸大小一样。中间加上shortcut。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230210172229.png" /></p><p>不足时训练比较贵，推理也比较慢</p><h3 id="ddpm">DDPM</h3><p>DDPM是对diffusion的改进，不再去预测图片，而是去预测添加的噪声，U-NET的参数除了图像，还加入了一个time embedding用来表示到了反向扩散第几步。</p><p>学习正态分布是只需要学习均值，方差设置成常数也可以表现得很好</p><h3 id="classifier-guidence-diffusion">classifier guidence diffusion</h3><p>反向扩散过程 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230209181540.png" /></p><p>训练同时训练一个图像分类器(在加了噪声的ImageNET上训练)，当有一个图片，直接扔给图片分类器，可以得到一个交叉熵损失函数，得到一个梯度，用梯度帮助图片生成(暗含了图片是否有物体)</p><h3 id="classifier-free-guidance">classifier-free guidance</h3><p>训练的时候生成了两个输出，一个是有条件时生成输出，一个是没有条件时生成输出。训练的时候随机去掉文本，知道有文本输出和无文本输出的差距，就可以从无条件输出得到有条件输出</p><h2 id="method">method</h2><p>数据集依然是图片文本对 ### decoder</p><p>用了CLIP guidence(这个guidence指的是在decoder的过程中，输入是t时刻的一个带噪声的图像，最终输出是一个图像)和classifier-free guidance，guidence信号要么来自CLIP，要么来自文本。训练的时候有10%的时间把CLIP特征设成0，有50%把文本随机丢掉。</p><p>用了级联式生成，训练过程中还加入了噪声。</p><h3 id="prior">prior</h3><ul><li>auto-regressive自回归</li><li>diffusion 扩散模型 不管是auto-regressive还是diffusion，都是用了classifier-free guidance</li></ul><p>auto-regressive效率太低</p><p>对于diffusion prior，作者训练了一个transformer decoder，输入输出是embedding,U-NET就不合适了。模型输入输入有文本，CLIP的文本特征，还有time step (步数的embedding)，还有加过噪声之后的图像特征，transformer本身的embedding(这个embedding被用来预测没有加过噪声的图像特征)。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>yolov5和yolov5-face环境搭建和常见踩坑</title>
    <link href="/2023/02/07/yolov5%E5%B8%B8%E8%A7%81%E8%B8%A9%E5%9D%91/"/>
    <url>/2023/02/07/yolov5%E5%B8%B8%E8%A7%81%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h2 id="yolov5环境搭建">yolov5环境搭建</h2><p>在随便哪新建一个<code>requirements.txt</code>文件 内容是 <figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs txt"># YOLOv5 requirements<br># Usage: pip install -r requirements.txt<br><br># Base ----------------------------------------<br>matplotlib&gt;=3.2.2<br>numpy&gt;=1.18.5<br>opencv-python&gt;=4.1.1<br>Pillow&gt;=7.1.2<br>PyYAML&gt;=5.3.1<br>requests&gt;=2.23.0<br>scipy&gt;=1.4.1<br>torch&gt;=1.7.0<br>torchvision&gt;=0.8.1<br>tqdm&gt;=4.64.0<br>protobuf&lt;=3.20.1  # https://github.com/ultralytics/yolov5/issues/8012<br><br># Logging -------------------------------------<br>tensorboard&gt;=2.4.1<br># wandb<br># clearml<br><br># Plotting ------------------------------------<br>pandas&gt;=1.1.4<br>seaborn&gt;=0.11.0<br><br># Export --------------------------------------<br># coremltools&gt;=5.2  # CoreML export<br># onnx&gt;=1.9.0  # ONNX export<br># onnx-simplifier&gt;=0.4.1  # ONNX simplifier<br># nvidia-pyindex  # TensorRT export<br># nvidia-tensorrt  # TensorRT export<br># scikit-learn==0.19.2  # CoreML quantization<br># tensorflow&gt;=2.4.1  # TFLite export (or tensorflow-cpu, tensorflow-aarch64)<br># tensorflowjs&gt;=3.9.0  # TF.js export<br># openvino-dev  # OpenVINO export<br><br># Extras --------------------------------------<br>ipython  # interactive notebook<br>psutil  # system utilization<br>thop&gt;=0.1.1  # FLOPs computation<br># albumentations&gt;=1.0.3<br># pycocotools&gt;=2.0  # COCO mAP<br># roboflow<br><br></code></pre></td></tr></table></figure> 然后在当前目录下打开命令行，创建一个环境 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n yolov5 python<br></code></pre></td></tr></table></figure> 创建好环境之后，激活环境 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate yolov5<br></code></pre></td></tr></table></figure> 然后安装依赖 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -r requirements.txt<br></code></pre></td></tr></table></figure> 安装完成后代码就可以运行了</p><h2 id="划分数据集">划分数据集</h2><p>新建一个<code>split_train_val.py</code>文件，内容如下 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">split_dataset</span>(<span class="hljs-params">src_folder, dest_folder, ratio</span>):<br>    images_folder = os.path.join(src_folder, <span class="hljs-string">&quot;images&quot;</span>)<br>    labels_folder = os.path.join(src_folder, <span class="hljs-string">&quot;labels&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(images_folder) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> os.path.exists(labels_folder):<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Source folder doesn&#x27;t exist.&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(dest_folder):<br>        os.makedirs(dest_folder)<br><br>    train_folder = os.path.join(dest_folder, <span class="hljs-string">&quot;train&quot;</span>)<br>    val_folder = os.path.join(dest_folder, <span class="hljs-string">&quot;val&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(train_folder):<br>        os.makedirs(train_folder)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(val_folder):<br>        os.makedirs(val_folder)<br><br>    train_images_folder = os.path.join(train_folder, <span class="hljs-string">&quot;images&quot;</span>)<br>    train_labels_folder = os.path.join(train_folder, <span class="hljs-string">&quot;labels&quot;</span>)<br>    val_images_folder = os.path.join(val_folder, <span class="hljs-string">&quot;images&quot;</span>)<br>    val_labels_folder = os.path.join(val_folder, <span class="hljs-string">&quot;labels&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(train_images_folder):<br>        os.makedirs(train_images_folder)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(train_labels_folder):<br>        os.makedirs(train_labels_folder)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(val_images_folder):<br>        os.makedirs(val_images_folder)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(val_labels_folder):<br>        os.makedirs(val_labels_folder)<br><br>    images = [f <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> os.listdir(images_folder) <span class="hljs-keyword">if</span> f.endswith(<span class="hljs-string">&quot;.bmp&quot;</span>) ]<br>    num_images = <span class="hljs-built_in">len</span>(images)<br><br>    <span class="hljs-keyword">for</span> i, image <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(images):<br>        image_path = os.path.join(images_folder, image)<br>        label_path = os.path.join(labels_folder, os.path.splitext(image)[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;.txt&quot;</span>)<br>        <span class="hljs-keyword">if</span> random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>) &lt; ratio:<br>            dest_images_folder = train_images_folder<br>            dest_labels_folder = train_labels_folder<br>        <span class="hljs-keyword">else</span>:<br>            dest_images_folder = val_images_folder<br>            dest_labels_folder = val_labels_folder<br>        shutil.copy2(image_path, os.path.join(dest_images_folder, image))<br>        shutil.copy2(label_path, os.path.join(dest_labels_folder, os.path.splitext(image)[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;.txt&quot;</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Copied &#123;&#125;/&#123;&#125; images&quot;</span>.<span class="hljs-built_in">format</span>(i + <span class="hljs-number">1</span>, num_images))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    src_folder = <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment"># 原始数据集的路径</span><br>    dest_folder = <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment"># 分割后的数据集的路径</span><br>    ratio = <span class="hljs-number">0.8</span>  <span class="hljs-comment"># 将 80% 的图片分到训练集，20% 的图片分到验证集</span><br><br>    split_dataset(src_folder, dest_folder, ratio)<br><br></code></pre></td></tr></table></figure> 划分训练集和验证集，运行<code>split_train_val.py</code>，传入刚才保存的文件夹路径，会将图片和标签划分到一个新的文件夹 <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> data<br><span class="hljs-bullet">    -</span> train<br><span class="hljs-bullet">        -</span> images<br><span class="hljs-bullet">        -</span> labels<br><span class="hljs-bullet">    -</span> val<br><span class="hljs-bullet">        -</span> images<br><span class="hljs-bullet">        -</span> labels<br></code></pre></td></tr></table></figure></p><h2 id="yolov5常见踩坑">yolov5常见踩坑</h2><h3 id="not-enough-values-to-unpack-expected-2-got-0">not enough values to unpack (expected 2, got 0)</h3><p>如图 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/93bbd4d663cd589dfdd522e0479bb46.png" /></p><p>我们需要检查一下我们标记的txt文件 举个例子</p><p>这是我们需要的标记格式</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">0 0.5 0.5 0.5 0.5<br></code></pre></td></tr></table></figure><p>这是错误的标注格式 <figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">0 0.5 0.5 0.5 0.5<br><br></code></pre></td></tr></table></figure></p><p>问题就出在了最后一行的<code>\n</code>上，我们删除最后一行就可以了。我用chatGPT写了一个函数来做这件事 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 去除txt文件中的空行</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_empty_lines</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        lines = f.readlines()<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(line)&gt;<span class="hljs-number">3</span>:<br>                f.write(line)<br></code></pre></td></tr></table></figure></p><h3 id="assertionerror-no-results.txt-files-found-in-contentyolov5-facerunstrainexp-nothing-to-plot.">AssertionError: No results.txt files found in /content/yolov5-face/runs/train/exp, nothing to plot.</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata">Traceback (most recent call last):<br><span class="hljs-keyword">File</span> <span class="hljs-string">&quot;train.py&quot;</span>, <span class="hljs-keyword">line</span> 513, <span class="hljs-keyword">in</span><br>train(hyp, opt, device, tb_writer, wandb)<br><span class="hljs-keyword">File</span> <span class="hljs-string">&quot;train.py&quot;</span>, <span class="hljs-keyword">line</span> 400, <span class="hljs-keyword">in</span> train<br>plot_results(save_dir=save_dir) # <span class="hljs-keyword">save</span> <span class="hljs-keyword">as</span> results.png<br><span class="hljs-keyword">File</span> <span class="hljs-string">&quot;/content/yolov5-face/utils/plots.py&quot;</span>, <span class="hljs-keyword">line</span> 393, <span class="hljs-keyword">in</span> plot_results<br><span class="hljs-keyword">assert</span> len(files), &#x27;<span class="hljs-keyword">No</span> results.txt files found <span class="hljs-keyword">in</span> %s, nothing to <span class="hljs-keyword">plot</span>.&#x27; % os.path.abspath(save_dir)<br>AssertionError: <span class="hljs-keyword">No</span> results.txt files found <span class="hljs-keyword">in</span> /content/yolov5-face/runs/train/exp, nothing to <span class="hljs-keyword">plot</span>.<br></code></pre></td></tr></table></figure><p>出现这个问题的原因是此代码块未运行 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Results</span><br>       <span class="hljs-keyword">if</span> ckpt.get(<span class="hljs-string">&#x27;training_results&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>           <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(results_file, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>               file.write(ckpt[<span class="hljs-string">&#x27;training_results&#x27;</span>])  <span class="hljs-comment"># write results.txt</span><br></code></pre></td></tr></table></figure> 如果你只使用单 GPU 并设置 epoch &lt;20，这个块将不起作用。解决方案是设置epoch&gt;20。</p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>copliot才是代码开发神器</title>
    <link href="/2023/02/04/copliot%E6%89%8D%E6%98%AF%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E7%A5%9E%E5%99%A8/"/>
    <url>/2023/02/04/copliot%E6%89%8D%E6%98%AF%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E7%A5%9E%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="copliot才是代码开发神器">copliot才是代码开发神器</h1><p>本文使用copilot和chatGPT辅助完成</p><p>copilot是微软的AI代码生成器，可以帮助我们快速完成代码编写(这句copilot简介是copilot写的)。在openai的chatGPT出现后，copilot的风头有所下降，直到刚才…… 几分钟前我在写我的博客<a href="https://studyinglover.com/2023/02/04/ThreeJS%E5%AE%9E%E7%8E%B0%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E8%BD%AC3d%E5%9D%90%E6%A0%87/">ThreeJS实现屏幕坐标转3d坐标</a>时，原本的第一段代码是这样的： <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">get3DPosition</span>(<span class="hljs-params">x, y, camera, scene, hyper_z</span>) &#123;<br>        <span class="hljs-keyword">var</span> vector = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector3</span>();<br>        <span class="hljs-comment">// calculate mouse position in normalized device coordinates</span><br>        <span class="hljs-comment">// (-1 to +1) for both components</span><br>        vector.<span class="hljs-property">x</span> = (x / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>        vector.<span class="hljs-property">y</span> = - (y / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        vector.<span class="hljs-property">z</span> = hyper_z;<br><br>        <span class="hljs-comment">// unproject the vector</span><br>        vector.<span class="hljs-title function_">unproject</span>(camera);<br><br>        <span class="hljs-comment">// calculate the ray from the camera to the vector</span><br>        <span class="hljs-keyword">var</span> ray = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Raycaster</span>(camera.<span class="hljs-property">position</span>, vector.<span class="hljs-title function_">sub</span>(camera.<span class="hljs-property">position</span>).<span class="hljs-title function_">normalize</span>());<br><br>        <span class="hljs-comment">// check for intersection with objects in the scene</span><br>        <span class="hljs-keyword">var</span> intersects = ray.<span class="hljs-title function_">intersectObjects</span>(scene.<span class="hljs-property">children</span>);<br>        <span class="hljs-keyword">if</span> (intersects.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> intersects[<span class="hljs-number">0</span>].<span class="hljs-property">point</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure> 正当我写完 &gt; 官方为我们提供了一个接口<code>vector.unproject(camera)</code> 打算粘贴上我的代码时，copilot突然给了我一大段代码提示，并给出了我一段代码</p><p>emmmmmmmmmm,当时的我是有点懵的，我回去看了看当时这段代码的目的，发现这段代码的目的(实不相瞒写到这copilot又给我一段提示(实不相瞒写到这copilot又给我一段提示(......)))先获取点击的坐标点，再获取我点击的3d物体的名称。所以前半部分没问题，真正要改的是后部分。更改后的代码如下： <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">screenToWorld</span>(<span class="hljs-params">screenX, screenY, camera，hyper_z</span>) &#123;<br>    <span class="hljs-keyword">const</span> vector = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector3</span>();<br>    vector.<span class="hljs-title function_">set</span>(<br>        (screenX / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>,<br>        -(screenY / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>,<br>        hyper_z<br>    );<br>    vector.<span class="hljs-title function_">unproject</span>(camera);<br>    vector.<span class="hljs-title function_">applyMatrix4</span>(camera.<span class="hljs-property">matrixWorldInverse</span>);<br>    <span class="hljs-keyword">return</span> vector;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>你以为结束了吗，当我继续往下写我的博客，写道 &gt; 这里的<code>hyper_z</code>网上很多教程认为是写0.5,</p><p>copilot又给我一段代码提示，，这次的提示是这样的 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230204214713.png" /> 还好还好，这次代码的目的没搞错，只是整个代码都可能写错了而已……</p><p>经过一番思考，我决定继续按照原先的代码写，因为我已经尝试了代码的效果，勉强可以达到我们的要求。</p><p>最后，我想说的是，copilot真的是一个神器，但是要注意，它只是一个辅助工具，不要完全依赖它，因为它可能会给你一些错误的代码提示，这时候你就要自己去思考了。(这段话还是copilot写的)</p><p>总而言之，Copilot是代码开发领域中高效且创新的工具。它具有易于使用的界面和先进的功能，已被证明是开发人员的游戏规则改变者，并被广泛认为是最终的代码开发工具。无论您是经验丰富的程序员还是刚刚入门，Copilot都提供了您需要的工具，可以比以往更快、更高效地完成工作。(这段话是chatGPT写的)</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Microsoft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThreeJS实现屏幕坐标转3d坐标</title>
    <link href="/2023/02/04/ThreeJS%E5%AE%9E%E7%8E%B0%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E8%BD%AC3d%E5%9D%90%E6%A0%87/"/>
    <url>/2023/02/04/ThreeJS%E5%AE%9E%E7%8E%B0%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E8%BD%AC3d%E5%9D%90%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<h1 id="threejs实现屏幕坐标转3d坐标">ThreeJS实现屏幕坐标转3d坐标</h1><p>本文使用chatGPT辅助完成</p><p>在虚拟世界中，3D坐标与屏幕坐标之间的转换是一个重要的问题。使用ThreeJS开发3D场景时，经常需要将屏幕坐标转换为3D坐标。在本文中，我们将介绍如何使用ThreeJS实现屏幕坐标转3D坐标的两种方法</p><h2 id="根据相机的投影矩阵和射线拾取">根据相机的投影矩阵和射线拾取</h2><p>在我的笔记<a href="https://studyinglover.com/2022/12/29/%E6%91%84%E5%83%8F%E6%9C%BA%E6%A8%A1%E5%9E%8B/">摄像机模型</a>中详细推导了相机的投影矩阵。</p><p>在ThreeJS中，相机的投影矩阵是一个4x4的矩阵，它将3D坐标转换为屏幕坐标。我们可以使用这个矩阵将屏幕坐标转换为3D坐标。 官方为我们提供了一个接口<code>vector.unproject(camera)</code>,它可以将屏幕坐标转换为3D坐标。但是这个接口只能将屏幕坐标转换为相机坐标系下的3D坐标，如果我们需要将屏幕坐标转换为世界坐标系下的3D坐标，我们需要使用<code>vector.applyMatrix4(camera.matrixWorldInverse)</code>将相机坐标系下的3D坐标转换为世界坐标系下的3D坐标。(这里代码本来不是这么写的，但是copilot给了我好多提示，我就照着他的提示改了改，如果你发现代码有问题，问问chatGPT吧)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">screenToWorld</span>(<span class="hljs-params">screenX, screenY, camera，hyper_z</span>) &#123;<br>    <span class="hljs-keyword">const</span> vector = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector3</span>();<br>    vector.<span class="hljs-title function_">set</span>(<br>        (screenX / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>,<br>        -(screenY / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>,<br>        hyper_z<br>    );<br>    vector.<span class="hljs-title function_">unproject</span>(camera);<br>    vector.<span class="hljs-title function_">applyMatrix4</span>(camera.<span class="hljs-property">matrixWorldInverse</span>);<br>    <span class="hljs-keyword">return</span> vector;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>hyper_z</code>网上很多教程认为是写0.5,但是我实际试了一下，发现效果很差，就把他改成了一个超参数。后来在一位不能透露姓名的大佬的帮助下，得知这个参数的值应该写成1。我试了下，勉强可以得到预期的效果</p><h2 id="通过深度图采样shader改深度缓冲">通过深度图采样，shader改深度缓冲</h2><p>这种方法是通过深度图采样，shader改深度缓冲，然后再通过深度缓冲得到3D坐标。这种方法的优点是可以得到更精确的3D坐标，但是缺点是需要使用shader，而且需要修改深度缓冲，可能会影响性能。</p><p>感谢chatGPT，我只需要把我需要的内容告诉他，他就会给我写一个完整的代码。 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">convert2Dto3D</span>(<span class="hljs-params">mouseX, mouseY, camera, width, height, scene</span>) &#123;<br>        <span class="hljs-comment">// 构建纹理</span><br>        <span class="hljs-keyword">var</span> depthTarget = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">WebGLRenderTarget</span>(width, height);<br>        depthTarget.<span class="hljs-property">texture</span>.<span class="hljs-property">minFilter</span> = <span class="hljs-variable constant_">THREE</span>.<span class="hljs-property">LinearFilter</span>;<br><br>        <span class="hljs-comment">// 渲染深度图</span><br>        renderer.<span class="hljs-title function_">render</span>(scene, camera, depthTarget);<br><br>        <span class="hljs-comment">// 创建着色器</span><br>        <span class="hljs-keyword">var</span> material = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">ShaderMaterial</span>(&#123;<br>            <span class="hljs-attr">uniforms</span>: &#123;<br>                <span class="hljs-attr">mouse</span>: &#123; <span class="hljs-attr">value</span>: <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector2</span>(mouseX, mouseY) &#125;,<br>                <span class="hljs-attr">depthMap</span>: &#123; <span class="hljs-attr">value</span>: depthTarget.<span class="hljs-property">texture</span> &#125;,<br>                <span class="hljs-attr">projectionMatrix</span>: &#123; <span class="hljs-attr">value</span>: camera.<span class="hljs-property">projectionMatrix</span> &#125;,<br>                <span class="hljs-attr">viewMatrix</span>: &#123; <span class="hljs-attr">value</span>: camera.<span class="hljs-property">matrixWorldInverse</span> &#125;<br>            &#125;,<br>            <span class="hljs-attr">vertexShader</span>: <span class="hljs-string">`</span><br><span class="hljs-string">                uniform vec2 mouse;</span><br><span class="hljs-string">                uniform mat4 projectionMatrix;</span><br><span class="hljs-string">                uniform mat4 viewMatrix;</span><br><span class="hljs-string">                uniform sampler2D depthMap;</span><br><span class="hljs-string">                varying vec4 pos;</span><br><span class="hljs-string">                void main() &#123;</span><br><span class="hljs-string">                    pos = vec4(position, 1.0);</span><br><span class="hljs-string">                    gl_Position = projectionMatrix * viewMatrix * pos;</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            `</span>,<br>            <span class="hljs-attr">fragmentShader</span>: <span class="hljs-string">`</span><br><span class="hljs-string">                uniform vec2 mouse;</span><br><span class="hljs-string">                uniform sampler2D depthMap;</span><br><span class="hljs-string">                varying vec4 pos;</span><br><span class="hljs-string">                void main() &#123;</span><br><span class="hljs-string">                    float depth = texture2D(depthMap, mouse).r;</span><br><span class="hljs-string">                    vec4 viewPos = vec4(mouse * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);</span><br><span class="hljs-string">                    vec4 worldPos = viewMatrix * viewPos;</span><br><span class="hljs-string">                    worldPos /= worldPos.w;</span><br><span class="hljs-string">                    gl_FragColor = vec4(worldPos.xyz, 1.0);</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            `</span><br>        &#125;);<br><br>        <span class="hljs-comment">// 创建一个平面作为渲染目标</span><br>        <span class="hljs-keyword">var</span> plane = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">PlaneBufferGeometry</span>(width, height);<br>        <span class="hljs-keyword">var</span> mesh = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Mesh</span>(plane, material);<br>        scene.<span class="hljs-title function_">add</span>(mesh);<br><br>        <span class="hljs-comment">// 渲染一次着色器并获取结果</span><br>        renderer.<span class="hljs-title function_">render</span>(scene, camera);<br>        <span class="hljs-keyword">var</span> pixelBuffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-number">4</span>);<br>        renderer.<span class="hljs-title function_">readRenderTargetPixels</span>(depthTarget, mouseX, height - mouseY, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, pixelBuffer);<br>        <span class="hljs-keyword">var</span> worldPos = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector3</span>(<br>            (pixelBuffer[<span class="hljs-number">0</span>] / <span class="hljs-number">255</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>,<br>            (pixelBuffer[<span class="hljs-number">1</span>] / <span class="hljs-number">255</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>,<br>            (pixelBuffer[<span class="hljs-number">2</span>] / <span class="hljs-number">255</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span><br>        );<br>        worldPos.<span class="hljs-title function_">applyMatrix4</span>(camera.<span class="hljs-property">matrixWorldInverse</span>);<br>        scene.<span class="hljs-title function_">remove</span>(mesh);<br>        <span class="hljs-keyword">return</span> worldPos;<br>    &#125;,<br><br>    <span class="hljs-comment">//获取触摸点的坐标并转换为ThreeJS中的坐标</span><br>    <span class="hljs-attr">touch_crash_detect</span>: <span class="hljs-keyword">function</span> <span class="hljs-title function_">touch_crash_detect</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchmove&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">// screen3D_to_3DCoord(event.touches[0].clientX, event.touches[0].clientY,camera, window.innerWidth, window.innerHeight);</span><br>            <span class="hljs-keyword">let</span> pos = space_pos_convert.<span class="hljs-title function_">get3DPosition</span>(event.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientX</span>, event.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientY</span>, camera, scene, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (pos.<span class="hljs-property">y</span> != <span class="hljs-number">0</span>) &#123;<br>                pos.<span class="hljs-property">y</span> = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> pos;<br>            <span class="hljs-comment">// playerMesh.position.set(pos.x, pos.y, pos.z);</span><br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThreeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在fluid主题中加入Google广告</title>
    <link href="/2023/01/27/%E5%9C%A8fluid%E4%B8%BB%E9%A2%98%E4%B8%AD%E5%8A%A0%E5%85%A5Google%E5%B9%BF%E5%91%8A/"/>
    <url>/2023/01/27/%E5%9C%A8fluid%E4%B8%BB%E9%A2%98%E4%B8%AD%E5%8A%A0%E5%85%A5Google%E5%B9%BF%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="在fluid主题中加入google广告">在fluid主题中加入Google广告</h1><p>在fluid的<a href="https://hexo.fluid-dev.com/posts/fluid-adsense/">官方文档</a>中，提供了在fluid主题中加入Google广告的方法，但是其中提到的参数<code>data-ad-slot</code>并没有说清怎么获取，所以我决定详细写一下如何获取。</p><h2 id="注册google-adsense">注册Google Adsense</h2><p>访问<a href="https://www.google.com/adsense/start/">Google Adsense</a>，注册一个账号，然后点击右侧的广告。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230127100353.png" /></p><h2 id="创建一个广告单元">创建一个广告单元</h2><p>选择上方的按广告单元 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230127100502.png" /></p><p>这里我选择了推荐的展示广告 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230127100605.png" /></p><p>接着自定义广告单元，自定义广告 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230127100808.png" /></p><p>接着就能看到广告代码了，其中就有我们需要的<code>data-ad-client</code>和<code>data-ad-slot</code>参数</p><p>例如，我的代码是这样的红框中的就是我们需要的参数 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230127101239.png" /></p><h2 id="嵌入到fluid主题中">嵌入到fluid主题中</h2><p>在博客根目录下找到 scripts 文件夹（不存在就创建一个），进入后任意创建一个 js 文件，比如 <code>inject.js</code>，复制以下内容： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;theme_inject&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">injects</span>) &#123;<br>injects.<span class="hljs-property">bodyEnd</span>.<span class="hljs-title function_">raw</span>(<span class="hljs-string">&#x27;adsense&#x27;</span>, <span class="hljs-string">&#x27;&lt;script async src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-xxxxxx&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;&#x27;</span>);<br>injects.<span class="hljs-property">head</span>.<span class="hljs-title function_">raw</span>(<span class="hljs-string">&#x27;adsense&#x27;</span>, <span class="hljs-string">&#x27;&lt;style&gt;ins.adsbygoogle[data-ad-status=&quot;unfilled&quot;] &#123; display: none !important; &#125;&lt;/style&gt;&#x27;</span>);<br>injects.<span class="hljs-property">postLeft</span>.<span class="hljs-title function_">raw</span>(<span class="hljs-string">&#x27;adsense&#x27;</span>, <span class="hljs-string">&#x27;&lt;aside class=&quot;sidebar d-none d-xl-block&quot; style=&quot;margin-right:-1rem;z-index:-1&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:flex;justify-content:center;min-width:160px;max-width:300px;width:100%;height:600px;position:sticky;top:2rem&quot; data-ad-client=&quot;ca-pub-xxxxxx&quot; data-ad-slot=&quot;yyyyyy&quot;&gt;&lt;/ins&gt;&lt;script&gt; (adsbygoogle = window.adsbygoogle || []).push(&#123;&#125;); &lt;/script&gt;&lt;/aside&gt;&#x27;</span>);<br>injects.<span class="hljs-property">postCopyright</span>.<span class="hljs-title function_">raw</span>(<span class="hljs-string">&#x27;adsense&#x27;</span>, <span class="hljs-string">&#x27;&lt;div style=&quot;width:100%;display:flex;justify-content:center;margin-bottom:1.5rem&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:flex;justify-content:center;max-width:845px;width:100%;height:90px&quot; data-ad-client=&quot;ca-pub-xxxxxx&quot; data-ad-slot=&quot;yyyyyy&quot;&gt;&lt;/ins&gt;&lt;script&gt; (adsbygoogle = window.adsbygoogle || []).push(&#123;&#125;); &lt;/script&gt;&lt;/div&gt;&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure> 复制之后，把其中 <code>ca-pub-xxxxxx</code> 和 <code>data-ad-slot="yyyyyy"</code> 换成我们上面获取到的参数即可。</p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>在网页或博客中嵌入ppt</title>
    <link href="/2023/01/26/%E5%9C%A8%E7%BD%91%E9%A1%B5%E6%88%96%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%B5%8C%E5%85%A5ppt/"/>
    <url>/2023/01/26/%E5%9C%A8%E7%BD%91%E9%A1%B5%E6%88%96%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%B5%8C%E5%85%A5ppt/</url>
    
    <content type="html"><![CDATA[<p>当我们想要与他人共享ppt时，除了传统的展示方式外，还将其保存到 OneDrive，然后就可以将其嵌入到网页或博客中。</p><p>嵌入ppt的代码<strong>必须</strong>从PowerPoint <strong>网页版</strong> 获取。</p><p>网页版地址为https://office.live.com/start/PowerPoint.aspx</p><p>在网页版打开ppt后，点击右上角的文件按钮 <img src="https://cdn.jsdelivr.net/gh//StudyingLover/anything/20230126203458.png" /></p><p>选择共享，然后点击嵌入 <img src="https://cdn.jsdelivr.net/gh//StudyingLover/anything/20230126203758.png" /></p><p>可以自由调整大小，然后点击复制，插入你想插入位置即可 <img src="https://cdn.jsdelivr.net/gh//StudyingLover/anything/20230126203942.png" /></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Microsoft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsdelivr加速Github文件</title>
    <link href="/2023/01/20/jsdelivr%E5%8A%A0%E9%80%9FGithub%E6%96%87%E4%BB%B6/"/>
    <url>/2023/01/20/jsdelivr%E5%8A%A0%E9%80%9FGithub%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>假设GitHub路径为<code>https://github.com/username/repo-name/path/to/file</code> ,用jsdelivr可以加速或者在html中引用，路径为<code>https://cdn.jsdelivr.net/gh/username/repo-name/path/to/file</code></p><p>这里实现了一个简单的链接转换函数，可以将GitHub路径转换为jsdelivr路径 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_first_occurrence</span>(<span class="hljs-params">string, substring</span>):<br>    <span class="hljs-keyword">return</span> string.find(substring)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gh_path2jsdelivr</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-keyword">if</span>(find_first_occurrence(path,<span class="hljs-string">&quot;/blob/&quot;</span>) != -<span class="hljs-number">1</span>):<br>        path = path.replace(<span class="hljs-string">&quot;/blob/&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>    <span class="hljs-keyword">if</span>(find_first_occurrence(path,<span class="hljs-string">&quot;/main/&quot;</span>) != -<span class="hljs-number">1</span>):<br>        path = path.replace(<span class="hljs-string">&quot;/main/&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>    <span class="hljs-keyword">if</span>(find_first_occurrence(path,<span class="hljs-string">&quot;/master/&quot;</span>) != -<span class="hljs-number">1</span>):<br>        path = path.replace(<span class="hljs-string">&quot;/master/&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>    <span class="hljs-keyword">return</span> path.replace(<span class="hljs-string">&quot;github.com&quot;</span>, <span class="hljs-string">&quot;cdn.jsdelivr.net/gh&quot;</span>, <span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(gh_path2jsdelivr(<span class="hljs-string">&quot;&quot;</span>))<br><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ThreeJS导入失败</title>
    <link href="/2023/01/13/ThreeJS%E5%AF%BC%E5%85%A5%E5%A4%B1%E8%B4%A5/"/>
    <url>/2023/01/13/ThreeJS%E5%AF%BC%E5%85%A5%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-index.html </span><br><span class="hljs-deletion">-src.js</span><br><span class="hljs-deletion">-node_modules</span><br> -three<br>  -...<br></code></pre></td></tr></table></figure><p>在<code>src.js</code> 中用如下方式导入ThreeJS <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> THREE <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;three&#x27;</span>;<br></code></pre></td></tr></table></figure> <code>index.html</code> body如下 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/src/day01_a.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure> 出现报错 <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Uncaught TypeError: Failed <span class="hljs-built_in">to</span> <span class="hljs-built_in">resolve</span> module specifier <span class="hljs-string">&quot;three&quot;</span>. Relative references must <span class="hljs-built_in">start</span> <span class="hljs-keyword">with</span> either <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;./&quot;</span>, <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;../&quot;</span>.<br></code></pre></td></tr></table></figure> <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230103172514.png" alt="image.png" /> ## 解决方案 stackoverflow给出了解决方案https://stackoverflow.com/questions/65697410/not-using-node-js-uncaught-typeerror-failed-to-resolve-module-specifier-thre</p><figure><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230103172625.png" alt="" /><figcaption>image.png</figcaption></figure><p>删除<code>src.js</code>的导入，将<code>index.html</code> body改为 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/node_modules/three/build/three.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/src/day01_a.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThreeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>摄像机模型</title>
    <link href="/2022/12/29/%E6%91%84%E5%83%8F%E6%9C%BA%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/12/29/%E6%91%84%E5%83%8F%E6%9C%BA%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="摄像机模型">摄像机模型</h1><p>本文是鲁鹏老师机器视觉课程的笔记</p><h2 id="针孔模型与透镜">针孔模型与透镜</h2><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222201922.png" alt="" /><figcaption>image.png</figcaption></figure><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222201951.png" alt="" /><figcaption>image.png</figcaption></figure><p>虚拟像平面是倒着的</p><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222202148.png" alt="" /><figcaption>image.png</figcaption></figure><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222202224.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\(\dfrac{y&#39;}{f}=\dfrac{y}{z}\quad\implies y&#39;=f\dfrac{y}{z}\)</span></p><p><span class="math inline">\(\dfrac{x&#39;}{f}=\dfrac{x}{z}\quad\implies x&#39;=f\dfrac{x}{z}\)</span> <span class="math inline">\(P=\begin{bmatrix}x\\ y\\ z\end{bmatrix}\to P&#39;=\begin{bmatrix}x&#39;\\ y&#39;\end{bmatrix}\quad\quad\)</span></p><p><span class="math inline">\(\begin{cases}x&#39;=f\dfrac{x}{Z}\\ y&#39;=f\dfrac{y}{Z}\end{cases}\)</span></p><h3 id="光圈尺寸">光圈尺寸</h3><p>光圈偏大会导致场景模糊</p><p>光圈偏小会场景清晰，但偏暗 <img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222203219.png" alt="image.png" /></p><p><strong>增加透镜</strong> - 透镜将多条光线聚焦到胶片上，增加了照片的亮度： - 所有平行于光轴的光线都会会聚到焦点，焦点到透镜中心的距离称为焦距 - 穿过中心的光线的方向不发生改变</p><p><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222203452.png" alt="image.png" /> 根据折射定律： <span class="math inline">\(f=\frac{ {R} }{ {2}({n}-1)}\)</span> ,<span class="math inline">\(R\)</span> 是透镜球面半径，<span class="math inline">\(n\)</span>是透镜折射系数</p><p><span class="math inline">\(z&#39;=f+z_0\quad\begin{cases}x&#39;=z&#39;\dfrac{x}{z}\\ y&#39;=z&#39;\dfrac{y}{z}\end{cases}\)</span></p><p>要是透镜不合适，则会发生失焦 <img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222203756.png" alt="image.png" /></p><p>透镜将光线聚焦到胶片上 - 物体“聚焦”有特定距离 - 景深</p><h3 id="径向畸变">径向畸变</h3><p>图像中所成的像发生形变</p><p>径向畸变:图像像素点以畸变中心为中心点,沿着径向产生的位置偏差,从而导致</p><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222204142.png" alt="" /><figcaption>image.png</figcaption></figure><p>枕形畸变：畸变像点相对于理想像点沿径向向外偏移,远离中心 桶形畸变：畸变像点相对于理想点沿径向向中心靠拢</p><h2 id="摄像机几何">摄像机几何</h2><h3 id="齐次坐标">齐次坐标</h3><p><span class="math inline">\(E\to H\)</span> 图像点的齐次坐标<span class="math inline">\(\text{}(x,y)\Rightarrow\left[\begin{array}{c}x\\ y\\ 1\end{array}\right]\)</span></p><p>空间点的齐次坐标<span class="math inline">\((x,y,z)\Rightarrow\left[\begin{array}{c}x\\ y\\ z\\ 1\end{array}\right]\)</span></p><p><span class="math inline">\(H \to E\)</span> <span class="math inline">\(\left[\begin{array}{c}x\\ y\\ w\end{array}\right]\Rightarrow\left(x/w,y/w\right)\)</span></p><p><span class="math inline">\(\left[\begin{array}{c}x\\ y\\ z\\ w\end{array}\right]\Rightarrow\left(x/w,y/w,z/w\right)\)</span></p><p><span class="math inline">\(H \to E\)</span> 的转变不是唯一的，但<span class="math inline">\(E \to H\)</span> 的转变是唯一的</p><h3 id="像素坐标系">像素坐标系</h3><p>建立像平面到像素平面关系</p><ol type="1"><li>偏置</li></ol><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222204440.png" alt="" /><figcaption>image.png</figcaption></figure><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222204450.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\((x,y,z)\to(f\dfrac{x}{z}+c_x,f\dfrac{y}{z}+c_y)\)</span></p><ol start="2" type="1"><li>单位变换 <span class="math inline">\((x,y,z)\to({fk}\frac{x}{z}+c_x,{fl}\frac{y}{z}+c_y)\)</span> 单位：k.l：pixel/m , f:m k表示竖直方向上多少米表示一个像素，l表示水平方向上多少米表示一个像素</li></ol><p>记<span class="math inline">\(fk\)</span>为<span class="math inline">\(\alpha\)</span> ,<span class="math inline">\(fl\)</span>为<span class="math inline">\(\beta\)</span> <span class="math inline">\(P=(x,y,z)\rightarrow P^{\prime}=\left(\alpha{\frac{x}{z} }+c_{x},\beta{\frac{y}{z} }+c_{y}\right)\)</span> ，这里的<span class="math inline">\(c_x,c_y\)</span>是像素上的偏置</p><p><span class="math inline">\(P=(x,y,z)\rightarrow P^{\prime}=\left(\alpha{\frac{x}{z} }+c_{x},\beta{\frac{y}{z} }+c_{y}\right)\)</span>是非线性变换</p><p>在齐次坐标系下 <span class="math inline">\(P_h&#39;=\begin{bmatrix}\alpha x+c_x z\\ \beta y+c_yz\\ z\end{bmatrix}=\begin{bmatrix}\alpha&amp;0&amp;c_x&amp;0\\ 0&amp;\beta&amp;c_y&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\begin{bmatrix}x\\y\\z\\1\end{bmatrix}\)</span></p><p><span class="math inline">\(P&#39;_h\to P&#39;=(\alpha\dfrac{x}{z}+c_x,\beta\dfrac{y}{z}+c_y)\)</span></p><p><span class="math inline">\(P&#39;_h\)</span>是齐次，<span class="math inline">\(P&#39;\)</span> 是欧式</p><h3 id="摄像机的投影矩阵">摄像机的投影矩阵</h3><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222210401.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\(P&#39;=\begin{bmatrix}\alpha&amp;0&amp;c_x&amp;0\\ 0&amp;\beta&amp;c_y&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\begin{bmatrix}x\\ y\\ z\\ 1\end{bmatrix}=MP\)</span></p><p>其中<span class="math inline">\(M=\begin{bmatrix}\alpha&amp;-\alpha\cot\theta&amp;c_x&amp;0\\ 0&amp;\dfrac{\beta}{sin\theta}&amp;c_y&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\)</span></p><p>此时<span class="math inline">\(P\)</span>和<span class="math inline">\(P&#39;\)</span> 是线性表示 <span class="math inline">\(P&#39;\)</span>是<span class="math inline">\(3*1\)</span>矩阵，<span class="math inline">\(P\)</span> 是<span class="math inline">\(4*1\)</span>矩阵</p><h3 id="摄像机偏斜">摄像机偏斜</h3><p><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222210931.png" alt="image.png" /> <span class="math inline">\(P&#39;=\begin{bmatrix}\alpha&amp;-\alpha\cot\theta&amp;c_x&amp;0\\ 0&amp;\frac{\beta}{sin\theta}&amp;c_y&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\begin{bmatrix}x\\ y\\ z\\ 1\end{bmatrix}\)</span></p><h3 id="摄像机坐标系下的摄像机模型">摄像机坐标系下的摄像机模型</h3><p><span class="math inline">\(P&#39;=\begin{bmatrix}\alpha&amp;-\alpha\cot\theta&amp;c_x&amp;0\\ 0&amp;\frac{\beta}{sin\theta}&amp;c_y&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\begin{bmatrix}x\\ y\\ z\\ 1\end{bmatrix}=MP\)</span></p><p><span class="math inline">\(M=\begin{bmatrix}\alpha&amp;-\alpha\cot\theta&amp;c_x&amp;0\\ 0&amp;\frac{\beta}{sin\theta}&amp;c_y&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\)</span>被称为投影矩阵，</p><p><span class="math inline">\(K=\begin{bmatrix}\alpha&amp;-\alpha\cot\theta&amp;c_x\\ 0&amp;\frac{\beta}{sin\theta}&amp;c_y\\ 0&amp;0&amp;1\end{bmatrix}\)</span> 被称为摄像机内参数矩阵，内参数矩阵决定了摄像机坐标系下空间点到图像点的映射</p><p>摄像机内参数为<span class="math inline">\(\alpha,\beta,c_x,c_y,\theta\)</span>，K有五个自由度</p><h3 id="规范化投影变换">规范化投影变换</h3><p><span class="math inline">\(P&#39;=\begin{bmatrix}x\\ y\\ z\end{bmatrix}=\begin{bmatrix}1&amp;0&amp;0&amp;0\\ 0&amp;1&amp;0&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\begin{bmatrix}x\\ y\\ z\\ 1\end{bmatrix}\)</span></p><p>已知摄像机矩阵<span class="math inline">\(M\)</span> , <span class="math inline">\(P&#39;=I(MP)\)</span>,<span class="math inline">\(I=\begin{bmatrix}1&amp;0&amp;0\\ 0&amp;1&amp;0\\ 0&amp;0&amp;1\end{bmatrix}\)</span></p><p><span class="math inline">\(\begin{array}{c}\Re^4\xrightarrow{H}\Re^3\\ \boldsymbol{P&#39;}=M\boldsymbol{P}\end{array}\)</span></p><p><span class="math inline">\(P\)</span> 的欧式坐标<span class="math inline">\(\left[\begin{array}{c}{ {\frac{x}{z} }}\\ { {\frac{y}{z} }}\\ \end{array}\right]\)</span></p><h3 id="世界坐标系">世界坐标系</h3><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222212628.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\(O_w\)</span> 为世界坐标系 <span class="math inline">\(O\)</span>摄像机坐标系,<span class="math inline">\(C&#39;\)</span>像平面坐标系</p><p>齐次坐标系<span class="math inline">\(P=\left[\begin{matrix}{R}&amp;{T}\\ {0}&amp;{1}\\ \end{matrix}\right]\boldsymbol{P}_{w}\)</span> , <span class="math inline">\(\begin{bmatrix}x_w\\ y_w\\ z_w\\ 1\end{bmatrix}\)</span> ，即摄像机坐标系是世界坐标系经过一个旋转，再经过一个平移得到的</p><p>世界坐标系下<span class="math inline">\(P_w=R^T(P-T)\)</span></p><p>从世界坐标系到像素坐标系<span class="math inline">\(P&#39;=K[I\quad0]P=K[I\quad0]\begin{bmatrix}R&amp;T\\ 0&amp;1\end{bmatrix}P_w=K[R\quad T]P_w=MP_w=\left[{\begin{matrix}{m_{1} }\\ {m_{2} }\\ {m_{3} }\end{matrix} }\right]P_{\mathrm{w} }\)</span> <span class="math inline">\(\begin{bmatrix}R &amp; T\end{bmatrix}\)</span>称为外参数矩阵，K是内参数，这就是完整的摄像机模型</p><p><span class="math inline">\(M\)</span> 称为投影矩阵，有11个自由度</p><p>摄像机O点坐标为<span class="math inline">\(-R^TT\)</span></p><p><span class="math inline">\(\left[{\begin{matrix}{m_{1} }\\ {m_{2} }\\ {m_{3} }\end{matrix} }\right]P_{\mathrm{w} }\)</span> 是转换为欧式坐标系的写法，<span class="math inline">\(m_i\)</span> 是一个<span class="math inline">\(1*4\)</span> 的矩阵</p><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222215030.png" alt="" /><figcaption>image.png</figcaption></figure><h3 id="投影变化的性质">投影变化的性质</h3><ol type="1"><li>点投影为点</li><li>线投影为线</li><li>近大远小</li><li>角度不再保持</li><li>平行线相交</li></ol><h2 id="其他摄像机模型">其他摄像机模型</h2><h3 id="透视投影摄像机">透视投影摄像机</h3><p>^b240bc</p><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222220419.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\(P&#39;_{3\times1}=MP_W=K_{3\times3}[R\quad T]_{3\times4}P_{W4\times1}=\begin{bmatrix}m_1\\ m_2\\ m_3\end{bmatrix}P_w=\begin{bmatrix}m_1P_w\\ m_2P_w\\ m_3P_w\end{bmatrix}\stackrel{E}{\longrightarrow}(\dfrac{m_1P_w}{m_3P_w},\dfrac{m_2P_w}{m_3P_w})\quad,M=\begin{bmatrix}m_1\\ m_2\\ m_3\end{bmatrix}\)</span><br />### 弱透视投影摄像机</p><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222220925.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\(\begin{cases}x&#39;=\dfrac{f&#39;}{z}x\\ y&#39;=\dfrac{f&#39;}{z}y\end{cases}\rightarrow\begin{cases}x&#39;=\dfrac{f&#39;}{z_0}x\\ y&#39;=\dfrac{f}{z_0}y\end{cases}\)</span></p><p>从投影（透视）到弱透视<span class="math inline">\(M=K[RT]=\begin{bmatrix}A_{2\times3}&amp;b_{2\times1}\\ v_{1\times2}&amp;1\end{bmatrix}\quad\to M=\begin{bmatrix}A&amp;b\\ 0&amp;1\end{bmatrix}\quad\)</span></p><p><span class="math inline">\(P&#39;=MP_w=\begin{bmatrix}m_1\\ m_2\\ m_3\end{bmatrix}P_w=\begin{bmatrix}m_1P_w\\ m_2P_w\\ 1\end{bmatrix}\stackrel{E}{\longrightarrow}\left(m_{1}P_{W},m_{2}P_{w}\right)\)</span> ,<span class="math inline">\(m_1,m_2\)</span> 为放大率</p><p><span class="math inline">\(M=\begin{bmatrix}A&amp;b\\ v&amp;1\end{bmatrix}=\begin{bmatrix}m_1\\ m_2\\ m_3\end{bmatrix}=\begin{bmatrix}&amp;m_1&amp;\\ &amp;m_2&amp;\\ 0&amp;0&amp;0&amp;1\end{bmatrix}\)</span></p><h3 id="正交投影摄像机">正交投影摄像机</h3><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222222006.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\(\begin{cases}x&#39;=\dfrac{f&#39;}{z}x\\ y&#39;=\dfrac{f&#39;}{z}y\end{cases}\quad\to\quad\begin{cases}x&#39;=x\\ y&#39;=y\end{cases}\)</span></p><h3 id="各种摄像机模型的应用场合">各种摄像机模型的应用场合</h3><ul><li>正交投影<ul><li>更多应用在建筑设计(AUTOCAD)或者工业设计行业</li></ul></li><li>弱透视投影在数学方面更简单<ul><li>当物体较小且较远时准确，常用于图像识别任务</li></ul></li><li>透视投影对于3D到2D映射的建模更为准确<ul><li>用于运动恢复结构或SLAM</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
