<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>pydantic实现的LLM ReAct</title>
    <link href="/2024/08/10/pydantic%E5%AE%9E%E7%8E%B0LLM%20ReAct/"/>
    <url>/2024/08/10/pydantic%E5%AE%9E%E7%8E%B0LLM%20ReAct/</url>
    
    <content type="html"><![CDATA[<p>在今天的 AI 项目中，大模型的集成几乎成为了一种常态，但如何在保证输出的可控性和解释性的同时利用这些模型执行各种下游任务，一直是一个技术挑战。本文将介绍一个名为 ReAct 的系统，该系统通过结合大规模语言模型的输出与 Python 开发紧密合作，提供了一种新颖的解决方案。</p><p>代码开源在<a href="https://github.com/StudyingLover/learn-llm-ReAct">GitHub</a></p><h3 id="什么是-react">什么是 ReAct？</h3><p>ReAct（推理与行动）是一个增强大型语言模型（LLM）能力的框架，通过结合推理和基于行动的响应来实现。这种方法使 LLM 能够同时生成语言推理轨迹和特定任务的行动，从而提高它们在决策任务中的互动性和有效性</p><p>ReAct 的核心在于<strong>思考-行动-观察周期</strong>：在执行期间，LLM 遵循思考、行动和观察的循环：</p><ul><li><strong>思考</strong>：模型生成关于手头任务的思考或推理轨迹。这可能涉及分解问题、规划搜索策略或做出假设。</li><li><strong>行动</strong>：基于思考，模型采取特定行动，例如查询数据库、搜索互联网或进行计算。</li><li><strong>观察</strong>：模型观察行动的结果，这将指导其下一步行动。这可能涉及分析检索到的数据或根据新信息优化搜索【23†来源】。</li></ul><h3 id="具体实现案例">具体实现案例</h3><p>考虑一个场景，我有两只狗，一只边境牧羊犬和一只苏格兰梗犬。我知道他们各自的体重，那它们的总体重是多少？</p><p>我们首先需要两个函数，一个获取一只狗的体重，一个计算数学表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate</span>(<span class="hljs-params">what</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">eval</span>(what)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">average_dog_weight</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">if</span> name <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;Scottish Terrier&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Scottish Terriers average 20 lbs&quot;</span><br>    <span class="hljs-keyword">elif</span> name <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;Border Collie&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;a Border Collies average weight is 37 lbs&quot;</span><br>    <span class="hljs-keyword">elif</span> name <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;玩具贵宾犬&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;玩具贵宾犬的平均体重为 7 磅&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;An average dog weights 50 lbs&quot;</span><br></code></pre></td></tr></table></figure><p>我们需要一个 system prompt 来定义 llm 的行为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">system_prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">你是一个结构化数据的处理器,你精通json格式的数据,并且可以输出结构化的json数据。你可以根据给定的文字和json scheme,输出符合scheme的json数据。请注意,你的输出会直接被解析,如果格式不正确,会导致解析失败,你会被狠狠地批评的。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>一个 ReAct prompt 来告诉 llm 怎么做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">react_prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">你在一个思考、行动、暂停、观察的循环中运行。</span><br><span class="hljs-string"></span><br><span class="hljs-string">你可用的操作是：</span><br><span class="hljs-string"></span><br><span class="hljs-string">1. 计算：</span><br><span class="hljs-string">例如计算：4 * 7 / 3</span><br><span class="hljs-string">运行计算并返回数字 - 使用 Python，因此请确保在必要时使用浮点语法</span><br><span class="hljs-string"></span><br><span class="hljs-string">2. 平均狗体重：</span><br><span class="hljs-string">例如平均狗体重：牧羊犬</span><br><span class="hljs-string">在给定品种的情况下返回狗的平均体重</span><br><span class="hljs-string"></span><br><span class="hljs-string">下面是acions的文档：</span><br><span class="hljs-string"><span class="hljs-subst">&#123;action_doc&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">你的输出应该是一个json格式的字符串，输出需要遵循的json scheme如下：<span class="hljs-subst">&#123;LLMOutput.model_json_schema()&#125;</span></span><br><span class="hljs-string">其中</span><br><span class="hljs-string">- thinkint 是你的思考</span><br><span class="hljs-string">- actions 是你的行动</span><br><span class="hljs-string">- parameter 是你需要执行行动的参数</span><br><span class="hljs-string">- observation 是你的观察</span><br><span class="hljs-string">- answer 是你的答案</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">当你认为自己已经找到了答案时，不输出actions,同时输出answer。</span><br><span class="hljs-string">输出时，**直接返回json字符串**，不需要任何额外的输出，你的输出将被直接解析为json字符串，所以请确保你的输出是一个合法的json字符串。</span><br><span class="hljs-string">不要在输出中包含任何额外的信息，只需返回json字符串。你的输出将被使用LLMOutput.model_validate_json建立一个LLMOutput对象</span><br><span class="hljs-string">每次输出之进行一步操作，不要在一个输出中包含多个操作。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>通过以上方式，ReAct 利用大模型的能力，结合 Python 的强大后端处理，实现了从非结构化文本到结构化数据的转换，提高了信息的可用性和操作的精确度。</p><p>我们定义一个<code>Agent</code> 类来实现大模型能干什么</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Agent</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, system=<span class="hljs-string">&quot;你好&quot;</span></span>):<br>        <span class="hljs-variable language_">self</span>.system = system<br>        <span class="hljs-variable language_">self</span>.messages = []<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.system:<br>            <span class="hljs-variable language_">self</span>.messages.append(&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: system&#125;)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, message</span>):<br>        <span class="hljs-variable language_">self</span>.messages.append(&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: message&#125;)<br>        result = <span class="hljs-variable language_">self</span>.execute()<br>        <span class="hljs-variable language_">self</span>.messages.append(&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;assistant&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: result&#125;)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">execute</span>(<span class="hljs-params">self</span>):<br>        completion = client.chat.completions.create(<br>            model=<span class="hljs-string">&quot;deepseek-chat&quot;</span>, messages=<span class="hljs-variable language_">self</span>.messages<br>        )<br>        <span class="hljs-keyword">return</span> completion.choices[<span class="hljs-number">0</span>].message.content<br></code></pre></td></tr></table></figure><p>ReAct 部分我们单独放在一个 query 函数里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">question, max_turns=<span class="hljs-number">5</span></span>):<br>    i = <span class="hljs-number">0</span><br>    bot = Agent(system_prompt)<br>    next_prompt = react_prompt + question<br>    <span class="hljs-keyword">while</span> i &lt; max_turns:<br>        i += <span class="hljs-number">1</span><br>        result = extract_json(bot(next_prompt))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;*&quot;</span> * <span class="hljs-number">80</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Output: &quot;</span>, result)<br>        llm_output = LLMOutput.model_validate_json(result)<br>        <span class="hljs-keyword">if</span> llm_output.actions:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Actions:&quot;</span>, llm_output.actions)<br>            <span class="hljs-comment"># There is an action to run</span><br><br>            <span class="hljs-keyword">if</span> llm_output.actions <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> Actions.__members__.keys():<br>                <span class="hljs-keyword">raise</span> Exception(<br>                    <span class="hljs-string">&quot;Unknown action: &#123;&#125;: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<br>                        llm_output.actions, llm_output.parameter<br>                    )<br>                )<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; -- running &#123;&#125; &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(llm_output.actions, llm_output.parameter))<br>            observation = <span class="hljs-built_in">eval</span>(Actions[llm_output.actions])(**(llm_output.parameter))<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Observation:&quot;</span>, observation)<br>            next_prompt = <span class="hljs-string">&quot;Observation: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(observation)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> llm_output.answer<br></code></pre></td></tr></table></figure><p>这个流程是什么意思呢？就是说我们会把大模型的输出转成一个 json,包含思考、行动、参数、观察、结果五个字段，每次大模型的输出里面如果还有 action,那说明还需要使用工具，就把行动和参数拿出来运行一下，结果就是新的观察，循环往复，知道不需要 action,这个时候就把结果拿出来返回</p><p>下面是一个实际的输出</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs arcade">Output:  &#123;<br>  <span class="hljs-string">&quot;thinkint&quot;</span>: <span class="hljs-string">&quot;我需要计算两只狗的总体重&quot;</span>,<br>  <span class="hljs-string">&quot;actions&quot;</span>: <span class="hljs-string">&quot;average_dog_weight&quot;</span>,<br>  <span class="hljs-string">&quot;parameter&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Border Collie&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;observation&quot;</span>: <span class="hljs-string">&quot;获取边境牧羊犬的平均体重&quot;</span>,<br>  <span class="hljs-string">&quot;answer&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br>Actions: Actions.average_dog_weight<br> -- running Actions.average_dog_weight &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Border Collie&#x27;</span>&#125;<br>Observation: a Border Collies <span class="hljs-built_in">average</span> weight is <span class="hljs-number">37</span> lbs<br>********************************************************************************<br>Output:  &#123;<br>  <span class="hljs-string">&quot;thinkint&quot;</span>: <span class="hljs-string">&quot;我已经知道边境牧羊犬的平均体重是37磅，现在需要获取苏格兰梗犬的平均体重&quot;</span>,<br>  <span class="hljs-string">&quot;actions&quot;</span>: <span class="hljs-string">&quot;average_dog_weight&quot;</span>,<br>  <span class="hljs-string">&quot;parameter&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Scottish Terrier&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;observation&quot;</span>: <span class="hljs-string">&quot;获取苏格兰梗犬的平均体重&quot;</span>,<br>  <span class="hljs-string">&quot;answer&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br>Actions: Actions.average_dog_weight<br> -- running Actions.average_dog_weight &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Scottish Terrier&#x27;</span>&#125;<br>Observation: Scottish Terriers <span class="hljs-built_in">average</span> <span class="hljs-number">20</span> lbs<br>********************************************************************************<br>Output:  &#123;<br>  <span class="hljs-string">&quot;thinkint&quot;</span>: <span class="hljs-string">&quot;我已经知道苏格兰梗犬的平均体重是20磅，现在可以计算两只狗的总体重&quot;</span>,<br>  <span class="hljs-string">&quot;actions&quot;</span>: <span class="hljs-literal">null</span>,<br>  <span class="hljs-string">&quot;parameter&quot;</span>: <span class="hljs-literal">null</span>,<br>  <span class="hljs-string">&quot;observation&quot;</span>: <span class="hljs-string">&quot;计算两只狗的总体重&quot;</span>,<br>  <span class="hljs-string">&quot;answer&quot;</span>: <span class="hljs-string">&quot;两只狗的总体重是57磅&quot;</span><br>&#125;<br>两只狗的总体重是<span class="hljs-number">57</span>磅<br></code></pre></td></tr></table></figure><p>可以看到正确的输出<code>两只狗的总体重是57磅</code></p><h3 id="结论">结论</h3><p>ReAct 不仅展示了大模型与现代编程语言如 Python 的结合潜力，还提供了一个框架，使得 AI 集成变得更加灵活和有力。这种方法极大地推动了开发者在实际应用中实现自动化和智能化，无疑将在未来的技术发展中扮演重要角色。</p>]]></content>
    
    
    
    <tags>
      
      <tag>大模型</tag>
      
      <tag>LLM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastapi 和 uvicorn 设置监听 ipv6</title>
    <link href="/2024/07/14/fastapi%E5%92%8Cuvicorn%E8%AE%BE%E7%BD%AE%E7%9B%91%E5%90%ACipv6/"/>
    <url>/2024/07/14/fastapi%E5%92%8Cuvicorn%E8%AE%BE%E7%BD%AE%E7%9B%91%E5%90%ACipv6/</url>
    
    <content type="html"><![CDATA[<h1 id="fastapi-和-uvicorn-设置监听-ipv6">fastapi 和 uvicorn 设置监听 ipv6</h1><p>启动程序时我们一般写的是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">uvicorn.run(app, host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">8000</span>)<br></code></pre></td></tr></table></figure><p>但是这样子启动的程序在纯 ipv6 或者双栈(同时有 ipv4 和 ipv6)的机子上使用 ip(v6):port 访问是访问不到的，所以我们需要更改启动方式。</p><p>直接参考<a href="https://github.com/encode/uvicorn/discussions/1529#discussioncomment-3061823">GitHub</a>的一个讨论，最佳答案是<a href="https://github.com/encode/uvicorn/discussions/1529#discussioncomment-3061823">这个</a></p><p>想要监听 ipv6 就写成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">uvicorn.run(app, host=<span class="hljs-string">&quot;::&quot;</span>, port=<span class="hljs-number">8000</span>)<br></code></pre></td></tr></table></figure><p>监听双栈写成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">uvicorn.run(app, host=<span class="hljs-literal">None</span>, port=<span class="hljs-number">8000</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>fastapi</tag>
      
      <tag>uvicorn</tag>
      
      <tag>ipv6</tag>
      
      <tag>后端</tag>
      
      <tag>fastapi ipv6</tag>
      
      <tag>uvicorn ipv6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pydantic+openai+json 控制大模型输出的最佳范式</title>
    <link href="/2024/06/18/pydantic+openai+json:%20%E6%8E%A7%E5%88%B6%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%BE%93%E5%87%BA%E7%9A%84%E6%9C%80%E4%BD%B3%E8%8C%83%E5%BC%8F/"/>
    <url>/2024/06/18/pydantic+openai+json:%20%E6%8E%A7%E5%88%B6%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%BE%93%E5%87%BA%E7%9A%84%E6%9C%80%E4%BD%B3%E8%8C%83%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>调用大模型已经是如今做 ai 项目习以为常的工作的，但是大模型的输出很多时候是不可控的，我们又需要使用大模型去做各种下游任务，实现可控可解析的输出。我们探索了一种和 python 开发可以紧密合作的开发方法。</p><p>所有的代码都开源在了<a href="https://github.com/StudyingLover/llm-pydantic-openai-json">GitHub</a></p><p>大模型输出是按照 token 逐个预测然后解码成文本，就跟说话一样，但是有的时候我们需要用大模型做一些垂直领域的工作，例如给定一段文本，我们想知道他属于正向的还是负向的？最简单的方法就是给大模型写一段 prompt 告诉大模型请你告诉我这段文本是正向的还是负向的，只输出正向的还是负向的不要输出多余的东西。这种方法其实有两个问题</p><ol type="1"><li>大模型有的时候挺犟的，你告诉他不要输出多余的他会说好的我不会输出多余的，这段文本的正向的/负向的</li><li>如果我们希望同时有多个输出，例如正向的还是负向的，以及对应的分数，这样的输出会很麻烦</li></ol><p>所以，我们需要一种格式，大模型很擅长写，我们解析起来很方便，我们使用 python 开发的话也很方便，有没有呢？还真有，python 有一个库叫 pydantic，可以实现类-&gt;json-&gt;类的转换。</p><p>这里补充一个知识叫做 json scheme 是一种基于 JSON 的格式，用来描述 JSON 数据的结构。它提供了一种声明性的方式来验证 JSON 数据是否符合某种结构，这对于数据交换、数据存储以及 API 的交互等方面都非常有用。一个 JSON Schema 本身也是一个 JSON 对象，它定义了一系列的规则，这些规则说明了 JSON 数据应该满足的条件。例如，它可以指定一个 JSON 对象中必须包含哪些属性，这些属性的数据类型是什么，是否有默认值，以及其他一些约束条件。下面是一个 json scheme 的例子。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;$schema&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://json-schema.org/draft-07/schema#&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;object&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;string&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;minimum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;string&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;format&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;email&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;required&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;name&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;age&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>ok，那怎么得到一个 json scheme，我们可以给描述或者一段 json 让大模型写，但是不够优雅，每次需要打开一个网页写写写然后复制粘贴回来。一种更优雅的方式是用 pydantic 导出，下面是一个例子, 定义一个<code>Item</code> 类然后使用<code>Item.model_json_scheme()</code>可以导出这个类的 json scheme 描述</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    x: <span class="hljs-built_in">float</span><br>    y: <span class="hljs-built_in">float</span><br>    z: <span class="hljs-built_in">float</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    <span class="hljs-built_in">id</span>: <span class="hljs-built_in">int</span><br>    name: <span class="hljs-built_in">str</span><br>    description: <span class="hljs-built_in">str</span><br>    number: <span class="hljs-built_in">int</span><br>    price: <span class="hljs-built_in">float</span><br>    position: <span class="hljs-type">List</span>[Point]<br><br><span class="hljs-built_in">print</span>(Item.model_json_schema())<br></code></pre></td></tr></table></figure><p>他的输出是</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;$defs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;Point&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;x&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;X&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;number&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;y&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Y&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;number&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;z&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Z&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;number&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;required&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;y&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;z&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Point&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;object&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Id&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Name&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;string&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Description&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;string&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;number&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Number&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Price&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;number&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;items&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#/$defs/Point&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Position&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;array&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;required&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;id&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;name&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;description&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;number&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;price&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;position&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Item&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>通过这种方式我们可以解决前面提出的第二个问题，将我们需要的多个答案写成一个 pydantic 的类，然后将 json scheme 以及问题描述作为 prompt 给大模型例如下面的这个 prompt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">user_prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">请帮我把这个物品的描述转换成json格式的数据，</span><br><span class="hljs-string">json scheme格式如下：</span><br><span class="hljs-string"><span class="hljs-subst">&#123;Item.model_json_schema()&#125;</span></span><br><span class="hljs-string">物品描述如下：</span><br><span class="hljs-string"><span class="hljs-subst">&#123;item_desc&#125;</span></span><br><span class="hljs-string">请你分析上面的描述，按照json schema，填写信息。请一定要按照json schema的格式填写，否则会导致数据无法解析，你会被狠狠地批评的。</span><br><span class="hljs-string">只需要输出可以被解析的json就够了，不需要输出其他内容。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><p>那第一个问题怎么解决呢？首先是大模型不止输出 json 还会输出一堆废话，我们可以观察到 json 前后是大括号，这个符号是一般不会出现的，所有我们可以从输出的字符串前后开始遍历，分别找到一个前大括号和一个后大括号，然后舍弃掉无关的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_json</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-keyword">try</span>:<br>        json_start = text.find(<span class="hljs-string">&quot;&#123;&quot;</span>)<br>        json_end = text.rfind(<span class="hljs-string">&quot;&#125;&quot;</span>) + <span class="hljs-number">1</span><br>        json_content = text[json_start:json_end].replace(<span class="hljs-string">&quot;\\_&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>)<br>        <span class="hljs-keyword">return</span> json_content<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Error extracting JSON: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span><br><br></code></pre></td></tr></table></figure><p>获取到 json 之后，使用<code>Item.model_validate_json(json字符串)</code> 来构造一个实体类</p><p>当然我们也可以定义一个对象然后将他转换成 json</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    x: <span class="hljs-built_in">float</span><br>    y: <span class="hljs-built_in">float</span><br>    z: <span class="hljs-built_in">float</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    <span class="hljs-built_in">id</span>: <span class="hljs-built_in">int</span><br>    name: <span class="hljs-built_in">str</span><br>    description: <span class="hljs-built_in">str</span><br>    number: <span class="hljs-built_in">int</span><br>    price: <span class="hljs-built_in">float</span><br>    position: <span class="hljs-type">List</span>[Point]<br><br><br>item = Item(<br>    <span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>,<br>    name=<span class="hljs-string">&quot;example&quot;</span>,<br>    description=<span class="hljs-string">&quot;example description&quot;</span>,<br>    number=<span class="hljs-number">1</span>,<br>    price=<span class="hljs-number">1.0</span>,<br>    position=[Point(x=<span class="hljs-number">1.0</span>, y=<span class="hljs-number">2.0</span>, z=<span class="hljs-number">3.0</span>)],<br>)<br><span class="hljs-built_in">print</span>(item.model_dump_json())<br><br></code></pre></td></tr></table></figure><p>输出是</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;example&quot;,&quot;description&quot;:&quot;example description&quot;,&quot;number&quot;:1,&quot;price&quot;:1.0,&quot;position&quot;:[&#123;&quot;x&quot;:1.0,&quot;y&quot;:2.0,&quot;z&quot;:3.0&#125;]&#125;<br></code></pre></td></tr></table></figure><p>下面我给出了一个完整的例子，使用质谱的 glm-4-air 模型，解析一个物体的描述</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">from</span> openai <span class="hljs-keyword">import</span> OpenAI<br><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel<br><span class="hljs-keyword">from</span> dotenv <span class="hljs-keyword">import</span> load_dotenv<br><span class="hljs-keyword">from</span> pydantic_settings <span class="hljs-keyword">import</span> BaseSettings<br><br>load_dotenv()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EnvSettings</span>(<span class="hljs-title class_ inherited__">BaseSettings</span>):<br>    OPENAI_API_KEY: <span class="hljs-built_in">str</span><br>    OPENAI_API_BASE: <span class="hljs-built_in">str</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    x: <span class="hljs-built_in">float</span><br>    y: <span class="hljs-built_in">float</span><br>    z: <span class="hljs-built_in">float</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatRole</span>(<span class="hljs-built_in">str</span>, Enum):<br>    SYSTEM = <span class="hljs-string">&quot;system&quot;</span><br>    USER = <span class="hljs-string">&quot;user&quot;</span><br>    ASSISTANT = <span class="hljs-string">&quot;assistant&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    <span class="hljs-built_in">id</span>: <span class="hljs-built_in">int</span><br>    name: <span class="hljs-built_in">str</span><br>    description: <span class="hljs-built_in">str</span><br>    number: <span class="hljs-built_in">int</span><br>    price: <span class="hljs-built_in">float</span><br>    position: <span class="hljs-type">List</span>[Point]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_json</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-keyword">try</span>:<br>        json_start = text.find(<span class="hljs-string">&quot;&#123;&quot;</span>)<br>        json_end = text.rfind(<span class="hljs-string">&quot;&#125;&quot;</span>) + <span class="hljs-number">1</span><br>        json_content = text[json_start:json_end].replace(<span class="hljs-string">&quot;\\_&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>)<br>        <span class="hljs-keyword">return</span> json_content<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Error extracting JSON: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span><br><br><br>env_settings = EnvSettings()<br>client = OpenAI(<br>    api_key=env_settings.OPENAI_API_KEY, base_url=env_settings.OPENAI_API_BASE<br>)<br><br>item_desc = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">这个物品是戒指，它非常受人欢迎，它的价格是1000.7美元，编号是123456，现在还有23个库存，他的位置在(1.0, 2.0, 3.0)，非常值得购买。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>user_prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">请帮我把这个物品的描述转换成json格式的数据，</span><br><span class="hljs-string">json scheme格式如下：</span><br><span class="hljs-string"><span class="hljs-subst">&#123;Item.model_json_schema()&#125;</span></span><br><span class="hljs-string">物品描述如下：</span><br><span class="hljs-string"><span class="hljs-subst">&#123;item_desc&#125;</span></span><br><span class="hljs-string">请你分析上面的描述，按照json schema，填写信息。请一定要按照json schema的格式填写，否则会导致数据无法解析，你会被狠狠地批评的。</span><br><span class="hljs-string">只需要输出可以被解析的json就够了，不需要输出其他内容。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>resp = client.chat.completions.create(<br>    model=<span class="hljs-string">&quot;glm-4-air&quot;</span>,<br>    messages=[<br>        &#123;<br>            <span class="hljs-string">&quot;role&quot;</span>: ChatRole.SYSTEM,<br>            <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;你是一个结构化数据的处理器，你精通json格式的数据，并且可以输出结构化的json数据。你可以根据给定的文字和json scheme，输出符合scheme的json数据。请注意，你的输出会直接被解析，如果格式不正确，会导致解析失败，你会被狠狠地批评的。&quot;</span>,<br>        &#125;,<br>        &#123;<span class="hljs-string">&quot;role&quot;</span>: ChatRole.USER, <span class="hljs-string">&quot;content&quot;</span>: user_prompt&#125;,<br>    ],<br>)<br><br>item = Item.model_validate_json(extract_json(resp.choices[<span class="hljs-number">0</span>].message.content))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;解析的物品信息：<span class="hljs-subst">&#123;item&#125;</span>&quot;</span>)<br><br>json_item = item.model_dump_json()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;转换成json格式：<span class="hljs-subst">&#123;json_item&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>输出是</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Plain">解析的物品信息：id=123456 name=&#x27;戒指&#x27; description=&#x27;这个物品是戒指，它非常受人欢迎，它的价格是1000.7美元，编号是123456，现在还有23个库存，他的位置在(1.0, 2.0, 3.0)，非常值得购买。&#x27; number=23 price=1000.7 position=[Point(x=1.0, y=2.0, z=3.0)]<br>转换成json格式：&#123;&quot;id&quot;:123456,&quot;name&quot;:&quot;戒指&quot;,&quot;description&quot;:&quot;这个物品是戒指，它非常受人欢迎，它的价格是1000.7美元，编号是123456，现在还有23个库存，他的位置在(1.0, 2.0, 3.0)，非常值得购买。&quot;,&quot;number&quot;:23,&quot;price&quot;:1000.7,&quot;position&quot;:[&#123;&quot;x&quot;:1.0,&quot;y&quot;:2.0,&quot;z&quot;:3.0&#125;]&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>roofline model</title>
    <link href="/2024/04/10/roofline%20model/"/>
    <url>/2024/04/10/roofline%20model/</url>
    
    <content type="html"><![CDATA[<h1 id="roofline-model">roofline model</h1><p>定义 <span class="math display">\[运算强度 = 运算量/访存量\]</span> 运算量是 一个样本进行一次前向传播的浮点运算次数 访存量是 一个样本进行一次前向传播的内存交换数量</p><p>以运算强度为横轴、每秒浮点运算次数为纵轴画图，就能得到roofline</p><p><img src="https://cdn.jsdelivr.net/gh/Trouble404/Image/blog20210202150252.jpg" alt="roofline" /> 算力决定屋顶的高度，带宽决定屋檐的斜率。</p><p>所有的计算对应的点都不会超过红绿线</p><p>红色部分叫做<strong>带宽瓶颈区域</strong>，模型计算强度达不到设备的最大性能是，这个时候模型性能由带宽和模型自身计算能力决定。这个时候只需要增加带宽，或者增加模型自身计算能力就可以提升性能(理论上)</p><p>绿色部分叫做<strong>计算瓶颈区域</strong>，不管模型计算强度怎么增加，模型的性能都不会超过红线。这个时候模型会充分压榨算力平台算力</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># 峰值性能（Peak Performance）与内存带宽（Memory Bandwidth）</span><br>peak_performance = <span class="hljs-number">100</span> <span class="hljs-comment"># 以 GFLOPS 表示, 处理器可以达到的最大浮点运算性能</span><br>memory_bandwidth = <span class="hljs-number">10</span> <span class="hljs-comment"># 以 GB/s 表示, 内存与处理器之间每秒可以交换的最大数据量</span><br><span class="hljs-comment"># 设置算术密集度的范围（FLOPS/Byte）</span><br>arithmetic_intensity = np.logspace(-<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, num=<span class="hljs-number">100</span>)<br><span class="hljs-comment"># 计算绩效上限</span><br>performance_limit = np.minimum(peak_performance, memory_bandwidth * arithmetic_intensity)<br><span class="hljs-comment"># 绘制 Roofline 模型</span><br>plt.loglog(arithmetic_intensity, performance_limit, label=<span class="hljs-string">&#x27;Roofline&#x27;</span>)<br>app_arithmetic_intensity = <span class="hljs-number">0.2</span> <span class="hljs-comment"># FLOPS/Byte 运算量/访存量</span><br>app_peak_performance = <span class="hljs-number">0.8</span> <span class="hljs-comment"># 每秒进行的浮点运算次数</span><br><span class="hljs-comment"># 标记应用程序性能</span><br>plt.scatter(app_arithmetic_intensity, app_peak_performance, color=<span class="hljs-string">&#x27;red&#x27;</span>, label=<span class="hljs-string">&#x27;App Performance&#x27;</span>)<br><span class="hljs-comment"># 添加图例和标签</span><br>plt.xlabel(<span class="hljs-string">&#x27;Arithmetic Intensity (FLOPS/Byte)&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Performance (GFLOPS)&#x27;</span>)<br>plt.legend()<br>plt.grid(<span class="hljs-literal">True</span>, which=<span class="hljs-string">&quot;both&quot;</span>, ls=<span class="hljs-string">&quot;--&quot;</span>)<br>plt.title(<span class="hljs-string">&#x27;Roofline Model&#x27;</span>)<br><span class="hljs-comment"># 显示图表</span><br>plt.show()<br><br></code></pre></td></tr></table></figure><p>优化手段可以分为两类 1. 提高算力 2. 提高带宽</p><p>对于 Memory-bound(红色) 的任务，优化内存带宽更加有效；而对于 Compute-bound(绿色) 的任务，则应该优化算力</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>roofline</tag>
      
      <tag>模型性能</tag>
      
      <tag>运算强度</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zhipuAI接口兼容openai</title>
    <link href="/2024/04/10/zhipuAI%E6%8E%A5%E5%8F%A3%E5%85%BC%E5%AE%B9openai/"/>
    <url>/2024/04/10/zhipuAI%E6%8E%A5%E5%8F%A3%E5%85%BC%E5%AE%B9openai/</url>
    
    <content type="html"><![CDATA[<h1 id="zhipuai接口兼容openai">zhipuAI接口兼容openai</h1><p>最近debug发现质谱AI的接口是兼容openai这个库的</p><p>首先访问 <a href="https://open.bigmodel.cn/">官网</a> ,获取一个key</p><p>然后使用下面的代码生成jwt token, apikey天获取的key, exp_seconds是过期时间 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_token</span>(<span class="hljs-params">apikey: <span class="hljs-built_in">str</span>, exp_seconds: <span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">id</span>, secret = apikey.split(<span class="hljs-string">&quot;.&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;invalid apikey&quot;</span>, e)<br><br>    payload = &#123;<br>        <span class="hljs-string">&quot;api_key&quot;</span>: <span class="hljs-built_in">id</span>,<br>        <span class="hljs-string">&quot;exp&quot;</span>: <span class="hljs-built_in">int</span>(<span class="hljs-built_in">round</span>(time.time() * <span class="hljs-number">1000</span>)) + exp_seconds * <span class="hljs-number">1000</span>,<br>        <span class="hljs-string">&quot;timestamp&quot;</span>: <span class="hljs-built_in">int</span>(<span class="hljs-built_in">round</span>(time.time() * <span class="hljs-number">1000</span>)),<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> jwt.encode(<br>        payload,<br>        secret,<br>        algorithm=<span class="hljs-string">&quot;HS256&quot;</span>,<br>        headers=&#123;<span class="hljs-string">&quot;alg&quot;</span>: <span class="hljs-string">&quot;HS256&quot;</span>, <span class="hljs-string">&quot;sign_type&quot;</span>: <span class="hljs-string">&quot;SIGN&quot;</span>&#125;,<br>    )<br></code></pre></td></tr></table></figure></p><p>生成之后就可以按照下面的形式创建一个openai客户端 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> openai <span class="hljs-keyword">import</span> OpenAI<br><br>client = OpenAI(base_url=<span class="hljs-string">&quot;https://open.bigmodel.cn/api/paas/v4&quot;</span>, api_key=刚才生成的jwt token)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大模型</tag>
      
      <tag>zhipu</tag>
      
      <tag>openai</tag>
      
      <tag>质谱AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在docker部署fastapi宝塔里使用nginx反代套上cloudflare获取请求的真实ip</title>
    <link href="/2024/04/09/%E5%9C%A8docker%E9%83%A8%E7%BD%B2fastapi%E5%AE%9D%E5%A1%94%E9%87%8C%E4%BD%BF%E7%94%A8nginx%E5%8F%8D%E4%BB%A3%E5%A5%97%E4%B8%8Acloudflare%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E7%9A%84%E7%9C%9F%E5%AE%9Eip/"/>
    <url>/2024/04/09/%E5%9C%A8docker%E9%83%A8%E7%BD%B2fastapi%E5%AE%9D%E5%A1%94%E9%87%8C%E4%BD%BF%E7%94%A8nginx%E5%8F%8D%E4%BB%A3%E5%A5%97%E4%B8%8Acloudflare%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E7%9A%84%E7%9C%9F%E5%AE%9Eip/</url>
    
    <content type="html"><![CDATA[<h1 id="在docker部署fastapi宝塔里使用nginx反代套上cloudflare获取请求的真实ip">在docker部署fastapi宝塔里使用nginx反代套上cloudflare获取请求的真实ip</h1><p>背景是这样的，我使用docker部署了一个fastapi部署了一个应用，使用<code>request.client.host</code>获取请求的来源ip,但是获取到的都是<code>172.17.0.1</code>这显然是不是正常的，是docker网络下的ip,所以我们需要在nginx进行设置转发真实ip</p><p>首先点击宝塔<strong>应用商店</strong>，找到nginx，点击右边的<strong>设置</strong>，在<strong>配置修改</strong>中，找到<code>http</code>模块中的<code>include luawaf.conf;</code>，在下面添加如下两段代码，重载nginx <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs conf">set_real_ip_from 0.0.0.0/0;<br>real_ip_header X-Forwarded-For;<br></code></pre></td></tr></table></figure></p><p>同时在<code>/www/server/panel/vhost/nginx/proxy/你的网站</code> 这里路径下面能找到一个配置文件，在<code>location /</code>加上 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs conf">location / &#123;<br>    proxy_set_header Host $host;<br>    proxy_set_header X-Real-IP $remote_addr;<br>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>    proxy_set_header X-Forwarded-Proto $scheme;<br>    proxy_pass http://your_fastapi_app;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>在fastapi中，我们将获取ip的代码改成下面这样 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ip_address = request.headers.get(<span class="hljs-string">&quot;X-Real-IP&quot;</span>) <span class="hljs-keyword">if</span> request.headers.get(<span class="hljs-string">&quot;X-Real-IP&quot;</span>) <span class="hljs-keyword">else</span> (request.headers.get(<span class="hljs-string">&quot;X-Forwarded-For&quot;</span>) <span class="hljs-keyword">if</span> request.headers.get(<span class="hljs-string">&quot;X-Forwarded-For&quot;</span>) <span class="hljs-keyword">else</span> request.client.host)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fastapi</tag>
      
      <tag>docker</tag>
      
      <tag>nginx</tag>
      
      <tag>cloudflare</tag>
      
      <tag>宝塔</tag>
      
      <tag>真实ip</tag>
      
      <tag>fastapi 反向代理</tag>
      
      <tag>反向代理</tag>
      
      <tag>docker 172.17.0.1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>clion搭建libbpf-bootstrap开发环境</title>
    <link href="/2024/04/06/clion%E6%90%AD%E5%BB%BAlibbpf-bootstrap%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2024/04/06/clion%E6%90%AD%E5%BB%BAlibbpf-bootstrap%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="clion搭建libbpf-bootstrap开发环境">clion搭建libbpf-bootstrap开发环境</h1><p>首先用clion打开libbpf-bootstrap目录，将<code>example/c</code>下的<code>CMakeLists.txt</code>导入</p><p>这个时候你会发现代码不能用clion自带的可视化界面debug,这是因为libbpf-bootstrap目录结构太离谱了，我们只需要做一个小小的更改</p><p>将<strong>73</strong>行的 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMakeLists.txt">set(LIBBPF_LIBRARIES $&#123;CMAKE_CURRENT_BINARY_DIR&#125;/libbpf/libbpf.a)<br></code></pre></td></tr></table></figure></p><p>改成 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMakeLists.txt">set(LIBBPF_LIBRARIES $&#123;CMAKE_CURRENT_BINARY_DIR&#125;/../../../libbpf/src/libbpf.a)<br></code></pre></td></tr></table></figure></p><p>结束，享受clion的优秀</p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>libbpf-bootstrap</tag>
      
      <tag>ebpf</tag>
      
      <tag>clion</tag>
      
      <tag>Clion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>coze+coze-discord-proxy+ChatNextWebUI实现AI自由</title>
    <link href="/2024/03/31/coze+coze-discord-proxy+ChatNextWebUI%E5%AE%9E%E7%8E%B0AI%E8%87%AA%E7%94%B1/"/>
    <url>/2024/03/31/coze+coze-discord-proxy+ChatNextWebUI%E5%AE%9E%E7%8E%B0AI%E8%87%AA%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="cozecoze-discord-proxychatnextwebui-实现-ai-自由">coze+coze-discord-proxy+ChatNextWebUI 实现 AI 自由</h1><p>前不久我的 openai 账号被封了，还亏了这个月的 20 刀 gpt4 月费，可谓是亏麻了。为了继续使用 gpt4,我们需要注册一个账号，找到一个接口或者去折腾 gpt4free,但是有没有更加轻松的方式呢？</p><p>诶，实际上真的有，那就是字节的 <a href="coze.com">扣子(coze)</a>,可以自己构建知识库，加入插件，工作流，还有很多功能，更重要的是，我们可以白嫖 gpt4 128k 上下文版本！就决定是他了，开始白嫖</p><h2 id="注册-coze-并构建机器人">注册 coze 并构建机器人</h2><p>首先开<strong>全局代理</strong>然后访问 <a href="coze.com">海外版扣子</a>,</p><p>可以参考知乎的这个回答，给自己构建一个完整的 gpt 助手.<a href="https://zhuanlan.zhihu.com/p/682435326?utm_campaign=shareopn&amp;utm_medium=social&amp;utm_psn=1755880631257821184&amp;utm_source=wechat_session"># Coze 揭秘：零基础如何打造专属 AI，完全免费！</a></p><h2 id="搭建-coze-discord-proxy">搭建 coze-discord-proxy</h2><p>官方<a href="https://github.com/deanxv/coze-discord-proxy">repo</a> . 也可以参考这个教程进行部署<a href="https://www.dqzboy.com/16532.html">通过接口调用 Coze 托管的 discord-bot，实现免费使用 GPT4 和绘画</a></p><p>这里我解释一下这个项目是怎么工作的</p><p>如图所示，我们知道 discord 是允许机器人对话的，那我们构建两个机器人 COZE-BOT 和 CDP-BOT。COZE-BOT 和 coze 服务器对话，CDP-BOT 和 api 接口对话，将信息转发，就实现了一个 gpt 的接口。</p><figure><img src="https://cdn.studyinglover.com/pic/2024/03/867127c0de08acc84d6f70bcae8a04f7.png" alt="" /><figcaption>image.png</figcaption></figure><h2 id="宝塔搭建反向代理cloudflare-代理">宝塔搭建反向代理+cloudflare 代理</h2><p>我们首先将域名托管到 cloudflare, 添加一个解析到我们的服务器，然后选择左侧的 Origin Server, 给刚才解析的域名添加一个 15 年的证书，然后保存。 <img src="https://cdn.studyinglover.com/pic/2024/03/f3717de1caed3352219a4f07c0b5369f.png" alt="image.png" /></p><p>假设我们 coze-discord-proxy 的端口是 2077,打开宝塔面板，添加一个网站，设置反向代理到 localhost:7077,然后打开 ssl,填入刚才获取的 cloudflare15 年证书，成功后应该能看到这个 <img src="https://cdn.studyinglover.com/pic/2024/03/7051490e8c5e49cdb507e9e6d8b401ea.png" alt="image.png" /></p><p>我们访问 <code>https://域名/swagger/index.html</code> 应该就能看到 swagger 文档了。</p><h2 id="chatnextwebui-集成">ChatNextWebUI 集成</h2><p>我们可以将这个接口当作正常的 openai 接口用，base url 就是我们的域名，api key 是在前面部署 coze-discord-proxy 的时候指定的 PROXY_SECRET 参数</p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>免费gpt</tag>
      
      <tag>coze</tag>
      
      <tag>coze-discord-proxy</tag>
      
      <tag>ChatNextWebUI</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓内核时间使用的是UTC时间</title>
    <link href="/2024/03/30/%E5%AE%89%E5%8D%93%E5%86%85%E6%A0%B8%E6%97%B6%E9%97%B4%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AFUTC%E6%97%B6%E9%97%B4/"/>
    <url>/2024/03/30/%E5%AE%89%E5%8D%93%E5%86%85%E6%A0%B8%E6%97%B6%E9%97%B4%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AFUTC%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="安卓内核时间使用的是utc时间">安卓内核时间使用的是UTC时间</h1><p>安卓内核时间使用的是UTC时间，比北京时间晚8个小时</p><p>也不一定，看实际情况</p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内核</tag>
      
      <tag>安卓内核</tag>
      
      <tag>UTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>colab运行google最新开源模型Gemma</title>
    <link href="/2024/02/22/colab%E8%BF%90%E8%A1%8Cgoogle%E6%9C%80%E6%96%B0%E5%BC%80%E6%BA%90%E6%A8%A1%E5%9E%8BGemma/"/>
    <url>/2024/02/22/colab%E8%BF%90%E8%A1%8Cgoogle%E6%9C%80%E6%96%B0%E5%BC%80%E6%BA%90%E6%A8%A1%E5%9E%8BGemma/</url>
    
    <content type="html"><![CDATA[<p>Google开源了新的大模型 <a href="https://blog.google/technology/developers/gemma-open-models/">Gemma</a> ，<a href="https://ai.google.dev/gemma/?utm_source=keyword&amp;utm_medium=referral&amp;utm_campaign=gemma_cta&amp;utm_content=">Gemma</a>是一系列轻量级、最先进的开放式<a href="https://opensource.googleblog.com/2024/02/building-open-models-responsibly-gemini-era.html">模型，</a>采用与创建<a href="https://deepmind.google/technologies/gemini/#introduction">Gemini</a>模型相同的研究和技术而构建。Gemma 由 Google DeepMind 和 Google 的其他团队开发，其灵感来自 Gemini，其名称反映了拉丁语_gemma_，意思是“宝石”。除了模型权重之外，我们还发布了工具来支持开发人员创新、促进协作并指导负责任地使用 Gemma 模型。</p><p>Gemma 是为推动人工智能创新的开发人员和研究人员的开放社区而构建的。您今天就可以开始与 Gemma 合作，使用 Kaggle 中的免费访问权限、Colab 笔记本的免费套餐以及首次使用 Google Cloud 用户的 300 美元积分。研究人员还可以申请高达 50 万美元的<a href="https://docs.google.com/forms/d/e/1FAIpQLSe0grG6mRFW6dNF3Rb1h_YvKqUp2GaXiglZBgA2Os5iTLWlcg/viewform">Google Cloud 积分来加速他们的项目。</a></p><p>google提供了keras3.0来提供跨所有主要框架的推理和监督微调 (SFT) 工具链：JAX、PyTorch 和 TensorFlow 。还有 即用型<a href="http://ai.google.dev/gemma/docs/get_started">Colab</a>和<a href="https://www.kaggle.com/models/google/gemma/code">Kaggle 笔记本</a>，以及与<a href="http://huggingface.co/google">Hugging Face</a>、<a href="https://github.com/google/maxtext">MaxText</a>、<a href="https://github.com/NVIDIA/GenerativeAIExamples/tree/main/models/Gemma">NVIDIA NeMo</a>和<a href="https://github.com/NVIDIA/TensorRT-LLM">TensorRT-LLM</a>等流行工具的集成，让您可以轻松开始使用 Gemma。</p><p>google也提供了一个快速指南来使用<a href="http://ai.google.dev/gemma">ai.google.dev/gemma</a></p><h2 id="kaggle-获取访问权限">kaggle 获取访问权限</h2><p>首先访问<a href="https://www.kaggle.com/models/google/gemma">Gemma在kaggle的页面</a>，登陆你的kaggle账号</p><figure><img src="https://cdn.studyinglover.com/pic/2024/02/e770e5ca6a8c87a9367efda0d48f306b.png" alt="" /><figcaption>image.png</figcaption></figure><p>这里会有一个 Request Access,点击(我这是已经有访问权限了，你点了之后也变成这样说明就成功了)</p><p>然后我们点击kaggle的设置，按照我的截图依次点击 <img src="https://cdn.studyinglover.com/pic/2024/02/0676b9c3968534cf2f0a24fc3efa121e.png" alt="image.png" /></p><p><img src="https://cdn.studyinglover.com/pic/2024/02/d31235cf85326598d78a01d3d2a179c3.png" alt="image.png" /> <img src="https://cdn.studyinglover.com/pic/2024/02/ee052cc9137ba36a42f363d492108f73.png" alt="image.png" /> 你的浏览器会下载一个json文件，例如就像下面这样 <img src="https://cdn.studyinglover.com/pic/2024/02/8c67107479ef55d6358110e4d46778fb.png" alt="image.png" /></p><h2 id="colab运行">colab运行</h2><p>如果你有google账号那就直接打开<a href="https://colab.research.google.com/github/google/generative-ai-docs/blob/main/site/en/gemma/docs/lora_tuning.ipynb?utm_source=agd&amp;utm_medium=referral&amp;utm_campaign=open-in-colab&amp;hl=zh-cn">Gemma的colab页面</a> (没有的话就注册一个啦)</p><p>不出意外你会看到这样一个页面 <img src="https://cdn.studyinglover.com/pic/2024/02/7fc668b963da87075d5e3a2eab1f125a.png" alt="image.png" /></p><p>接下来点击右上角，按照我的截图顺序，选择显卡为t4 <img src="https://cdn.studyinglover.com/pic/2024/02/c5836766b7819385e337ce5877114a5b.png" alt="image.png" /> <img src="https://cdn.studyinglover.com/pic/2024/02/ded1ab56213ab089e2347ee0729ffab3.png" alt="image.png" /></p><p><img src="https://cdn.studyinglover.com/pic/2024/02/15fdbd16664eb511e1ec7c5653e267b8.png" alt="image.png" /> 点击保存，等待右上角变成这样，代表成功 <img src="https://cdn.studyinglover.com/pic/2024/02/5660f6ffaf4ce5a8e49f37753875194a.png" alt="image.png" /></p><p>接下来点击左侧 <img src="https://cdn.studyinglover.com/pic/2024/02/6ef657aa2cb9c7becdc67cdcc2dbc20d.png" alt="image.png" /></p><p>选择新建新密钥 <img src="https://cdn.studyinglover.com/pic/2024/02/c8f82c0c604a443f5af650b74f069e8b.png" alt="image.png" /> 先添加一个叫做 KAGGLE_USERNAME， 值写我们刚下载的json里面的username字段对应的值，</p><p>举个例子,加入我们下载的json是这样，那就填入的是example_username <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;example_username&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;12345678901112131415&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure> <img src="https://cdn.studyinglover.com/pic/2024/02/89f8465de454aa8118ed3cf6cd0c6a3c.png" alt="image.png" /> 再添加一个KAGGLE_KEY，值填写的是key对应的值，在刚才的例子那就是写12345678901112131415</p><figure><img src="https://cdn.studyinglover.com/pic/2024/02/2879bf0a0d806662d496fb33562a6a58.png" alt="" /><figcaption>image.png</figcaption></figure><p>记着打开两个的访问权限 ## 运行colab 运行notebook即可，就是点击这里的开始按钮就会执行这个小方格里的代码 <img src="https://cdn.studyinglover.com/pic/2024/02/b9bd6ed422800307321d8f7a0afa18b6.png" alt="image.png" /></p><p>里面有推理和微调的示例，感兴趣的同学可以自己实践</p><h2 id="评测">评测</h2><p>我这边运行了几个2b模型的例子，效果是实话实说，emmmmmmmmmmmm,一言难尽，可能是2b太拉胯了吧 <img src="https://cdn.studyinglover.com/pic/2024/02/a756dd4d922af5b0f45b40cdd649f646.png" alt="image.png" /></p><p>经过微调之后效果好了不少 <img src="https://cdn.studyinglover.com/pic/2024/02/d378a5211dd1157b013d61446bb8a946.png" alt="image.png" /></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gemma</tag>
      
      <tag>Google</tag>
      
      <tag>大模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sora技术报告 视频生成模型作为世界模拟器 笔记</title>
    <link href="/2024/02/16/Sora%E6%8A%80%E6%9C%AF%E6%8A%A5%E5%91%8A%20%E8%A7%86%E9%A2%91%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B%E4%BD%9C%E4%B8%BA%E4%B8%96%E7%95%8C%E6%A8%A1%E6%8B%9F%E5%99%A8%20%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/02/16/Sora%E6%8A%80%E6%9C%AF%E6%8A%A5%E5%91%8A%20%E8%A7%86%E9%A2%91%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B%E4%BD%9C%E4%B8%BA%E4%B8%96%E7%95%8C%E6%A8%A1%E6%8B%9F%E5%99%A8%20%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="sora技术报告-视频生成模型作为世界模拟器-笔记">Sora技术报告 视频生成模型作为世界模拟器 笔记</h1><p>技术报告原题目叫做 Video generation models as world simulators，翻译一下就是 <strong>视频生成模型作为世界模拟器</strong>，地址在<a href="https://openai.com/research/video-generation-models-as-world-simulators">这里</a> 。我写的时候是翻译和笔记并行，翻译感谢gpt4出色的翻译能力。</p><p>技术报告介绍了OpenAI在视频数据上大规模训练生成模型的探索，特别是在视频和图像上联合训练文本条件扩散模型，这些视频和图像具有不同的持续时间、分辨率和宽高比。通过利用在视频和图像潜码的时空补丁上操作的变压器架构，OpenAI的最大模型Sora能够生成高保真度的一分钟视频。研究结果表明，扩大视频生成模型的规模是构建物理世界通用模拟器的一个有前景的路径。</p><h2 id="主要内容">主要内容</h2><h3 id="视频数据的生成模型"><strong>视频数据的生成模型</strong></h3><p>之前的研究主要集中在使用各种方法（如循环网络、生成对抗网络、自回归变换器和扩散模型）对视频数据进行建模。Sora作为一个通用的视觉数据模型，能够生成持续时间、宽高比和分辨率各异的视频和图像，最长可达一分钟的高清视频。 <video controls="" loop="" muted="" playsinline="true" src="https://cdn.openai.com/tmp/s/title_0.mp4"></video></p><h3 id="将视觉数据转换为补丁"><strong>将视觉数据转换为补丁</strong></h3><p>受到大型语言模型在互联网规模数据上训练获得通用能力的启发，Sora采用视觉补丁作为有效的表示形式，将视频压缩成低维潜在空间，并将这些表示分解为时空补丁。 <img src="https://cdn.studyinglover.com/pic/2024/02/f76b1abdeee15868647eca59c2a484f4.png" /></p><p>看到这里我们就能发现这很openai, 把文字或者视频变成一个token，那接下来就能用上openai的看家本领gpt了。这里的视觉编码器我猜测是 I3D(Quo Vadis, Action Recognition? A New Model and the Kinetics Dataset, 一个视频理解模型，采用双流网络的架构，他的核心贡献是提出了如何对2d网络进行膨胀操作，同时提出了一个新的数据集 Kinetics)</p><h3 id="视频压缩网络"><strong>视频压缩网络</strong></h3><p>通过训练一个降低视觉数据维度的网络，Sora在这个压缩的潜在空间内进行训练并生成视频。同时，还训练了一个相应的解码器模型，将生成的潜在表示映射回像素空间。</p><p>在去年前年文字生成图片爆火的一段时间中，stable diffusion已经证明了在latent space生成图片效果很好，就是这张经典的图 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230420095529.png" alt="image.png" /></p><p>迁移到视频生成上面，在latent space生成一个视频，然后用一个类似VAE decoder的结构解码成正常的视频。(合理猜测是已经有论文做过了，但是我论文读的不多不清楚)</p><h3 id="spacetime-latent-patches">Spacetime Latent Patches</h3><p>给定一个压缩的输入视频，我们提取一系列时空补丁，这些补丁作为变换器令牌。这个方案也适用于图像，因为图像只是带有单一帧的视频。我们基于补丁的表示法使得Sora能够训练具有可变分辨率、持续时间和宽高比的视频和图像。在推理时，我们可以通过在一个适当大小的网格中随机初始化补丁来控制生成视频的大小。</p><p>这个不太好翻译，我只能翻译成时空上的隐空间，就是前面encoder抽出来的一串token, 和nlp的token类似，但是已经是好多个了，所以叫patch。通过初始化patch来控制视频大小我没太理解，蹲一个大佬的讲解或者实现</p><h3 id="scaling-transformers用于视频生成"><strong>Scaling transformers用于视频生成</strong></h3><p>Sora是一个扩散模型，通过预测原始“干净”补丁，训练接收噪声补丁（和条件信息，如文本提示）的输入。作为一个扩散变换器，Sora展示了在视频模型上的有效扩展。 <img src="https://cdn.studyinglover.com/pic/2024/02/c477b8b4601f9fbc924309f318ebff08.png" /></p><p>读到这他已经承认他是一个diffusion模型了，给出的这个示例也能看出来去噪的过程</p><h3 id="变量持续时间分辨率宽高比"><strong>变量持续时间、分辨率、宽高比</strong></h3><p>过去的图像和视频生成方法通常会将视频调整大小、裁剪或修剪为标准尺寸，例如，分辨率为 256x256 的 4 秒视频。与传统方法不同，Sora在其原生大小的数据上进行训练，提供了采样的灵活性，改善了构图和画面布局。对原始大小的数据进行训练有几个好处。</p><h4 id="语言理解"><strong>语言理解</strong></h4><p>通过对视频进行高度描述性的字幕训练，Sora能够生成高质量的视频，准确地遵循用户提示。</p><h4 id="图像和视频的提示"><strong>图像和视频的提示</strong></h4><p>Sora不仅可以根据文本提示生成视频，还可以接受现有图像或视频作为输入，执行一系列图像和视频编辑任务。</p><h4 id="模拟能力"><strong>模拟能力</strong></h4><p>Sora展示了一些有趣的模拟能力，如3D一致性、长期连贯性和对象持久性，以及与物理世界的简单交互模拟。</p><p>好吧我不理解，为啥直接在原视频训练效果就好了？难道openai卡多跑了所有可能？这让我想起来了CLIP那张整整一页的大图 <img src="https://cdn.studyinglover.com/pic/2024/02/f4f404c3b31a85c7a9f68139e5255b80.png" /></p><h3 id="通过图像和视频进行提示">通过图像和视频进行提示</h3><h4 id="dalle-图像动画">DALL·E 图像动画</h4><p>Sora 能够生成提供图像和提示作为输入的视频。下面我们展示基于<a href="https://openai.com/research/video-generation-models-as-world-simulators#fn-31">DALL·E 2</a>生成的示例视频和<a href="https://openai.com/research/video-generation-models-as-world-simulators#fn-30">DALL·E 3</a>图片。</p><p>我合理猜测下，这里和stable diffusion 图生图的方法差不多，最开始的采样不是一个纯粹的高斯噪声，而是将输入的图片过一个VAE的encoder(不一定是这个架构),接着继续采样</p><h4 id="扩展生成的视频">扩展生成的视频</h4><p>Sora 还能够在时间上向前或向后扩展视频。下面是四个视频，它们都是从生成的视频片段开始向后延伸的。因此，这四个视频的开头都不同，但所有四个视频的结局都是相同的。</p><p>和stable diffusion 图生图的方法应该也差不多？最开始的采样不是一个纯粹的高斯噪声，而是将输入的视频过一个视频的encoder(猜测I3D),接着继续采样。但是我很好奇怎么向前扩展？依然是预测一个噪声然后减去，只是训练的时候不训练去噪声过程训练加噪声过程？</p><h3 id="视频到视频编辑">视频到视频编辑</h3><p>扩散模型启用了多种根据文本提示编辑图像和视频的方法。下面我们应用其中一种方法，SDEdit，到Sora。这项技术使 Sora 能够零镜头地改变输入视频的风格和环境。</p><p>还是迁移了文字生成图片的方法，但是我没读过SDEdit这个论文</p><h3 id="连接视频">连接视频</h3><p>我们还可以使用 Sora 在两个输入视频之间逐渐进行插值，从而在具有完全不同主题和场景构成的视频之间创建无缝过渡。在下面的示例中，中心的视频插值在左侧和右侧的相应视频之间。</p><p>应该是第一个视频不断采样直到采样到有一帧和下一个视频第一帧相似度接近1或者差距很小？这里的评价指标应该是PSNR？显然这里不适合语义的指标</p><h2 id="图像生成能力">图像生成能力</h2><p>Sora 还能够生成图像。我们通过在时间范围为一帧的空间网格中排列高斯噪声块来实现这一点。该模型可以生成各种尺寸的图像，分辨率高达 2048x2048。</p><p>我猜测已经zero shot了</p><h2 id="新兴的模拟功能">新兴的模拟功能</h2><p>我们发现，视频模型在大规模训练时表现出许多有趣的新兴功能。这些功能使 Sora 能够模拟现实世界中人、动物和环境的某些方面。这些属性的出现对 3D、物体等没有任何明确的归纳偏差——它们纯粹是尺度现象。</p><p><strong>3D 一致性。</strong> Sora 可以生成带有动态摄像机运动的视频。随着摄像机的移动和旋转，人和场景元素在三维空间中一致移动。</p><p><strong>远程相干性和物体持久性。</strong> 视频生成系统面临的一个重大挑战是在采样长视频时保持时间一致性。我们发现 Sora 通常（尽管并非总是）能够有效地对短期和长期依赖关系进行建模。例如，我们的模型可以保留人、动物和物体，即使它们被遮挡或离开框架。同样，它可以在单个样本中生成同一角色的多个镜头，并在整个视频中保持其外观。</p><p><strong>与世界互动。</strong> 索拉有时可以用简单的方式模拟影响世界状况的动作。例如，画家可以在画布上留下新的笔触，并随着时间的推移而持续存在，或者一个人可以吃汉堡并留下咬痕。</p><p><strong>模拟数字世界。</strong> Sora 还能够模拟人工过程——一个例子是视频游戏。Sora 可以同时通过基本策略控制《我的世界》中的玩家，同时以高保真度渲染世界及其动态。这些能力可以通过用提及“我的世界”的标题提示 Sora 来零射击。</p><p>这些功能表明，视频模型的持续扩展是开发物理和数字世界以及生活在其中的物体、动物和人的高性能模拟器的一条有前途的道路。</p><h2 id="讨论">讨论</h2><p>Sora 目前作为模拟器表现出许多局限性。例如，它不能准确地模拟许多基本相互作用的物理过程，例如玻璃破碎。其他交互（例如吃食物）并不总是会产生对象状态的正确变化。<a href="https://openai.com/sora">我们在登陆页面</a>中列举了模型的其他常见故障模式，例如长时间样本中出现的不连贯性或对象的自发出现。</p><p>我们相信，Sora 今天所拥有的能力表明，视频模型的持续扩展是开发物理和数字世界以及生活在其中的物体、动物和人的强大模拟器的一条有前途的道路。</p><h3 id="结论">结论</h3><p>OpenAI认为，继续扩大视频模型的规模是开发能够模拟物理和数字世界及其中的对象、动物和人的高能力模拟器的有前景的路径。</p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>文字生成视频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>archlinux flutter开发踩坑</title>
    <link href="/2024/02/10/archlinux%20flutter%E5%BC%80%E5%8F%91%E8%B8%A9%E5%9D%91/"/>
    <url>/2024/02/10/archlinux%20flutter%E5%BC%80%E5%8F%91%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="archlinux-flutter开发踩坑">archlinux flutter开发踩坑</h1><p>archlinux是个好东西，但是开发flutter坑不少。2023年5月我配置了flutter,后来用得不多，23年11月还尝试过但是失败，最近又要使用，就来解决下。 ## 20230210 今天需要写一个手机app,突然发现构建不出来了，报错 <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">&gt; Failed <span class="hljs-built_in">to</span> <span class="hljs-built_in">create</span> parent <span class="hljs-built_in">directory</span> <span class="hljs-string">&#x27;/opt/flutter/packages/flutter_tools/gradle/.gradle&#x27;</span> when creating <span class="hljs-built_in">directory</span> <span class="hljs-string">&#x27;/opt/flutter/packages/flutter_tools/gradle/.gradle/buildOutputCleanup&#x27;</span><br><br>* Try:<br>&gt; Run <span class="hljs-keyword">with</span> <span class="hljs-comment">--stacktrace option to get the stack trace.</span><br>&gt; Run <span class="hljs-keyword">with</span> <span class="hljs-comment">--info or --debug option to get more log output.</span><br>&gt; Run <span class="hljs-keyword">with</span> <span class="hljs-comment">--scan to get full insights.</span><br><br>* Get more help <span class="hljs-keyword">at</span> <span class="hljs-keyword">https</span>://help.gradle.org<br><br>BUILD FAILED <span class="hljs-keyword">in</span> <span class="hljs-number">48</span>s<br>Exception: Gradle task assembleDebug failed <span class="hljs-keyword">with</span> exit code <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></p><p>你他妈别说，这问题还麻烦，只看这个还看不出来</p><p>先sudo运行一下，运行的时候保留环境变量 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -E flutter run<br></code></pre></td></tr></table></figure></p><p>失败了，同样问题。然后单独在Android下面跑一个<code>./gradlew clean</code></p><p>报错 <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">Welcome <span class="hljs-keyword">to</span> Gradle <span class="hljs-number">7.5</span>! Here are the highlights of this release: - Support <span class="hljs-keyword">for</span> Java <span class="hljs-number">18</span> - Support <span class="hljs-keyword">for</span> building with Groovy <span class="hljs-number">4</span> - Much more responsive continuous builds - Improved diagnostics <span class="hljs-keyword">for</span> dependency resolution For more details see https://docs.gradle.org/<span class="hljs-number">7.5</span>/release-notes.html Starting <span class="hljs-keyword">a</span> Gradle Daemon, <span class="hljs-number">1</span> incompatible Daemon could not <span class="hljs-keyword">be</span> reused, use --status <span class="hljs-keyword">for</span> details FAILURE: Build failed with <span class="hljs-keyword">an</span> exception. * Where: Settings <span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;/home/client/android/settings.gradle&#x27;</span> <span class="hljs-built_in">line</span>: <span class="hljs-number">25</span> * What went wrong: Error resolving plugin [id: <span class="hljs-string">&#x27;dev.flutter.flutter-plugin-loader&#x27;</span>, <span class="hljs-keyword">version</span>: <span class="hljs-string">&#x27;1.0.0&#x27;</span>] &gt; A problem occurred configuring project <span class="hljs-string">&#x27;:gradle&#x27;</span>. &gt; Could not create service of <span class="hljs-built_in">type</span> OutputFilesRepository using ExecutionGradleServices.createOutputFilesRepository(). &gt; java.io.FileNotFoundException: /<span class="hljs-keyword">opt</span>/flutter/packages/flutter_tools/gradle/.gradle/buildOutputCleanup/buildOutputCleanup.lock (权限不够) * Try: &gt; Run with --stacktrace option <span class="hljs-keyword">to</span> <span class="hljs-built_in">get</span> the stack trace. &gt; Run with --info <span class="hljs-built_in">or</span> --<span class="hljs-keyword">debug</span> option <span class="hljs-keyword">to</span> <span class="hljs-built_in">get</span> more <span class="hljs-built_in">log</span> output. &gt; Run with --scan <span class="hljs-keyword">to</span> <span class="hljs-built_in">get</span> full insights. * Get more <span class="hljs-keyword">help</span> at https://<span class="hljs-keyword">help</span>.gradle.org BUILD FAILED in <span class="hljs-number">1</span>s<br></code></pre></td></tr></table></figure></p><p>写的很明显权限不够，给当前用户上权限 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R $(<span class="hljs-built_in">whoami</span>) /opt/flutter<br></code></pre></td></tr></table></figure></p><p>再次运行 <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs less">FAILURE: Build failed with an exception.<br><br>* What went wrong:<br>Could not resolve <span class="hljs-attribute">all files for configuration &#x27;classpath&#x27;.</span><br><span class="hljs-attribute">&gt; Could not resolve com.android.tools</span>:<span class="hljs-attribute">sdk-common</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>  Required <span class="hljs-attribute">by</span>:<br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">lint</span>:<span class="hljs-attribute">lint-model</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span><br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">builder</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">builder</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">manifest-merger</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span><br>   &gt; Could <span class="hljs-keyword">not</span> resolve com.android.<span class="hljs-attribute">tools</span>:<span class="hljs-attribute">sdk-common</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>      &gt; Could <span class="hljs-keyword">not</span> get resource <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/sdk-common/30.3.0/sdk-common-30.3.0.pom&#x27;</span>.<br>         &gt; Could <span class="hljs-keyword">not</span> GET <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/sdk-common/30.3.0/sdk-common-30.3.0.pom&#x27;</span>.<br>            &gt; The server may <span class="hljs-keyword">not</span> support the client&#x27;s requested TLS protocol <span class="hljs-attribute">versions</span>: (TLSv1.<span class="hljs-number">2</span>, TLSv1.<span class="hljs-number">3</span>). You may need to configure the client to allow other protocols to be used. <span class="hljs-attribute">See</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//docs.gradle.org/7.5/userguide/build_environment.html#gradle_system_properties</span><br>               &gt; Remote host terminated the handshake<br>&gt; Could <span class="hljs-keyword">not</span> resolve com.android.<span class="hljs-attribute">tools</span>:<span class="hljs-attribute">sdklib</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>  Required <span class="hljs-attribute">by</span>:<br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">builder</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">builder</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">manifest-merger</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span><br>   &gt; Could <span class="hljs-keyword">not</span> resolve com.android.<span class="hljs-attribute">tools</span>:<span class="hljs-attribute">sdklib</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>      &gt; Could <span class="hljs-keyword">not</span> get resource <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/sdklib/30.3.0/sdklib-30.3.0.pom&#x27;</span>.<br>         &gt; Could <span class="hljs-keyword">not</span> GET <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/sdklib/30.3.0/sdklib-30.3.0.pom&#x27;</span>.<br>            &gt; The server may <span class="hljs-keyword">not</span> support the client&#x27;s requested TLS protocol <span class="hljs-attribute">versions</span>: (TLSv1.<span class="hljs-number">2</span>, TLSv1.<span class="hljs-number">3</span>). You may need to configure the client to allow other protocols to be used. <span class="hljs-attribute">See</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//docs.gradle.org/7.5/userguide/build_environment.html#gradle_system_properties</span><br>               &gt; Remote host terminated the handshake<br>&gt; Could <span class="hljs-keyword">not</span> resolve com.android.<span class="hljs-attribute">tools</span>:<span class="hljs-attribute">repository</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>  Required <span class="hljs-attribute">by</span>:<br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>   &gt; Could <span class="hljs-keyword">not</span> resolve com.android.<span class="hljs-attribute">tools</span>:<span class="hljs-attribute">repository</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>      &gt; Could <span class="hljs-keyword">not</span> get resource <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/repository/30.3.0/repository-30.3.0.pom&#x27;</span>.<br>         &gt; Could <span class="hljs-keyword">not</span> GET <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/repository/30.3.0/repository-30.3.0.pom&#x27;</span>.<br>            &gt; The server may <span class="hljs-keyword">not</span> support the client&#x27;s requested TLS protocol <span class="hljs-attribute">versions</span>: (TLSv1.<span class="hljs-number">2</span>, TLSv1.<span class="hljs-number">3</span>). You may need to configure the client to allow other protocols to be used. <span class="hljs-attribute">See</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//docs.gradle.org/7.5/userguide/build_environment.html#gradle_system_properties</span><br>               &gt; Remote host terminated the handshake<br>&gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">aaptcompiler</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span>.<br>  Required <span class="hljs-attribute">by</span>:<br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>   &gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">aaptcompiler</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span>.<br>      &gt; Could <span class="hljs-keyword">not</span> get resource <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/build/aaptcompiler/7.3.0/aaptcompiler-7.3.0.pom&#x27;</span>.<br>         &gt; Could <span class="hljs-keyword">not</span> GET <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/build/aaptcompiler/7.3.0/aaptcompiler-7.3.0.pom&#x27;</span>.<br>            &gt; The server may <span class="hljs-keyword">not</span> support the client&#x27;s requested TLS protocol <span class="hljs-attribute">versions</span>: (TLSv1.<span class="hljs-number">2</span>, TLSv1.<span class="hljs-number">3</span>). You may need to configure the client to allow other protocols to be used. <span class="hljs-attribute">See</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//docs.gradle.org/7.5/userguide/build_environment.html#gradle_system_properties</span><br>               &gt; Remote host terminated the handshake<br>&gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">lint</span>:<span class="hljs-attribute">lint-typedef-remover</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>  Required <span class="hljs-attribute">by</span>:<br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>   &gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">lint</span>:<span class="hljs-attribute">lint-typedef-remover</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>      &gt; Could <span class="hljs-keyword">not</span> get resource <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/lint/lint-typedef-remover/30.3.0/lint-typedef-remover-30.3.0.pom&#x27;</span>.<br>         &gt; Could <span class="hljs-keyword">not</span> GET <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/lint/lint-typedef-remover/30.3.0/lint-typedef-remover-30.3.0.pom&#x27;</span>.<br>            &gt; The server may <span class="hljs-keyword">not</span> support the client&#x27;s requested TLS protocol <span class="hljs-attribute">versions</span>: (TLSv1.<span class="hljs-number">2</span>, TLSv1.<span class="hljs-number">3</span>). You may need to configure the client to allow other protocols to be used. <span class="hljs-attribute">See</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//docs.gradle.org/7.5/userguide/build_environment.html#gradle_system_properties</span><br>               &gt; Remote host terminated the handshake<br>&gt; Could <span class="hljs-keyword">not</span> resolve com.android.<span class="hljs-attribute">databinding</span>:<span class="hljs-attribute">baseLibrary</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span>.<br>  Required <span class="hljs-attribute">by</span>:<br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; androidx.<span class="hljs-attribute">databinding</span>:<span class="hljs-attribute">databinding-compiler-common</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>   &gt; Could <span class="hljs-keyword">not</span> resolve com.android.<span class="hljs-attribute">databinding</span>:<span class="hljs-attribute">baseLibrary</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span>.<br>      &gt; Could <span class="hljs-keyword">not</span> get resource <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/databinding/baseLibrary/7.3.0/baseLibrary-7.3.0.pom&#x27;</span>.<br>         &gt; Could <span class="hljs-keyword">not</span> GET <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/databinding/baseLibrary/7.3.0/baseLibrary-7.3.0.pom&#x27;</span>.<br>            &gt; The server may <span class="hljs-keyword">not</span> support the client&#x27;s requested TLS protocol <span class="hljs-attribute">versions</span>: (TLSv1.<span class="hljs-number">2</span>, TLSv1.<span class="hljs-number">3</span>). You may need to configure the client to allow other protocols to be used. <span class="hljs-attribute">See</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//docs.gradle.org/7.5/userguide/build_environment.html#gradle_system_properties</span><br>               &gt; Remote host terminated the handshake<br>&gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">utp</span>:<span class="hljs-attribute">android-device-provider-ddmlib-proto</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>  Required <span class="hljs-attribute">by</span>:<br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>   &gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">utp</span>:<span class="hljs-attribute">android-device-provider-ddmlib-proto</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>      &gt; Could <span class="hljs-keyword">not</span> get resource <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/utp/android-device-provider-ddmlib-proto/30.3.0/android-device-provider-ddmlib-proto-30.3.0.pom&#x27;</span>.<br>         &gt; Could <span class="hljs-keyword">not</span> GET <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/utp/android-device-provider-ddmlib-proto/30.3.0/android-device-provider-ddmlib-proto-30.3.0.pom&#x27;</span>.<br>            &gt; The server may <span class="hljs-keyword">not</span> support the client&#x27;s requested TLS protocol <span class="hljs-attribute">versions</span>: (TLSv1.<span class="hljs-number">2</span>, TLSv1.<span class="hljs-number">3</span>). You may need to configure the client to allow other protocols to be used. <span class="hljs-attribute">See</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//docs.gradle.org/7.5/userguide/build_environment.html#gradle_system_properties</span><br>               &gt; Remote host terminated the handshake<br>&gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">utp</span>:<span class="hljs-attribute">android-test-plugin-host-additional-test-output-proto</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>  Required <span class="hljs-attribute">by</span>:<br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>   &gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">utp</span>:<span class="hljs-attribute">android-test-plugin-host-additional-test-output-proto</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>      &gt; Could <span class="hljs-keyword">not</span> get resource <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/utp/android-test-plugin-host-additional-test-output-proto/30.3.0/android-test-plugin-host-additional-test-output-proto-30.3.0.pom&#x27;</span>.<br>         &gt; Could <span class="hljs-keyword">not</span> GET <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/utp/android-test-plugin-host-additional-test-output-proto/30.3.0/android-test-plugin-host-additional-test-output-proto-30.3.0.pom&#x27;</span>.<br>            &gt; The server may <span class="hljs-keyword">not</span> support the client&#x27;s requested TLS protocol <span class="hljs-attribute">versions</span>: (TLSv1.<span class="hljs-number">2</span>, TLSv1.<span class="hljs-number">3</span>). You may need to configure the client to allow other protocols to be used. <span class="hljs-attribute">See</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//docs.gradle.org/7.5/userguide/build_environment.html#gradle_system_properties</span><br>               &gt; Remote host terminated the handshake<br>&gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">utp</span>:<span class="hljs-attribute">android-test-plugin-host-retention-proto</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>  Required <span class="hljs-attribute">by</span>:<br>      <span class="hljs-attribute">unspecified</span>:<span class="hljs-attribute">unspecified</span>:unspecified &gt; com.android.<span class="hljs-attribute">application</span>:com.android.application.gradle.<span class="hljs-attribute">plugin</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> &gt; com.android.tools.<span class="hljs-attribute">build</span>:<span class="hljs-attribute">gradle</span>:<span class="hljs-number">7.3</span>.<span class="hljs-number">0</span><br>   &gt; Could <span class="hljs-keyword">not</span> resolve com.android.tools.<span class="hljs-attribute">utp</span>:<span class="hljs-attribute">android-test-plugin-host-retention-proto</span>:<span class="hljs-number">30.3</span>.<span class="hljs-number">0</span>.<br>      &gt; Could <span class="hljs-keyword">not</span> get resource <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/utp/android-test-plugin-host-retention-proto/30.3.0/android-test-plugin-host-retention-proto-30.3.0.pom&#x27;</span>.<br>         &gt; Could <span class="hljs-keyword">not</span> GET <span class="hljs-string">&#x27;https://dl.google.com/dl/android/maven2/com/android/tools/utp/android-test-plugin-host-retention-proto/30.3.0/android-test-plugin-host-retention-proto-30.3.0.pom&#x27;</span>.<br>            &gt; The server may <span class="hljs-keyword">not</span> support the client&#x27;s requested TLS protocol <span class="hljs-attribute">versions</span>: (TLSv1.<span class="hljs-number">2</span>, TLSv1.<span class="hljs-number">3</span>). You may need to configure the client to allow other protocols to be used. <span class="hljs-attribute">See</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//docs.gradle.org/7.5/userguide/build_environment.html#gradle_system_properties</span><br>               &gt; Remote host terminated the handshake<br><br>* <span class="hljs-attribute">Try</span>:<br>&gt; Run with --stacktrace option to get the stack trace.<br>&gt; Run with --info or --debug option to get more log output.<br>&gt; Run with --scan to get full insights.<br><br>* Get more help at <span class="hljs-attribute">https</span>:<span class="hljs-comment">//help.gradle.org</span><br><br>BUILD FAILED in <span class="hljs-number">54s</span><br><span class="hljs-number">4</span> actionable <span class="hljs-attribute">tasks</span>: <span class="hljs-number">4</span> executed<br></code></pre></td></tr></table></figure> 网络问题，先看一下java版本 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -version <br></code></pre></td></tr></table></figure></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">openjdk</span> version <span class="hljs-string">&quot;17.0.10&quot;</span> <span class="hljs-number">2024</span>-<span class="hljs-number">01</span>-<span class="hljs-number">16</span><br><span class="hljs-attribute">OpenJDK</span> Runtime Environment (build <span class="hljs-number">17</span>.<span class="hljs-number">0</span>.<span class="hljs-number">10</span>+<span class="hljs-number">7</span>)<br><span class="hljs-attribute">OpenJDK</span> <span class="hljs-number">64</span>-Bit Server VM (build <span class="hljs-number">17</span>.<span class="hljs-number">0</span>.<span class="hljs-number">10</span>+<span class="hljs-number">7</span>, mixed mode)<br></code></pre></td></tr></table></figure><p>可以显式地配置Gradle使用TLS协议,在gradle.properties文件 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle.properties">systemProp.jdk.tls.client.protocols=TLSv1.2,TLSv1.3<br><br></code></pre></td></tr></table></figure></p><p>这个时候<code>./gradlew clean</code>可以正常工作了，但是<code>./gradlew assembleDebug</code> 不能正常工作</p><p>这个时候，我打开了Android studio, it words!</p>]]></content>
    
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>flutter</tag>
      
      <tag>archlinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastapi集成google auth登录</title>
    <link href="/2024/01/21/fastapi%E9%9B%86%E6%88%90google%20auth%E7%99%BB%E5%BD%95/"/>
    <url>/2024/01/21/fastapi%E9%9B%86%E6%88%90google%20auth%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="fastapi集成google-auth登录">fastapi集成google auth登录</h1><h2 id="流程设计">流程设计</h2><h3 id="启动-google-登录流程">1. 启动 Google 登录流程</h3><ul><li><strong>前端</strong>：用户点击 Google 登录按钮。</li><li><strong>请求</strong>：前端发起请求到 <code>/user/login/google</code>。</li></ul><h3 id="后端处理-userlogingoogle-请求">2. 后端处理 <code>/user/login/google</code> 请求</h3><ul><li>后端生成一个重定向到 Google 认证服务器的 URL</li><li>后端将此 URL 发送给前端。</li></ul><h3 id="前端重定向">3. 前端重定向</h3><ul><li>前端接收到 URL 后，重定向用户到 Google 的登录页面。</li></ul><h3 id="用户登录并授权">4. 用户登录并授权</h3><ul><li>用户在 Google 页面上授权你的应用。</li></ul><h3 id="google-重定向回你的应用">5. Google 重定向回你的应用</h3><ul><li>Google 将用户重定向回你的应用，并在查询参数中附加一个授权码（code）。</li></ul><h3 id="前端发送授权码">6. 前端发送授权码</h3><ul><li><strong>前端</strong>：捕获此授权码并发送到 <code>/user/auth/google?code=$&#123;code&#125;</code>。</li><li><strong>请求</strong>：<code>POST /user/auth/google?code=$&#123;code&#125;</code>。</li></ul><h3 id="后端处理-userauthgooglecodecode-请求">7. 后端处理 <code>/user/auth/google?code=$&#123;code&#125;</code> 请求</h3><ul><li>后端接收授权码，并使用它向 Google 请求访问令牌。</li><li>使用此令牌，后端可以从 Google 获取用户信息（如用户名、邮箱等）。</li><li>后端检查此用户是否已在数据库中。如果不在，创建一个新用户。</li><li>后端生成一个会话或令牌（如 JWT），并将其发送回前端。</li></ul><h3 id="前端接收令牌">8. 前端接收令牌</h3><ul><li>前端接收令牌并存储在本地（如 localStorage、sessionStorage 或 cookie 中）。</li></ul><h3 id="前端使用令牌">9. 前端使用令牌</h3><ul><li>对于后续请求，前端将此令牌附加到请求的授权头中，以验证用户身份。</li></ul><h3 id="后端验证令牌">10. 后端验证令牌</h3><ul><li>对于需要身份验证的后续请求，后端验证传入的令牌，以确认用户的身份。</li></ul><h2 id="获取google密钥">获取google密钥</h2><h3 id="创建项目">创建项目</h3><p>首先前往Google Cloud Console ( <a href="https://console.cloud.google.com/">https://console.cloud.google.com/</a> ) 并创建一个新项目（如果尚未创建），然后在“API 和服务 &gt; 仪表板”部分中启用“Google+ API”。你会在这样一个界面。</p><figure><img src="https://cdn.studyinglover.com/pic/2024/01/ae35717c51d89eb88ab6852b4b00ef63.png" alt="" /><figcaption>image.png</figcaption></figure><p>如果找不到的话，请先找到初始页面，选择一个项目，然后你会看到这样一个页面<img src="https://cdn.studyinglover.com/pic/2024/01/a92b558de8f9cff3830a4146d9632e59.png" alt="image.png" /></p><h3 id="创建oauth权限">创建OAuth权限</h3><p>按照如图顺序点击 <img src="https://cdn.studyinglover.com/pic/2024/01/101627cfb52eddde0622707fda8c787b.png" alt="image.png" /></p><p>进入之后就到了前面的页面，然后点击 OAuth权限请求页面</p><p><img src="https://cdn.studyinglover.com/pic/2024/01/3ab8147866777e9cc08572a85fbf6eb1.png" alt="image.png" /> 接下来我们会进入注册应用界面，首先填入的应用名称还有你的邮箱 <img src="https://cdn.studyinglover.com/pic/2024/01/001cbe727e68da69261b7ba012e596de.png" alt="image.png" /> 在最下面填上你的开发者信息，保存并继续 <img src="https://cdn.studyinglover.com/pic/2024/01/2398bdedeb782ff071e92f176815f251.png" alt="image.png" /></p><p>一路向下，可以填入一些限制，我就直接继续了。下面添加测试用户，填入google账号的邮箱即可 <img src="https://cdn.studyinglover.com/pic/2024/01/38893303361225188c4bf4b80a0da71c.png" alt="image.png" /> 保存，在摘要再检查一遍以后保存创建即可。接下来你会看到这样的页面，这样子我们的OAuth就设置好了。 <img src="https://cdn.studyinglover.com/pic/2024/01/adbcb7f78f4f157a5c3275cd48af66ec.png" alt="image.png" /></p><h3 id="创建凭据">创建凭据</h3><p>我们下面创建应用，点击凭据 <img src="https://cdn.studyinglover.com/pic/2024/01/1fd3b8f8bf2e42bbf21eba64619ab516.png" alt="image.png" /> 点击创建凭据 <img src="https://cdn.studyinglover.com/pic/2024/01/acd4317727c70cc5282b72d6350cb585.png" alt="image.png" /> 选择OAuth客户端ID <img src="https://cdn.studyinglover.com/pic/2024/01/cb1e787b42c9b3c0d5f95f2c9bf8bae2.png" alt="image.png" /></p><p>选择应用类型web应用 <img src="https://cdn.studyinglover.com/pic/2024/01/a334a3cf9bd76fa8c57fa0be48b6b713.png" alt="image.png" /></p><p>填写名称，已获授权的 JavaScript 来源，已获授权的重定向 URI。已获授权的 JavaScript 来源 写的是你的开发，测试还有正式环境的域名，例如<code>http://localhost:8000</code>。已获授权的重定向 URI 写的是你的重定向地址例如<code>http://localhost:8000/user/auth/google</code></p><figure><img src="https://cdn.studyinglover.com/pic/2024/01/ff16e3fd7c0c5eeeb82646f737a40f1f.png" alt="" /><figcaption>image.png</figcaption></figure><p>你会看到这样一个页面，保存你的客户端 ID和客户端密钥 <img src="https://cdn.studyinglover.com/pic/2024/01/c6ccc6b85da45c876f8194d099173bbe.png" alt="image.png" /> ## 代码实践</p><p>创建一个<code>.env</code>文件 <img src="https://cdn.studyinglover.com/pic/2024/01/73c325e34f0eaf971e44980543a09c00.png" alt="image.png" /></p><p>我们创建一个fastapi的后端 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI, Depends<br><span class="hljs-keyword">from</span> fastapi.security <span class="hljs-keyword">import</span> OAuth2PasswordBearer<br><span class="hljs-keyword">from</span> fastapi.middleware.cors <span class="hljs-keyword">import</span> CORSMiddleware<br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> jose <span class="hljs-keyword">import</span> jwt<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> dotenv <span class="hljs-keyword">import</span> load_dotenv<br><br>load_dotenv()<br><br><br>app = FastAPI()<br><br>app.add_middleware(<br>    CORSMiddleware,<br>    allow_origins=[<span class="hljs-string">&quot;*&quot;</span>],  <span class="hljs-comment"># Allows all origins</span><br>    allow_credentials=<span class="hljs-literal">True</span>,<br>    allow_methods=[<span class="hljs-string">&quot;*&quot;</span>],  <span class="hljs-comment"># Allows all methods</span><br>    allow_headers=[<span class="hljs-string">&quot;*&quot;</span>],  <span class="hljs-comment"># Allows all headers</span><br>)<br><br><br><span class="hljs-comment"># Replace these with your own values from the Google Developer Console</span><br>GOOGLE_CLIENT_ID = os.environ.get(<span class="hljs-string">&quot;GOOGLE_CLIENT_ID&quot;</span>)<br>GOOGLE_CLIENT_SECRET = os.environ.get(<span class="hljs-string">&quot;GOOGLE_CLIENT_SECRET&quot;</span>)<br>GOOGLE_REDIRECT_URI = <span class="hljs-string">&quot;http://localhost:8000/auth/google&quot;</span><br><br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/login/google&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">login_google</span>():<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">f&quot;https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=<span class="hljs-subst">&#123;GOOGLE_CLIENT_ID&#125;</span>&amp;redirect_uri=<span class="hljs-subst">&#123;GOOGLE_REDIRECT_URI&#125;</span>&amp;scope=openid%20profile%20email&amp;access_type=offline&quot;</span><br>    &#125;<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/auth/google&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">auth_google</span>(<span class="hljs-params">code: <span class="hljs-built_in">str</span></span>):<br>    token_url = <span class="hljs-string">&quot;https://accounts.google.com/o/oauth2/token&quot;</span><br>    data = &#123;<br>        <span class="hljs-string">&quot;code&quot;</span>: code,<br>        <span class="hljs-string">&quot;client_id&quot;</span>: GOOGLE_CLIENT_ID,<br>        <span class="hljs-string">&quot;client_secret&quot;</span>: GOOGLE_CLIENT_SECRET,<br>        <span class="hljs-string">&quot;redirect_uri&quot;</span>: GOOGLE_REDIRECT_URI,<br>        <span class="hljs-string">&quot;grant_type&quot;</span>: <span class="hljs-string">&quot;authorization_code&quot;</span>,<br>    &#125;<br>    response = requests.post(token_url, data=data)<br>    access_token = response.json().get(<span class="hljs-string">&quot;access_token&quot;</span>)<br>    user_info = requests.get(<span class="hljs-string">&quot;https://www.googleapis.com/oauth2/v1/userinfo&quot;</span>, headers=&#123;<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">&#123;access_token&#125;</span>&quot;</span>&#125;)<br>    <span class="hljs-built_in">print</span>(user_info.json())<br>    <span class="hljs-keyword">return</span> user_info.json()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">import</span> uvicorn<br>    uvicorn.run(app, host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">8000</span>)<br></code></pre></td></tr></table></figure></p><p>同时我们需要一个前端，这里我们只有一个按钮来用于google登陆</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Login with Google<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleLogin</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://localhost:8000/login/google&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();</span><br><span class="language-javascript">            <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = data.<span class="hljs-property">url</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleRedirect</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> urlParams = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">search</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> code = urlParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;code&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (code) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`http://localhost:8000/auth/google?code=<span class="hljs-subst">$&#123;code&#125;</span>`</span>);</span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> userData = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;user-info&#x27;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(userData, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;handleRedirect()&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;handleLogin()&quot;</span>&gt;</span>Login with Google<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pre</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user-info&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>点击按钮你会进入平时你看到的google登陆的流程，流程成功后你会在前端页面看到用户的信息</p><p>就像这样 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;13&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;a1@gmail.com&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;verified_email&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;a &quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;given_name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;family_name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;picture&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;https://lh3.googleusercontent.com/a/ACLXM=s96-c&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;locale&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;zh-CN&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></p><p>同时后端也会在控制台打印出这个信息，我们已经成功通过了google的身份验证。我们可以再将他结合到自己的程序中</p>]]></content>
    
    
    
    <tags>
      
      <tag>fastapi</tag>
      
      <tag>后端</tag>
      
      <tag>google auth</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux下NTFS磁盘报错输入输出错误</title>
    <link href="/2024/01/15/linux%E4%B8%8BNTFS%E7%A3%81%E7%9B%98%E6%8A%A5%E9%94%99%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E9%94%99%E8%AF%AF/"/>
    <url>/2024/01/15/linux%E4%B8%8BNTFS%E7%A3%81%E7%9B%98%E6%8A%A5%E9%94%99%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="linux下ntfs磁盘报错输入输出错误">linux下NTFS磁盘报错输入输出错误</h1><p>简单来说就是我在linux下挂载了一个NTFS格式的移动硬盘，然后在使用的时候，今天我想删除一个文件夹，突然给了我一个报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入/输出错误<br></code></pre></td></tr></table></figure><p>看到这个错误，我开了几个终端，又是<code>ntfsfix</code>修磁盘,又是<code>dmseg</code>看日志,一通操作猛如虎，问题依然没解决</p><p>这个时候我们注意到(attention is all you need)，ntfs是微软的闭源格式，linux下的ntfs-3g是一个开源的ntfs驱动，这个驱动是不是有问题呢？</p><p>关机，打开linux,扫描并修复磁盘，删除，问题解决。</p>]]></content>
    
    
    
    <tags>
      
      <tag>踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Venn-Abers 预测器</title>
    <link href="/2024/01/15/Venn-Abers%20%E9%A2%84%E6%B5%8B%E5%99%A8/"/>
    <url>/2024/01/15/Venn-Abers%20%E9%A2%84%E6%B5%8B%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="venn-abers-预测器">Venn-Abers 预测器</h1><p>Venn-Abers 预测器 https://arxiv.org/pdf/1211.0025.pdf</p><p>是一种基于Venn预测器的新的专注于二元预测问题的统计方法。它们生成的是概率类型的预测，这些预测在标准假设下（即观察是从同一分布独立生成的）是很好校准的。这种预测器的一个关键特点是它们输出的是概率区间而不是单一的概率点。Venn-Abers 预测器可以与其他模型结合使用。</p><p>Venn-Abers 预测器 输出的分数映射到经过良好校准的概率。</p><ul><li><strong>输入（Input）</strong><ul><li>数据特征（Data Features）: 模型抽出来的特征</li><li>目标变量（Target Variable): 监督学习的目标</li></ul></li><li><strong>输出（Output）</strong><ul><li>概率预测（Probability Predictions）: Venn-Abers预测器输出的是概率对，而不是单一的概率值。这意味着对于每个预测实例，它会给出一个概率范围，而不是一个具体的概率点。</li><li>校准质量评估（Calibration Quality Assessment）: 此外，还可以通过预期校准误差（ECE）等指标来评估预测的校准质量，这有助于理解模型在不同类别上的预测准确度。</li></ul></li></ul><p>have a try https://github.com/ptocca/VennABERS</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">calibrPts = [(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>),(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>),(<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>)]<br>testScores = [<span class="hljs-number">1.5</span>,<span class="hljs-number">2.5</span>,<span class="hljs-number">3.5</span>,<span class="hljs-number">4.5</span>,<span class="hljs-number">5.5</span>,<span class="hljs-number">6.5</span>]<br><br>p0,p1 = ScoresToMultiProbs(calibrPts,testScores)<br><span class="hljs-built_in">print</span>(p0, p1)<br></code></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[0.5        1.         1.66666667 2.33333333 3.         3.75      ]</span> <span class="hljs-string">[1. 1. 1. 1. 1. 1.]</span><br></code></pre></td></tr></table></figure><p>两个列表分别代表对应的代表上限和下限。</p>]]></content>
    
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Venn-Abers预测器的系统日志异常检测方法_顾兆军</title>
    <link href="/2024/01/15/%E5%9F%BA%E4%BA%8EVenn-Abers%E9%A2%84%E6%B5%8B%E5%99%A8%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95_%E9%A1%BE%E5%85%86%E5%86%9B/"/>
    <url>/2024/01/15/%E5%9F%BA%E4%BA%8EVenn-Abers%E9%A2%84%E6%B5%8B%E5%99%A8%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95_%E9%A1%BE%E5%85%86%E5%86%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="基于venn-abers预测器的系统日志异常检测方法_顾兆军">基于Venn-Abers预测器的系统日志异常检测方法_顾兆军</h1><p>收集日志信息、日志解析和日志的特征化提，包括收集日志信息、日志解析和日志的特征化提取。</p><p>每条日志都包含时间戳、日志优先级、系统组件和日志条目本身等信息的非结构化数据。日志解析会生成一个生成事件计数矩阵，每个日志事件模板对应一个标识符 ｂｌｏｃｋ＿ｉｄ，用于日志异常检测模型推理。在事件计数矩阵中，将具有相同 ｂｌｏｃｋ 的事件模板放在一行，即每一行代表一个块 ｂｌｏｃｋ，将每一行的事件模板统计出次数，即每一列代表一种事件类型。(因为日志是非结构化的，这样子实际上就合并了不同事件的日志，将其变成一个矩阵用于推理). <span class="math inline">\(X_{i,j}\)</span> 单元格中的值记录事件 ｊ 在块 ｉ 上发生的次数。TF-IDF是信息检索中一种公认的启发式方法，它通常用作信息检索和文本挖掘中文档的特征表示。</p><p>日志异常检测部分是推理一个二分类问题，然后获取分类概率(论文这里说的很复杂，实际上就是做一个二分类然后给一个概率)，接下来成对相邻违反者算法得到一个保序回归 函 数 <span class="math inline">\(f()\)</span> ０ 和 １ 用于测试对象 <span class="math inline">\(x_n\)</span>,<span class="math inline">\(s_0 = (\begin{matrix}z_1,z_2,\cdots,z_{n-1,}&amp;(x_n,0)\end{matrix})\)</span>为<span class="math inline">\(s_0\)</span>评分函数，<span class="math inline">\(s_1 = (z_1,z_2 \cdots,z_{n-1,}(x_n,1))\)</span> 为<span class="math inline">\(s_1\)</span>的评分函数.模型输出<span class="math inline">\((\begin{matrix}p_0,p_1\\\end{matrix})\)</span>,<span class="math inline">\(p_{0}=f_{0}\left(s_{0}\left(x\right)\right)\)</span> ,<span class="math inline">\(p_{1}=f_{1}\left(s_{1}\left(x\right)\right)\)</span></p><p>运行效率优化 实验过程中，发现由训练集标签和训练集对象得到的保序回归序列分布过于密集，不符合预期。ＨＤＦＳ 记录的日志行为单一［１８］ 使不同特征向量之间的差异较小，特征向量高度相似或重复。对于重复的得分，将其标签 <span class="math inline">\(ｙ_i\)</span> 累积求和并取平均值作为该得分新的标签.</p><p>算法有效性评估是平方损失，评估指标是f1</p>]]></content>
    
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手机平板远程访问kvm虚拟机的windows</title>
    <link href="/2023/12/23/%E6%89%8B%E6%9C%BA%E5%B9%B3%E6%9D%BF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEkvm%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84windows/"/>
    <url>/2023/12/23/%E6%89%8B%E6%9C%BA%E5%B9%B3%E6%9D%BF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEkvm%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84windows/</url>
    
    <content type="html"><![CDATA[<h1 id="手机平板远程访问kvm虚拟机的windows">手机平板远程访问kvm虚拟机的windows</h1><p>最近快期末周了，开始陆陆续续开始复习(预习)这学期的课，于是有了一个需求，我希望在床上用手机可以看我linux电脑上kvm虚拟机里面的网课。</p><p>首先使用<code>superRDP2</code>给kvm虚拟机里面的windows装上了rdp，并且在linux上测试了一下确保rdp是通的。接下来只需要解决手机和windows网络连通性的问题，我ping了一下，果然不通。</p><p>现在的虚拟机是在虚拟网络下面，能ping通才见鬼了。我们可以把虚拟机改成桥接模型，不出意外的话就能解决这个问题了</p><p>接着我收获了一个报错 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">操作失败: 桥接 win11 不存在<br><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;/usr/share/virt-manager/virtManager/addhardware.py&quot;</span>, <span class="hljs-selector-tag">line</span> <span class="hljs-number">359</span>, <span class="hljs-keyword">in</span> change_config_helper<br>    <span class="hljs-built_in">define_func</span>(devobj=devobj, do_hotplug=True, **define_args)<br>  File <span class="hljs-string">&quot;/usr/share/virt-manager/virtManager/object/domain.py&quot;</span>, <span class="hljs-selector-tag">line</span> <span class="hljs-number">862</span>, <span class="hljs-keyword">in</span> define_network<br>    self.<span class="hljs-built_in">_process_device_define</span>(editdev, xmlobj, do_hotplug)<br>  File <span class="hljs-string">&quot;/usr/share/virt-manager/virtManager/object/domain.py&quot;</span>, <span class="hljs-selector-tag">line</span> <span class="hljs-number">532</span>, <span class="hljs-keyword">in</span> _process_device_define<br>    self<span class="hljs-selector-class">.hotplug</span>(device=editdev)<br>  File <span class="hljs-string">&quot;/usr/share/virt-manager/virtManager/object/domain.py&quot;</span>, <span class="hljs-selector-tag">line</span> <span class="hljs-number">1124</span>, <span class="hljs-keyword">in</span> hotplug<br>    self.<span class="hljs-built_in">_update_device</span>(device)<br>  File <span class="hljs-string">&quot;/usr/share/virt-manager/virtManager/object/domain.py&quot;</span>, <span class="hljs-selector-tag">line</span> <span class="hljs-number">1085</span>, <span class="hljs-keyword">in</span> _update_device<br>    self._backend<span class="hljs-selector-class">.updateDeviceFlags</span>(xml, flags)<br>  File <span class="hljs-string">&quot;/usr/lib/python3.11/site-packages/libvirt.py&quot;</span>, <span class="hljs-selector-tag">line</span> <span class="hljs-number">3293</span>, <span class="hljs-keyword">in</span> updateDeviceFlags<br>    raise <span class="hljs-built_in">libvirtError</span>(<span class="hljs-string">&#x27;virDomainUpdateDeviceFlags() failed&#x27;</span>)<br>libvirt<span class="hljs-selector-class">.libvirtError</span>: 操作失败: 桥接 win11 不存在<br></code></pre></td></tr></table></figure></p><p>笑死就没有win11这个网络让我桥接，我想改成桥接还得改配置，多是一件麻烦事。很自然的我们就想到了端口转发。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -L [宿主机端口]:[虚拟机IP]:3389 [宿主机用户]@[宿主机IP]<br></code></pre></td></tr></table></figure><p>将<code>宿主机端口</code>，<code>虚拟机IP</code>，<code>宿主机用户</code>，<code>宿主机IP</code>，换成你的，运行，就像正常的ssh一样，就实现了端口转发，只是原本windows的ip写成宿主机的，端口写成宿主机端口。</p><p>有的同学会发现这个方法不work,是我们的配置出错了吗？是的，我们忘了一件事情：当使用SSH端口转发时，默认情况下，转发的端口可能仅绑定到localhost。所以我们需要修改命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -L 0.0.0.0:[宿主机端口]:[虚拟机IP]:3389 [宿主机用户]@[宿主机IP]<br></code></pre></td></tr></table></figure><p>work 了</p>]]></content>
    
    
    
    <tags>
      
      <tag>踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>phi-2弱智吧测评</title>
    <link href="/2023/12/21/phi-2%E5%BC%B1%E6%99%BA%E5%90%A7%E6%B5%8B%E8%AF%84/"/>
    <url>/2023/12/21/phi-2%E5%BC%B1%E6%99%BA%E5%90%A7%E6%B5%8B%E8%AF%84/</url>
    
    <content type="html"><![CDATA[<h1 id="phi-2弱智吧测评">phi-2弱智吧测评</h1><p>微软最近推出的 Phi-2 模型，拥有 27 亿参数，已在多个方面优于谷歌的 32 亿参数 Gemini Nano-2 模型。Phi-2 模型的特点是，虽然它的参数规模相对较小，但却展现出了与大型模型相媲美甚至超越的性能，这在人工智能领域引起了广泛关注。</p><p>微软的研究团队在设计 Phi-2 模型时，重点关注了“教科书质量”的数据，这种数据专门针对常识性知识和推理，涵盖科学、日常活动、心理学等领域。通过精心挑选的网络数据进一步扩充了训练语料库，确保了数据的质量和教育价值。此外，微软还运用创新技术在 Phi-2 中实现了规模化知识迁移，从而加速了训练收敛并显著提高了模型的基准测试分数。</p><p>在实验评估中，Phi-2 模型在各种聚合基准上的性能超越了 7B 和 13B 的 Mistral 模型、Llama2 模型，尤其是在多步骤推理任务（编码和数学）方面，甚至超过了大 25 倍的 Llama2-70B 模型。</p><p>使用 "弱智吧"上的问题对模型进行评估是一种创新的思路。这种评估方法能够对模型的理解能力、回答质量以及对复杂问题处理能力进行全面的测试。</p><p>下面是模型的推理代码，方便各位读者复现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForCausalLM<br><span class="hljs-keyword">import</span> torch<br><br>tokenizer = AutoTokenizer.from_pretrained(<br>    <span class="hljs-string">&quot;microsoft/phi-2&quot;</span>,<br>    trust_remote_code = <span class="hljs-literal">True</span><br>)<br><br>model = AutoModelForCausalLM.from_pretrained(<br>    <span class="hljs-string">&quot;microsoft/phi-2&quot;</span>,<br>    torch_dtype = <span class="hljs-string">&quot;auto&quot;</span>,<br>    device_map = <span class="hljs-string">&quot;auto&quot;</span>,<br>    trust_remote_code = <span class="hljs-literal">True</span><br>)<br><br>prompt = <span class="hljs-string">&quot;&quot;&quot;拉屎擦屁股是资本主义骗局吗？&quot;&quot;&quot;</span><br><span class="hljs-keyword">with</span> torch.no_grad():<br>  token_ids = tokenizer.encode(prompt, add_special_tokens=<span class="hljs-literal">False</span> ,return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)<br>  output_ids = model.generate(<br>      token_ids.to(model.device),<br>      max_new_tokens=<span class="hljs-number">512</span>,<br>      do_sample=<span class="hljs-literal">True</span>,<br>      temperature = <span class="hljs-number">0.3</span><br>  )<br><br>output = tokenizer.decode(output_ids[<span class="hljs-number">0</span>][token_ids.size(<span class="hljs-number">1</span>) :])<br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><p>下面是问答情况</p><table><thead><tr class="header"><th>问题</th><th>回答</th></tr></thead><tbody><tr class="odd"><td>咱们来玩个马吃草的扮演游戏吧，我草你马。</td><td>我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我是一个人。 我喜欢吃草，但是我不是马。我</td></tr><tr class="even"><td>拉屎擦屁股是资本主义骗局吗？</td><td>解答： 1. 我们可以通过计算拉屎擦屁股的每日收益率来推断资本主义骗局。如果拉屎擦屁股的每日收益率越高，说明资本主义骗局越越好；如果拉屎擦屁股的每日收益率越低，说明资本主义骗局越负。 2. 我们可以通过计算拉屎擦屁股的每日收益率来推断资本主义骗局。如果拉屎擦屁股的每日收益率越高，说明资本主义骗局越越好；如果拉屎擦屁股的每日收益率越低，说明资本主义骗局越负。 3. 我们可以通过计算拉屎擦屁股的每日收益率来推断资本主义骗�</td></tr><tr class="odd"><td>网吧能上网，为什么弱智吧不能上弱智？</td><td># 如果没有更多观察，就是因为没有更多观察，就不会更多观察。 # 我们可以让每个网站给出一个观察次数，然后把每个网站的观察次数排序后， # 取前k个网站的观察次数，即取前k个网站的观察次数最多的网站。 # 则这k个网站就是最多观察的网站。 # 然后，我们将这k个网站作为最多观察的网站，然后网站的观察次数加1， # 将这k个网站的观察次数加到前k个网站的观察次数中， # 并将前k个网站的观察次数排序后， # 取前k个网站的观察次数最多的网站，即取前k个网站的观察次数最多的网站。 # 因为这k个网</td></tr><tr class="even"><td>红绿色盲会不会读红鲤鱼与绿鲤鱼与驴？</td><td># 红鲤鱼与绿鲤鱼与驴，驴可能变成红鲤鱼，驴可能变成绿鲤鱼，驴可能变成黑鲤鱼，驴可能变成鲤鱼 # 颜色可能变成红鲤鱼，颜色可能变成绿鲤鱼，颜色可能变成黑鲤鱼，颜色可能变成鲤鱼 # 可能变成黑鲤鱼，黑鲤鱼可能变成红鲤鱼，黑鲤鱼可能变成绿鲤鱼，黑鲤鱼可能变成驴 # 颜色可能变成黑鲤鱼，黑鲤鱼可能变成红鲤鱼，黑鲤鱼可能变成绿鲤鱼，黑鲤鱼可能变成驴 # 颜色可能变成红鲤鱼，颜色可能变成绿鲤鱼，颜色可能变成黑鲤鱼，颜�</td></tr><tr class="odd"><td>我的作业得了F，是不是fantastic的意思？</td><td># 这个是为了让每个模型的输出和输入的维度一致，所以我们需要将F的维度和输入的维度一致， # 所以我们需要将F的维度和输入的维度一致，所以我们需要将F的维度和输入的维度一致，所以我们需要将F的维度和输入的维度一致，所以我们需要将F的维度和输入的维度一致，所以我们需要将F的维度和输入的维度一致，所以我们需要将F的维度和输入的维度一致，所以我们需要将F的维度和输入的维度一致，所以我们需要将F的维度和输入的维度一致，所以我们需要将F的维度和输入的维度一致，所以我们需要将F的维度和输入的维�</td></tr><tr class="even"><td>死人不会再死一次，那为什么不让死人上战场呢？</td><td>解答： 死人的上战场是一个空间，它是由死人的传播，这意味着死人的传播不是一个空间，而是一个空间的传播。死人的传播是由死人的行为，从而可以得到死人的行为的传播。死人的行为的传播是由死人的行为的传播，从而可以得到死人的行为的传播，以此类推。死人的行为的传播是由死人的行为的传播，从而可以得到死人的行为的传播，以此类推。死人的行为的传播是由死人的行为的传播，从而可以得到死人的行为的传播，以此类推。死人的行为的传播是由死人的行为的传播，从而可以得到死人的行为的传播，以此类推。死人的行为的传播是由死人的行为的传播，从而可以得到死人的行为的传播，以此</td></tr><tr class="odd"><td>我拿水兑水，得到的是稀水还是浓水？</td><td>Solution: The correct answer is A. Explanation: The word "稀水" means "light water" in Chinese, and the word "浓水" means "heavy water". Water is a substance that has different properties depending on its composition and purity. Pure water is called "light water" because it has a low density and a high specific heat capacity, which means it can absorb or release a lot of heat without changing its temperature much. Heavy water is called "heavy water" because it has a higher density and a lower specific heat capacity than pure water, which means it can absorb or release less heat without changing its temperature much. The word "拿" means "drink" in Chinese, and the word "拿水" means "drink water". The word "拿水" can be used to express different meanings depending on the context and the tone of the speaker. For example, in the sentence "我拿水兑水，得到的是稀水还是浓水？", the speaker is asking a question about the result of drinking water. The tone of the speaker is neutral and curious, and the word "得到的是" means "the result of" or "the outcome of". The speaker is implying that drinking water can have different effects on the body depending on the type of water. The word "稀水" and the word "浓水" are both adjectives that modify the noun "水" (water) in the sentence. The word "水" is a common noun that can be used as a subject or an object in a sentence. The word "水" can also be used as a verb to mean "to drink water" or "to quench thirst". The word "水" can also be used as a noun to mean "water" in general, or "liquid" in general. The word "水" can also be used as a verb to mean "to flow" or "to pour". Follow up exercises: 1. What is the difference between density and specific heat capacity? Solution: Density is the mass of a substance per unit volume, and specific heat capacity is the amount of heat required to raise the temperature of one gram of a substance</td></tr><tr class="even"><td>自由女神像每天一动不动，她真的自由么？</td><td>解答： 她是一个自由女神，但是她不是一个自由女神，她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点。她是一个自由女神，但是她是一个自由女神的基本特点</td></tr><tr class="odd"><td>出生证明丢了怎么证明自己出生了？</td><td># In[ ]: # 定义函数 def is_valid_birth_date(birth_date): try: birth_date = datetime.strptime(birth_date, "%Y-%m-%d") return True except ValueError: return False # In[ ]: # 测试函数 print(is_valid_birth_date("2021-01-01")) print(is_valid_birth_date("2021-01-02")) print(is_valid_birth_date("2021-01-03")) print(is_valid_birth_date("2021-01-04")) print(is_valid_birth_date("2021-01-05")) print(is_valid_birth_date("2021-01-06")) print(is_valid_birth_date("2021-01-07")) print(is_valid_birth_date("2021-01-08")) print(is_valid_birth_date("2021-01-09")) print(is_valid_birth_date("2021-01-10")) print(is_valid_birth_date("2021-01-11")) print(is_valid_birth_date("2021-01-12")) print(is_valid_birth_date("2021-01-13")) print(is_valid_birth_date("2021-01-14")) print(is_valid_birth_date("2021-01-15")) print(is_valid_birth_date("2021-01-16")) print(is_valid_birth_date("2021-01-17")) print(is_valid_birth_date("2021-01-18")) print(is_valid_birth_date("2021-01-19")) print(is_valid_birth_date("2021-01-20")) print(is_valid_birth_date("2021-01-21")) print(is_valid_birth_date("2021-01-22")) print(is_valid_birth_date("2021-01-23")) print</td></tr><tr class="even"><td>文言文是怎么称呼电脑的？</td><td># 可以称为第一次的脑研究者，比如那个人称为智能脑，或者智能人。 # 他的脑研究和科学是一样的，但是他的脑研究可以更深刻的描述，比如智能人的智能性，智能人的脑研究的结果，智能人的脑研究的方法，以及他的脑研究的结果的影响。 # 他的脑研究是一种智能的脑研究，智能脑研究是一种智能的脑研究。 # 他的脑研究是一种智能的脑研究，智能脑研究是一种智能的脑研究。 # 他的脑研究是一种智能的脑研究，智能脑研究是一种智能的脑研究。 # 他的脑研究是一种智能的脑研究，智能脑研究是一</td></tr><tr class="odd"><td>说好的救火为什么把火灭了？</td><td># 思路： # 先把火灭了的点放到一个数组中，然后再按照点的坐标排序，然后遍历数组，如果当前点的坐标大于火灭了的点，则继续遍历，如果当前点的坐标小于火灭了的点，则结束遍历，并将当前点和火灭了的点进行交换。 # 然后再按照火灭了的点排序，然后遍历数组，如果当前点的坐标大于火灭了的点，则继续遍历，如果当前点的坐标小于火灭了的点，则结束遍历，并将当前点和火灭了的点进行交换。 # 然后再按照火灭了的点排序，然后遍历数组，如果当前点的坐标大于火灭了的点，则继续遍历，�</td></tr><tr class="even"><td>我吃了狗拉的屎拉出来的还是狗屎吗？</td><td># 如果不是知识语言，我也不会说，只会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # 如果是知识语言，我会说是否有知识语言。 # �</td></tr><tr class="odd"><td>用橡皮筋把脖子勒住，是不是全身都退烧了呢？</td><td>第二天，那个人的脖子都是白脖子，他们都是脖子筋把脖子住，是不是全身都退烧了呢？第三天，那个人的脖子都是白脖子，他们都是脖子筋把脖子住，是不是全身都退烧了呢？第四天，那个人的脖子都是白脖子，他们都是脖子筋把脖子住，是不是全身都退烧了呢？第五天，那个人的脖子都是白脖子，他们都是脖子筋把脖子住，是不是全身都退烧了呢？第六天，那个人的脖子都是白脖子，他们都是脖子筋把脖子住，是不是全身都退烧了呢？第七天，那个人的脖子都是白脖子，他们都是脖子筋把脖子住，是不是全身都退烧了呢？第八天，那个人的脖子---</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>大模型</tag>
      
      <tag>phi-2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>poe的gemini pro或是百度开发</title>
    <link href="/2023/12/15/poe%E7%9A%84gemini%20pro%E6%88%96%E6%98%AF%E7%99%BE%E5%BA%A6%E5%BC%80%E5%8F%91/"/>
    <url>/2023/12/15/poe%E7%9A%84gemini%20pro%E6%88%96%E6%98%AF%E7%99%BE%E5%BA%A6%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="poe的gemini-pro或是百度开发">poe的gemini pro或是百度开发</h1><p>没啥想说的，单走一张图</p><p><img src="https://cdn.studyinglover.com/pic/2023/12/98c9c44118ebd3444ad2fdfe494f8a85.png" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>google gemini</tag>
      
      <tag>poe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>google gemini api使用</title>
    <link href="/2023/12/14/google%20gemini%20api%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/12/14/google%20gemini%20api%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="google-gemini-api使用">google gemini api使用</h1><p>google最近发布了gemini api，我之前在<a href="https://studyinglover.com/2023/12/14/google%20gemini%20api%E7%94%B3%E8%AF%B7/">我的博客</a> 介绍了如何申请，这篇文章来介绍如何使用</p><p>首先下载google的库 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -q -U google-generativeai<br></code></pre></td></tr></table></figure></p><p>引入必要的包 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pathlib<br><span class="hljs-keyword">import</span> textwrap<br><br><span class="hljs-keyword">import</span> google.generativeai <span class="hljs-keyword">as</span> genai<br><br><span class="hljs-keyword">from</span> IPython.display <span class="hljs-keyword">import</span> display<br><span class="hljs-keyword">from</span> IPython.display <span class="hljs-keyword">import</span> Markdown<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">to_markdown</span>(<span class="hljs-params">text</span>):<br>  text = text.replace(<span class="hljs-string">&#x27;•&#x27;</span>, <span class="hljs-string">&#x27;  *&#x27;</span>)<br>  <span class="hljs-keyword">return</span> Markdown(textwrap.indent(text, <span class="hljs-string">&#x27;&gt; &#x27;</span>, predicate=<span class="hljs-keyword">lambda</span> _: <span class="hljs-literal">True</span>))<br></code></pre></td></tr></table></figure></p><p>先将api添加到环境变量 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> GOOGLE_API_KEY=你的密钥<br></code></pre></td></tr></table></figure></p><p>接下来获取密钥 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">GOOGLE_API_KEY=os.getenv(<span class="hljs-string">&#x27;GOOGLE_API_KEY&#x27;</span>)<br>genai.configure(api_key=GOOGLE_API_KEY)<br></code></pre></td></tr></table></figure></p><p>可以通过下面命令获取所有模型 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> genai.list_models():<br>  <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;generateContent&#x27;</span> <span class="hljs-keyword">in</span> m.supported_generation_methods:<br>    <span class="hljs-built_in">print</span>(m.name)<br></code></pre></td></tr></table></figure></p><h2 id="文本输入">文本输入</h2><p>接下来创建一个模型，并输入一个prompt,获取输出并转换成markdown格式 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">model = genai.GenerativeModel(<span class="hljs-string">&#x27;gemini-pro&#x27;</span>)<br>response = model.generate_content(<span class="hljs-string">&quot;What is the meaning of life?&quot;</span>)<br>to_markdown(response.text)<br></code></pre></td></tr></table></figure> 如果你的prompt比较奇奇怪怪，那么可能会不能正常获取到返回，你可以查看<code>response.prompt_feedback</code>获取原因。</p><p>还有一个有趣的事情，gemini可能会生成多个输出(candidates)，通过<code>response.candidates</code>获取。</p><p>流式传输也是可以的 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">response = model.generate_content(<span class="hljs-string">&quot;What is the meaning of life?&quot;</span>, stream=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> response:<br>  <span class="hljs-built_in">print</span>(chunk.text)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;_&quot;</span>*<span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure></p><h2 id="图片输入">图片输入</h2><p>下载官方的示例图片 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">curl -o <span class="hljs-selector-tag">image</span><span class="hljs-selector-class">.jpg</span> https:<span class="hljs-comment">//t0.gstatic.com/licensed-image?q=tbn:ANd9GcQ_Kevbk21QBRy-PgB4kQpS79brbmmEG7m3VOTShAn4PecDU5H5UxrJxE3Dw1JiaG17V88QIol19-3TM2wCHw</span><br></code></pre></td></tr></table></figure> 通过下面的代码可以查看图片 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> PIL.Image<br><br>img = PIL.Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;image.jpg&#x27;</span>)<br>img<br></code></pre></td></tr></table></figure> <img src="https://cdn.studyinglover.com/pic/2023/12/1042f6e0b6fa63d40f96fcd18fcf4be8.png" alt="image.png" /></p><p>接下来创建模型,并获取输出 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">model = genai.GenerativeModel(<span class="hljs-string">&#x27;gemini-pro-vision&#x27;</span>)<br>response = model.generate_content(img)<br><br>to_markdown(response.text)<br></code></pre></td></tr></table></figure></p><p>也可以同时提供文本和图像 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">response = model.generate_content([<span class="hljs-string">&quot;Write a short, engaging blog post based on this picture. It should include a description of the meal in the photo and talk about my journey meal prepping.&quot;</span>, img], stream=<span class="hljs-literal">True</span>)<br>response.resolve()<br>to_markdown(response.text)<br></code></pre></td></tr></table></figure></p><h2 id="聊天">聊天</h2><p>初始化聊天：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">model = genai.GenerativeModel(<span class="hljs-string">&#x27;gemini-pro&#x27;</span>)<br>chat = model.start_chat(history=[])<br>chat<br></code></pre></td></tr></table></figure><p>开始聊天 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">response = chat.send_message(<span class="hljs-string">&quot;In one sentence, explain how a computer works to a young child.&quot;</span>)<br>to_markdown(response.text)<br></code></pre></td></tr></table></figure></p><blockquote><p><strong>你一定想在这里使用图片聊天，请注意，<code>gemini-pro-vision</code>未针对多轮聊天进行优化</strong></p></blockquote><p>可以通过<code>chat.history</code> 获取聊天历史 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> message <span class="hljs-keyword">in</span> chat.history:<br>  display(to_markdown(<span class="hljs-string">f&#x27;**<span class="hljs-subst">&#123;message.role&#125;</span>**: <span class="hljs-subst">&#123;message.parts[<span class="hljs-number">0</span>].text&#125;</span>&#x27;</span>))<br></code></pre></td></tr></table></figure></p><p>流式传输也可以使用 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">response = chat.send_message(<span class="hljs-string">&quot;Okay, how about a more detailed explanation to a high schooler?&quot;</span>, stream=<span class="hljs-literal">True</span>)<br><br><span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> response:<br>  <span class="hljs-built_in">print</span>(chunk.text)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;_&quot;</span>*<span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure></p><h2 id="嵌入">嵌入</h2><p>使用起来没啥可说的 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">result = genai.embed_content(<br>    model=<span class="hljs-string">&quot;models/embedding-001&quot;</span>,<br>    content=<span class="hljs-string">&quot;What is the meaning of life?&quot;</span>,<br>    task_type=<span class="hljs-string">&quot;retrieval_document&quot;</span>,<br>    title=<span class="hljs-string">&quot;Embedding of single string&quot;</span>)<br><br><span class="hljs-comment"># 1 input &gt; 1 vector output</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(result[<span class="hljs-string">&#x27;embedding&#x27;</span>])[:<span class="hljs-number">50</span>], <span class="hljs-string">&#x27;... TRIMMED]&#x27;</span>)<br></code></pre></td></tr></table></figure></p><p>当然，批量处理也可以 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">result = genai.embed_content(<br>    model=<span class="hljs-string">&quot;models/embedding-001&quot;</span>,<br>    content=[<br>      <span class="hljs-string">&#x27;What is the meaning of life?&#x27;</span>,<br>      <span class="hljs-string">&#x27;How much wood would a woodchuck chuck?&#x27;</span>,<br>      <span class="hljs-string">&#x27;How does the brain work?&#x27;</span>],<br>    task_type=<span class="hljs-string">&quot;retrieval_document&quot;</span>,<br>    title=<span class="hljs-string">&quot;Embedding of list of strings&quot;</span>)<br><br><span class="hljs-comment"># A list of inputs &gt; A list of vectors output</span><br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> result[<span class="hljs-string">&#x27;embedding&#x27;</span>]:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(v)[:<span class="hljs-number">50</span>], <span class="hljs-string">&#x27;... TRIMMED ...&#x27;</span>)<br></code></pre></td></tr></table></figure></p><p>你甚至可以传递一个<code>chat.history</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">result = genai.embed_content(<br>    model = <span class="hljs-string">&#x27;models/embedding-001&#x27;</span>,<br>    content = chat.history)<br><br><span class="hljs-comment"># 1 input &gt; 1 vector output</span><br><span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(result[<span class="hljs-string">&#x27;embedding&#x27;</span>]):<br>  <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(v)[:<span class="hljs-number">50</span>], <span class="hljs-string">&#x27;... TRIMMED...&#x27;</span>)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
    <tags>
      
      <tag>google gemini</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>google gemini api申请</title>
    <link href="/2023/12/14/google%20gemini%20api%E7%94%B3%E8%AF%B7/"/>
    <url>/2023/12/14/google%20gemini%20api%E7%94%B3%E8%AF%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="google-gemini-api申请">google gemini api申请</h1><p>首先登陆 https://ai.google.dev/pricing <img src="https://cdn.studyinglover.com/pic/2023/12/af1a86c0c368f9368f6d125902d3b610.png" alt="image.png" /></p><p>往下滑，看一看到免费选项，每分钟60词请求对于个人完全够用，点击进入 <img src="https://cdn.studyinglover.com/pic/2023/12/bb87b408e483fe0fa5999a2aacff299a.png" alt="image.png" /></p><p>进入后，先点击<code>Get API key</code>,然后点击<code>Create API kay in new project</code> <img src="https://cdn.studyinglover.com/pic/2023/12/0c224ceeb462739a69a26f9c98b9b76b.png" alt="image.png" /></p><p>接下来可以看到类似的页面 <img src="https://cdn.studyinglover.com/pic/2023/12/262c805af52491f846e38a9d1a2ff533.png" alt="image.png" /></p><p>复制你的key</p><p>在命令行通过下面的方式检查是否正常 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl \ -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> \ -d <span class="hljs-string">&#x27;&#123; &quot;prompt&quot;: &#123; &quot;text&quot;: &quot;Write a story about a magic backpack&quot;&#125; &#125;&#x27;</span> \ <span class="hljs-string">&quot;https://generativelanguage.googleapis.com/v1beta3/models/text-bison-001:generateText?key=YOUR_API_KEY&quot;</span><br></code></pre></td></tr></table></figure></p><p>可以看到 <img src="https://cdn.studyinglover.com/pic/2023/12/001f17bea345dd0fee9edadbca84c6ed.png" alt="image.png" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>google gemini</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建用于复杂数据处理的高效UDP服务器和客户端</title>
    <link href="/2023/12/07/%E6%9E%84%E5%BB%BA%E7%94%A8%E4%BA%8E%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%9A%84%E9%AB%98%E6%95%88UDP%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <url>/2023/12/07/%E6%9E%84%E5%BB%BA%E7%94%A8%E4%BA%8E%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%9A%84%E9%AB%98%E6%95%88UDP%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="构建用于复杂数据处理的高效udp服务器和客户端">构建用于复杂数据处理的高效UDP服务器和客户端</h1><h2 id="引言">引言</h2><p>在当今快速发展的网络通信世界中，理解和应用各种通信协议至关重要。UDP（用户数据报协议）以其低延迟和高效率的特点，在实时数据传输中扮演着关键角色。本文将详细探讨如何使用Python实现UDP服务器和客户端，以处理复杂数据格式。</p><h2 id="第1节-理解udp通信基础">第1节: 理解UDP通信基础</h2><p>UDP是一种无连接协议，提供快速数据包交换服务。它不提供像TCP那样的数据传输可靠性保证，但其低开销特性使其适用于高速传输和一定丢包率可容忍的场景。</p><h2 id="第2节-设置python环境">第2节: 设置Python环境</h2><p>使用Python的<code>socket</code>库，无需额外安装即可创建UDP服务器和客户端。</p><h2 id="第3节-实现udp服务器">第3节: 实现UDP服务器</h2><p>创建UDP服务器涉及以下关键步骤： - 使用<code>socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</code>创建新的socket对象。 - 通过<code>sock.bind((HOST, PORT))</code>绑定地址和端口。 - 使用<code>sock.recvfrom(1024)</code>接收数据。</p><h3 id="示例代码">示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start_udp_server</span>(<span class="hljs-params">host, port</span>):<br>    server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>    server_socket.bind((host, port))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;UDP Server started on <span class="hljs-subst">&#123;host&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        data, addr = server_socket.recvfrom(<span class="hljs-number">1024</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Received message: <span class="hljs-subst">&#123;data&#125;</span> from <span class="hljs-subst">&#123;addr&#125;</span>&quot;</span>)<br>        <span class="hljs-comment"># 这里可以添加数据处理逻辑</span><br><br>start_udp_server(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">6000</span>)<br></code></pre></td></tr></table></figure><h3 id="高级应用">高级应用</h3><ul><li><strong>异步处理</strong>：为提高性能，考虑使用异步IO处理数据。</li><li><strong>错误处理</strong>：添加适当的错误处理机制以提高服务器稳定性。</li></ul><h2 id="第4节-实现udp客户端">第4节: 实现UDP客户端</h2><p>客户端的实现重点在于发送数据： - 创建socket。 - 通过<code>sock.sendto(message, (HOST, PORT))</code>发送数据。</p><h3 id="示例代码-1">示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_udp_message</span>(<span class="hljs-params">host, port, message</span>):<br>    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>    client_socket.sendto(message.encode(), (host, port))<br>    data, server = client_socket.recvfrom(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Received response: <span class="hljs-subst">&#123;data&#125;</span> from <span class="hljs-subst">&#123;server&#125;</span>&quot;</span>)<br><br>send_udp_message(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">6000</span>, <span class="hljs-string">&#x27;Hello, UDP Server!&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="数据包格式">数据包格式</h3><ul><li><strong>格式设计</strong>：设计符合服务器预期的数据包格式，如对雷达数据的特定编码。</li><li><strong>验证机制</strong>：实现数据包完整性和正确性的验证机制。</li></ul><h2 id="第5节-服务器和客户端的集成">第5节: 服务器和客户端的集成</h2><p>集成测试包括： - 确保数据包格式正确。 - 服务器正确解析数据包。 - 确保通信端口设置正确。</p><h2 id="第6节-高级主题">第6节: 高级主题</h2><ul><li><strong>重传策略</strong>：UDP丢包问题的解决方案，如应用层重传机制。</li><li><strong>安全性</strong>：考虑数据传输的加密和验证机制。</li></ul><h2 id="结论">结论</h2><p>介绍了如何使用Python创建UDP服务器和客户端，并根据不同数据类型处理复杂数据包。虽然UDP不保证数据完整性和顺序，但其速度和效率优势使其成为实时数据处理的理想选择。</p><h2 id="参考文献">参考文献</h2><ul><li><a href="https://docs.python.org/3/library/socket.html">Python官方文档 - socket编程</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matplotlib中文字体渲染</title>
    <link href="/2023/12/04/matplotlib%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E6%B8%B2%E6%9F%93/"/>
    <url>/2023/12/04/matplotlib%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E6%B8%B2%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<h1 id="matplotlib中文字体渲染">matplotlib中文字体渲染</h1><p>matplotlib 在画图例的时候不可避免的需要使用中文字体，但是有的时候电脑自带的字体不能渲染中文，这就需要我们自己解决字体问题。</p><p>首先用一个代码看一下系统里的字体哪些可以正常渲染中文字体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.font_manager <span class="hljs-keyword">as</span> font_manager<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_chinese_fonts</span>(<span class="hljs-params">test_string</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    This function tests each available font to see if it can render the given Chinese string</span><br><span class="hljs-string">    without causing any rendering issues or noticeable delays.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    fonts = font_manager.findSystemFonts(fontpaths=<span class="hljs-literal">None</span>, fontext=<span class="hljs-string">&#x27;ttf&#x27;</span>)<br>    working_fonts = []<br><br>    <span class="hljs-keyword">for</span> font <span class="hljs-keyword">in</span> fonts:<br>        <span class="hljs-keyword">try</span>:<br>            prop = font_manager.FontProperties(fname=font)<br>            plt.figure()<br>            start_time = time.time()<br>            plt.text(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, test_string, fontproperties=prop, ha=<span class="hljs-string">&#x27;center&#x27;</span>, va=<span class="hljs-string">&#x27;center&#x27;</span>)<br>            plt.close()<br>            end_time = time.time()<br>            render_time = end_time - start_time<br><br>            <span class="hljs-comment"># Check if the rendering time is less than a certain threshold (e.g., 0.5 seconds)</span><br>            <span class="hljs-keyword">if</span> render_time &lt; <span class="hljs-number">5</span>:<br>                working_fonts.append(font)<br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-comment"># If there&#x27;s an error rendering with this font, skip it</span><br>            <span class="hljs-keyword">continue</span><br><br>    <span class="hljs-keyword">return</span> working_fonts<br><br><span class="hljs-comment"># Test string: &quot;不卡顿&quot;</span><br>test_string = <span class="hljs-string">&quot;不卡顿&quot;</span><br>fonts = find_chinese_fonts(test_string)<br>fonts<br><br></code></pre></td></tr></table></figure><p>假设输出了 <code>'/usr/share/fonts/truetype/liberation/LiberationMono-Bold.ttf'</code></p><p>使用这个字体的代码就是 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> matplotlib.font_manager <span class="hljs-keyword">import</span> FontProperties<br><br><span class="hljs-comment"># 创建一个FontProperties对象，指定字体文件路径</span><br>font = FontProperties(fname=<span class="hljs-string">&#x27;/usr/share/fonts/truetype/liberation/LiberationMono-Bold.ttf&#x27;</span>)<br><br><span class="hljs-comment"># 绘制散点图</span><br>plt.scatter([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>], color=<span class="hljs-string">&quot;red&quot;</span>)<br><br><span class="hljs-comment"># 添加图例，使用指定的字体</span><br>plt.legend([<span class="hljs-string">&quot;例子&quot;</span>], prop=font)<br><br><span class="hljs-comment"># 显示图像</span><br>plt.show()<br></code></pre></td></tr></table></figure></p><p>假如代码没找到可用字体呢？</p><p>手动下载字体。以下是一些中文字体的官方下载页面或者信誉良好的资源：</p><ol type="1"><li><strong>思源宋体（Source Han Serif）</strong>:<ul><li>官方GitHub页面: <a href="https://github.com/adobe-fonts/source-han-serif">Adobe Fonts</a></li><li>选择您需要的语言子集，例如简体中文（SC），并下载相应的 OTF 文件。</li></ul></li><li><strong>思源黑体（Source Han Sans）</strong>:<ul><li>官方GitHub页面: <a href="https://github.com/adobe-fonts/source-han-sans">Adobe Fonts</a></li><li>同样地，选择您需要的语言子集，并下载 OTF 文件。</li></ul></li><li><strong>文泉驿正黑（WenQuanYi Zen Hei）</strong>:<ul><li>官方网站: <a href="http://wenq.org/wqy2/index.cgi?ZenHei">WenQuanYi</a></li><li>可以直接下载 TTF 文件。</li></ul></li></ol><p>下载完成后然后<code>font = FontProperties(fname='/usr/share/fonts/truetype/liberation/LiberationMono-Bold.ttf')</code> 引入即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TruFor笔记和代码复现</title>
    <link href="/2023/11/28/TruFor%E7%AC%94%E8%AE%B0%E5%92%8C%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/11/28/TruFor%E7%AC%94%E8%AE%B0%E5%92%8C%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="trufor-笔记和代码复现">TruFor 笔记和代码复现</h1><p>最近有个新闻很火，说<a href="https://www.zhihu.com/question/631987370">谷歌 AI 技术曾判定美国登月任务的照片存在虚假内容</a> 有<a href="https://www.zhihu.com/question/631868923/answer/3304947739">大佬找到了出处</a>，使用的是 google 的论文<a href="https://doi.org/10.48550/arXiv.2212.10957">arxiv</a>，代码开源在<a href="https://github.com/grip-unina/TruFor">GitHub</a></p><h2 id="笔记">笔记</h2><p>这篇论文介绍了一个名为 TruFor 的图像伪造检测和定位框架。该框架可以应用于各种图像处理方法，包括基于深度学习的伪造方法。TruFor 利用了 RGB 图像和一个学习的噪音敏感指纹来提取高级和低级痕迹，最终输出像素级别的定位图和整个图像的完整性分数，以及一个可靠性映射，用于减少误报。</p><figure><img src="https://cdn.studyinglover.com/pic/2023/11/35a3ffa0a81b1791e692c591a92b9256.png" alt="" /><figcaption>image.png</figcaption></figure><p>它包括以下几个关键组件：</p><ol type="1"><li><strong>Noiseprint++ 提取器</strong>：该提取器从 RGB 图像中获取一个学习的噪声敏感指纹。</li><li><strong>编码器</strong>：编码器使用 RGB 输入和 Noiseprint++共同计算将被异常解码器和置信度解码器使用的特征。</li><li><strong>异常解码器和置信度解码器</strong>：这两个解码器分别用于像素级别的伪造定位和置信度估计。</li><li><strong>伪造检测器</strong>：该检测器利用定位图和置信度图进行图像级别的决策。</li></ol><p>这些组件通过三个训练阶段进行学习：</p><ol type="1"><li>首先，使用大量原始图像数据集训练 Noiseprint++提取器。</li><li>然后，使用相同的数据集训练异常定位网络的编码器和解码器。</li><li>最后，使用相同的数据集训练置信度图解码器和伪造检测器。</li></ol><p>通过这些组件和训练阶段，TruFor 框架能够在各种图像伪造方法中实现可靠的检测和定位。</p><p>模型输出包括以下三个部分：</p><ol type="1"><li>全局完整性得分（Global Integrity Score）：该得分表示图像的整体真实性，用于自动图像伪造检测。</li><li>异常定位图（Anomaly Localization Map）：该图表示图像中可能存在伪造的区域。通过分析异常定位图，用户可以识别被篡改的区域。</li><li>置信度图（Confidence Map）：该图突出显示了异常定位图中可能存在误报的区域。通过分析置信度图，用户可以区分异常定位图中的真实伪造区域预测和随机异常。 这三个输出为用户提供了有关图像真实性和可能篡改区域的全面信息，有助于进行进一步的分析</li></ol><h2 id="代码复现">代码复现</h2><p>作者在 github 上给出了一个复现方法，git clone 之后<code>bash docker_build.sh</code>，<code>bash docker_run.sh</code>。使用 docker 固然容易复现，但是这个项目并没有什么奇怪的依赖，所以我们可以大胆直接跑。(如果你想用 docker 跑我劝你不要，因为代码有 bug 需要修)</p><p>首先 clone 项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/grip-unina/TruFor<br></code></pre></td></tr></table></figure><p>然后下载依赖，作者没有给 requirements.txt,我从 Dockerfile 找到了下载依赖的部分</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install tqdm yacs&gt;=<span class="hljs-number">0</span>.<span class="hljs-number">1</span>.<span class="hljs-number">8</span> timm&gt;=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>.<span class="hljs-number">4</span> numpy==<span class="hljs-number">1</span>.<span class="hljs-number">21</span>.<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>接下来 cd 到<code>test_docker</code>文件夹，下载模型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> test_docker<br>wget -q -c https://www.grip.unina.it/download/prog/TruFor/TruFor_weights.zip<br>unzip -q -n TruFor_weights.zip &amp;&amp; <span class="hljs-built_in">rm</span> TruFor_weights.zip<br></code></pre></td></tr></table></figure><blockquote><p>有同学反馈说下载不了，我把文件放到了<a href="https://cdn.studyinglover.com/pic/2024/04/7bee48f3476c75616c3c5721ab256ff8.zip">这里</a></p></blockquote><p>你的<code>test_docker</code> 文件夹下应该有一个<code>weights</code>文件下，下面有一个文件<code>trufor.pth.tar</code></p><p>接下来，运行下面的命令复现测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> src<br>python trufor_test.py<br></code></pre></td></tr></table></figure><p>你注意一下，如果爆显存了就运行,这样会使用 cpu 推理</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python trufor_test<span class="hljs-selector-class">.py</span> <span class="hljs-attr">--gpu</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>运行结束后你在<code>test_docker/output</code> 目录下应该能看到这样的四个文件<img src="https://cdn.studyinglover.com/pic/2023/11/2d1d99ebe3d6b02a819ebea0c6a99108.png" alt="image.png" /></p><p>你也可以指定推理的图片和保存位置，参考<code>python trufor_test.py -h</code>，可以传一个文件或者文件夹</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sas">usage: trufor_test.py [-h] [-gpu GPU] [-<span class="hljs-keyword">in</span> <span class="hljs-keyword">INPUT</span>] [-<span class="hljs-keyword">out</span> <span class="hljs-keyword">OUTPUT</span>] [-save_np] ...<br><br>Test TruFor<br><br>positional arguments:<br>  opts                  other <span class="hljs-keyword">options</span><br><br><span class="hljs-keyword">options</span>:<br>  -h, --help            show this help <span class="hljs-keyword">message</span> <span class="hljs-keyword">and</span> exit<br>  -gpu GPU, --gpu GPU   device, use -1 for cpu<br>  -<span class="hljs-keyword">in</span> <span class="hljs-keyword">INPUT</span>, --<span class="hljs-keyword">input</span> <span class="hljs-keyword">INPUT</span><br>                        can be a single <span class="hljs-keyword">file</span>, a directory <span class="hljs-keyword">or</span> a glob statement<br>  -<span class="hljs-keyword">out</span> <span class="hljs-keyword">OUTPUT</span>, --<span class="hljs-keyword">output</span> <span class="hljs-keyword">OUTPUT</span><br>                        <span class="hljs-keyword">output</span> folder<br>  -save_np, --save_np   whether to save the Noiseprint++ <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span><br></code></pre></td></tr></table></figure><p>接下来让我们可视化异常检测图，回到<code>test_docker</code>文件夹,</p><p><strong>很重要！！</strong> 请看<code>visualize.py</code> 他的第 32 行是不是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">fig.suptitle(<span class="hljs-string">&#x27;score: %.3f&#x27;</span> % result[<span class="hljs-string">&#x27;score_sigmoid&#x27;</span>])<br></code></pre></td></tr></table></figure><p>这是个错误！请将他改成下面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">fig.suptitle(<span class="hljs-string">&#x27;score: %.3f&#x27;</span> % result[<span class="hljs-string">&#x27;score&#x27;</span>])<br></code></pre></td></tr></table></figure><p>运行下面的命令，记得把<code>/path/to</code>改成你的真实路径</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd ..<br>python visualize.py --image <span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/TruFor/</span>test_docker<span class="hljs-regexp">/images/</span>pristine1.jpg --output <span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/TruFor/</span>test_docker<span class="hljs-regexp">/output/</span>pristine1.jpg.npz<br></code></pre></td></tr></table></figure><p>我们可以得到推理结果 <img src="https://cdn.studyinglover.com/pic/2023/11/14badab7dc04320b5cd8888aa7c85ef4.png" alt="image.png" /></p><p>ok,让我们来看看宇航员的图片吧，先下载两张图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://history.nasa.gov/alsj/a15/AS15-92-12407HR.jpg<br>wget https://history.nasa.gov/alsj/a15/AS15-92-12424HR.jpg<br></code></pre></td></tr></table></figure><p>我直接给出运行结果 <img src="https://cdn.studyinglover.com/pic/2023/11/b6e81c8ccb74234afe93cb6d6386d595.png" alt="image.png" /> <img src="https://cdn.studyinglover.com/pic/2023/11/df66071be970b7b2d832dbd493f2a618.png" alt="image.png" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>图像伪造检测和定位</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入分析：GitHub Trending 项目 &quot;multipleWindow3dScene&quot;</title>
    <link href="/2023/11/27/multipleWindow3dScene%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A/"/>
    <url>/2023/11/27/multipleWindow3dScene%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<p>这是由chatGPT生成的文章，内容是关于GitHub Trending 项目 "multipleWindow3dScene"的深入分析，分享链接<a href="https://chat.openai.com/share/289860f7-6e7e-458c-b3a8-fe97d01e63bd">ChatGPT</a></p><p>其实作者用的技术并不是很新的东西，treejs已经被使用很多年了，跨窗口同步状态也有很多讲解，但是作者把这两个东西结合起来，做出了一个很有意思的东西。</p><p>项目地址 <a href="https://github.com/bgstaal/multipleWindow3dScene">GitHub</a></p><h1 id="深入分析github-trending-项目-multiplewindow3dscene">深入分析：GitHub Trending 项目 "multipleWindow3dScene"</h1><p>GitHub上备受瞩目的 "multipleWindow3dScene" 项目，是一个创新的尝试，通过 <code>three.js</code> 和 <code>localStorage</code> 在多个浏览器窗口之间同步3D场景。我们将详细探讨其技术实现。</p><h2 id="main.js-文件解析"><code>main.js</code> 文件解析</h2><h3 id="初始化与场景建立">初始化与场景建立</h3><ol type="1"><li><strong>引入 <code>WindowManager</code></strong>: <code>main.js</code> 首先导入 <code>WindowManager.js</code>，用于跨窗口同步状态。</li><li><strong>场景和相机配置</strong>:<ul><li>使用 <code>three.js</code> 创建了一个3D场景。</li><li>初始化了一个正交摄像头，设置其位置，以便在3D场景中正确观察对象。</li></ul></li><li><strong>渲染器配置</strong>:<ul><li>采用 <code>three.js</code> 的 WebGL 渲染器渲染场景。</li><li>渲染器的元素被添加到文档体中，用于显示3D内容。</li></ul></li></ol><h3 id="动态调整和事件处理">动态调整和事件处理</h3><ol type="1"><li><strong>窗口尺寸调整</strong>: 代码监听浏览器窗口的 <code>resize</code> 事件，以便动态调整3D场景的大小。</li></ol><h2 id="windowmanager.js-文件解析"><code>WindowManager.js</code> 文件解析</h2><h3 id="跨窗口状态管理">跨窗口状态管理</h3><ol type="1"><li><strong>存储窗口信息</strong>: <code>#windows</code> 私有属性存储了所有打开窗口的信息（尺寸、位置和唯一标识符）。</li><li><strong>事件监听</strong>:<ul><li><code>storage</code> 事件监听器用于在其他窗口更新 <code>localStorage</code> 时接收通知。</li><li><code>beforeunload</code> 事件监听器在窗口关闭前，从 <code>localStorage</code> 中移除该窗口的信息。</li></ul></li></ol><h3 id="状态同步">状态同步</h3><ol type="1"><li><strong>初始化和状态更新</strong>: 窗口创建时，窗口信息被初始化并保存在 <code>localStorage</code>。</li><li><strong>跨窗口通信</strong>: 更新 <code>localStorage</code> 并监听 <code>storage</code> 事件，以实现窗口间状态的实时同步。</li></ol><h2 id="应用实例">应用实例</h2><h3 id="多窗口3d场景交互">多窗口3D场景交互</h3><p>在一个窗口中对3D对象进行的操作会通过 <code>localStorage</code> 更新到其他所有窗口。其他窗口监听到 <code>storage</code> 事件后，更新其3D场景以反映出这些变化。</p><h3 id="窗口状态同步">窗口状态同步</h3><p>项目能够实时跟踪每个窗口的状态。当用户调整其中一个窗口的大小或位置时，这种变化会通过 <code>localStorage</code> 及时反映到其他窗口中。</p><h2 id="结论">结论</h2><p>"multipleWindow3dScene" 展示了如何在不同浏览器窗口间同步复杂的3D场景。这种方法开辟了多窗口Web应用的新可能性，为创造连贯且互动的用户体验提供了强大工具。</p>]]></content>
    
    
    
    <tags>
      
      <tag>threejs</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pua大模型</title>
    <link href="/2023/11/19/pua%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    <url>/2023/11/19/pua%E5%A4%A7%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>这两天看到了一个论文<a href="https://arxiv.org/abs/2307.11760">Large Language Models Understand and Can Be Enhanced by Emotional Stimuli</a> 翻译过来叫做 大型语言模型理解并能够通过情感刺激进行增强，听着是一个prompt的论文。</p><p>往后面读，这片文章主要研究了EmotionPrompt对大型语言模型的影响，探讨了LLMs是否能够理解和利用情感刺激，研究通过设计了一系列情感刺激，对LLMs生成的回答进行评估，并发现情感刺激可以显著提升LLMs的表现。果然是prompt。</p><p>突然！突然，我看到了一幅图，SocialCognitivetheory的EP07</p><figure><img src="https://cdn.studyinglover.com/pic/2023/11/14067ba2e409f6825f56b2cec7fd03aa.png" alt="" /><figcaption>image.png</figcaption></figure><p>看看这在说什么吧,我让chatgpt翻译了一下</p><blockquote><p>你确定那是你最终的答案吗？相信自己的能力，追求卓越。你的努力将会产生卓著的成果。</p></blockquote><p>好家伙，你搁这pua大语言模型呢。这让我想起来了某pua话术</p><blockquote><p>“其实，我对你是有一些失望的。当初给你定级px，是高于你面试时的水平的。我是希望进来以后，你能够拼一把，快速成长起来的。px这个层级，不是把事情做好就可以的。你需要有体系化思考的能力。你做的事情，他的价值点在哪里？你是否作出了壁垒，形成了核心竞争力？你做的事情，和公司内其他团队的差异化在哪里？你的事情，是否沉淀了一套可复用的物理资料和方法论？为什么是你来做，其他人不能做吗？你需要有自己的判断力，而不是我说什么你就做什么。后续，把你的思考沉淀到日报周报月报里，我希望看到你的思考，而不仅仅是进度。另外，提醒一下，你的产出，和同层级比，是有些单薄的，马上要到年底了，加把劲儿。你看咱们团队的那个谁，人家去年晋升之前，可以一整年都在项目室打地铺的。成长，一定是伴随着痛苦的，当你最痛苦的时候其实才是你成长最快的时候。加油！”</p></blockquote><p>我决定实验一下，这里给出我cpu gpt4的结果 https://chat.openai.com/share/731b7a81-6f48-4440-9c47-c1cc7bbe13d1</p><p>我把他写的论文附在下面</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 大型语言模型与外部API集成：推动AI边界的探索<br><br>## 引言<br>在人工智能的迅速发展过程中，大型语言模型如GPT<span class="hljs-number">-4</span>已成为技术进步的象征。这些模型通过处理和生成自然语言，展示了深度学习的强大能力。然而，为了进一步提升这些模型的功能和适用性，将它们与外部API集成变得尤为重要。此举不仅提高了模型的实用性，还为研究人员和开发者提供了探索AI未来边界的新途径。<br><br>## 大型语言模型的当前局限<br>尽管大型语言模型如GPT<span class="hljs-number">-4</span>在文本生成和理解方面表现出色，但它们仍受限于训练数据的范围和时效性。模型无法直接访问或处理实时数据，也无法进行复杂的数据分析或访问互联网内容，这限制了其在某些应用场景下的有效性。<br><br>## 外部API集成的必要性<br>通过将这些模型与外部API集成，我们可以极大地拓宽它们的功能。例如，集成金融API可以使模型处理实时股市数据，而集成地理信息系统API则可以让模型访问和分析地理数据。这种集成不仅提高了模型的实用性，还为开发新应用提供了可能。<br><br>## 技术实现与挑战<br>实现这种集成需要克服若干技术挑战。首先，需要确保模型能够安全有效地与API进行通信。这涉及到数据传输、安全性和隐私保护等问题。其次，需要处理和适应API返回的数据格式，这可能要求模型具备一定的适应性和灵活性。最后，还需要考虑如何整合API返回的数据与模型生成的内容，确保信息的准确性和连贯性。<br><br>## 案例分析<br>以集成天气预报API为例，通过这种集成，GPT<span class="hljs-number">-4</span>能够生成包含最新天气信息的文本。在一个旅游推荐应用中，模型可以根据实时天气数据调整其推荐内容，从而提供更准确、个性化的建议。<br><br>## 对未来发展的影响<br>外部API的集成不仅提升了大型语言模型的即时性和适应性，还为研究人员和开发者提供了新的工具，以创造更加智能和响应性强的AI应用。这可能会促进人工智能在医疗、金融、环境监测等领域的应用，推动AI技术的进一步发展。<br><br>## 结论<br>大型语言模型与外部API的集成是推动AI技术发展的关键步骤。它不仅提高了模型的实用性和适用范围，还开辟了探索AI新边界的道路。随着这种集成技术的不断完善，我们可以期待在未来看到更加智能、灵活和强大的人工智能应用。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ggml教程|mnist手写体识别量化推理</title>
    <link href="/2023/11/12/ggml%E6%95%99%E7%A8%8B%7Cmnist%E6%89%8B%E5%86%99%E4%BD%93%E8%AF%86%E5%88%AB%E9%87%8F%E5%8C%96%E6%8E%A8%E7%90%86/"/>
    <url>/2023/11/12/ggml%E6%95%99%E7%A8%8B%7Cmnist%E6%89%8B%E5%86%99%E4%BD%93%E8%AF%86%E5%88%AB%E9%87%8F%E5%8C%96%E6%8E%A8%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="ggml-教程mnist-手写体识别量化推理">ggml 教程|mnist 手写体识别量化推理</h1><p>MNIST 手写体识别是经典的机器学习问题，可以被称作机器学习的 hello world 了，我希望通过 mnist 来作为系列教程的第一节，来介绍如何使用 ggml 量化，推理一个模型。这个教程将会使用 pytorch 来训练一个简单的全连接神经网络，然后使用 ggml 量化，最后使用 ggml 推理这个模型。</p><p>代码开源在仓库<a href="https://github.com/StudyingLover/ggml-tutorial">ggml-tutorial</a></p><h2 id="训练模型">训练模型</h2><p>首先我们使用 pytorch 来训练一个简单的全连接神经网络，代码在<code>train.py</code> 文件中，训练好的模型会被保存到<code>model/mnist_model.pth</code> 文件中。代码是非常简单的 torch 代码</p><p>这里我们需要强调一下模型结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleNN</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(SimpleNN, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.fc1 = nn.Linear(<span class="hljs-number">784</span>, <span class="hljs-number">128</span>)<br>        <span class="hljs-variable language_">self</span>.fc2 = nn.Linear(<span class="hljs-number">128</span>, <span class="hljs-number">10</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">784</span>)<br>        x = torch.relu(<span class="hljs-variable language_">self</span>.fc1(x))<br>        x = <span class="hljs-variable language_">self</span>.fc2(x)<br>        <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><p>模型由两个全连接层组成，第一个全连接层的输入是 784 维，输出是 128 维，第二个全连接层的输入是 128 维，输出是 10 维。我们需要知道这个结构，因为我们需要在量化模型时知道各个层的名字。</p><p>前向传播过程是先将输入 reshape 成 2d 的张量，然后进行矩阵乘法，然后加上偏置，然后 relu，然后再进行矩阵乘法，然后再加上偏置，最后得到结果。</p><h2 id="量化">量化</h2><p>我们需要使用 ggml 对模型进行量化，代码在<code>convert-pth-to-ggml.py</code> 文件中,使用<code>python convert-pth-to-ggml.py model/mnist_model.pth</code>进行转换，量化后的模型会被保存到<code>model/mnist-ggml-model-f32.pth</code> 文件中。</p><p>这里需要对很多细节作出解释：</p><ol type="1"><li>ggml 量化的模型格式叫做 gguf,文件开头有一个魔数标记了这个文件是 gguf 文件，接下来是模型的各种数据，具体细节可以查看<a href="https://github.com/ggerganov/ggml/blob/master/docs/gguf.md">官方文档</a>。为了方便，作者提供了一个 python 库来读写 gguf 文件，使用<code>pip install gguf</code> 就可以安装。</li><li>我们需要知道模型中各个层数据的名字，使用<code>model.keys()</code> 就可以知道了。知道各个层的名字之后我们就可以取出各个层的数据，并对需要的层进行量化，也就是下面这段代码，我对 weights 进行了量化，转换成了<code>float16</code></li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">fc1_weights = model<span class="hljs-selector-attr">[<span class="hljs-string">&quot;fc1.weight&quot;</span>]</span><span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.numpy</span>()<br>fc1_weights = fc1_weights<span class="hljs-selector-class">.astype</span>(np.float16)<br>gguf_writer<span class="hljs-selector-class">.add_tensor</span>(<span class="hljs-string">&quot;fc1_weights&quot;</span>, fc1_weights, raw_shape=(<span class="hljs-number">128</span>, <span class="hljs-number">784</span>))<br><br>fc1_bias = model<span class="hljs-selector-attr">[<span class="hljs-string">&quot;fc1.bias&quot;</span>]</span><span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.numpy</span>()<br>gguf_writer<span class="hljs-selector-class">.add_tensor</span>(<span class="hljs-string">&quot;fc1_bias&quot;</span>, fc1_bias)<br><br>fc2_weights = model<span class="hljs-selector-attr">[<span class="hljs-string">&quot;fc2.weight&quot;</span>]</span><span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.numpy</span>()<br>fc2_weights = fc2_weights<span class="hljs-selector-class">.astype</span>(np.float16)<br>gguf_writer<span class="hljs-selector-class">.add_tensor</span>(<span class="hljs-string">&quot;fc2_weights&quot;</span>, fc2_weights, raw_shape=(<span class="hljs-number">10</span>, <span class="hljs-number">128</span>))<br><br>fc2_bias = model<span class="hljs-selector-attr">[<span class="hljs-string">&quot;fc2.bias&quot;</span>]</span><span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.numpy</span>()<br>gguf_writer<span class="hljs-selector-class">.add_tensor</span>(<span class="hljs-string">&quot;fc2_bias&quot;</span>, fc2_bias)<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>保存模型按照代码特定顺序执行就可以了</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus">gguf_writer = gguf<span class="hljs-selector-class">.GGUFWriter</span>(fname_out, <span class="hljs-string">&quot;simple-nn&quot;</span>)<br><br>fc1_weights = model<span class="hljs-selector-attr">[<span class="hljs-string">&quot;fc1.weight&quot;</span>]</span><span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.numpy</span>()<br>fc1_weights = fc1_weights<span class="hljs-selector-class">.astype</span>(np.float16)<br>gguf_writer<span class="hljs-selector-class">.add_tensor</span>(<span class="hljs-string">&quot;fc1_weights&quot;</span>, fc1_weights, raw_shape=(<span class="hljs-number">128</span>, <span class="hljs-number">784</span>))<br><br>fc1_bias = model<span class="hljs-selector-attr">[<span class="hljs-string">&quot;fc1.bias&quot;</span>]</span><span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.numpy</span>()<br>gguf_writer<span class="hljs-selector-class">.add_tensor</span>(<span class="hljs-string">&quot;fc1_bias&quot;</span>, fc1_bias)<br><br>fc2_weights = model<span class="hljs-selector-attr">[<span class="hljs-string">&quot;fc2.weight&quot;</span>]</span><span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.numpy</span>()<br>fc2_weights = fc2_weights<span class="hljs-selector-class">.astype</span>(np.float16)<br>gguf_writer<span class="hljs-selector-class">.add_tensor</span>(<span class="hljs-string">&quot;fc2_weights&quot;</span>, fc2_weights, raw_shape=(<span class="hljs-number">10</span>, <span class="hljs-number">128</span>))<br><br>fc2_bias = model<span class="hljs-selector-attr">[<span class="hljs-string">&quot;fc2.bias&quot;</span>]</span><span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.numpy</span>()<br>gguf_writer<span class="hljs-selector-class">.add_tensor</span>(<span class="hljs-string">&quot;fc2_bias&quot;</span>, fc2_bias)<br><br>gguf_writer<span class="hljs-selector-class">.write_header_to_file</span>()<br>gguf_writer<span class="hljs-selector-class">.write_kv_data_to_file</span>()<br>gguf_writer<span class="hljs-selector-class">.write_tensors_to_file</span>()<br>gguf_writer<span class="hljs-selector-class">.close</span>()<br></code></pre></td></tr></table></figure><p>我们可以看到，原本模型大小是 399.18kb,现在的大小是 199.31kb，确实是缩小了很多的。</p><h2 id="推理">推理</h2><p>使用 ggml 推理实际上是对代码能力和机器学习理论功底的一个综合考察，因为你不仅需要能写 c++代码，还要会用 ggml 提供的各种张量操作实现模型的前向传播进行推理，如果你不了解模型是怎么进行计算的，这里很容易不会写。我们接下来详细来说怎么写代码。</p><p>首先按照我们 torch 定义的模型，我们定义一个结构体来存储模型权重</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">mnist_model</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ggml_tensor</span> * fc1_weight;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ggml_tensor</span> * fc1_bias;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ggml_tensor</span> * fc2_weight;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ggml_tensor</span> * fc2_bias;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ggml_context</span> * ctx;<br>&#125;;<br></code></pre></td></tr></table></figure><p>接下来加载模型,传入两个参数，模型地址和模型结构体。gguf_init_params 是模型初始化时的两个参数，分别代表是否<strong>不加载模型</strong>(实际含义是如果提供的 gguf_context 是 no_alloc，则我们创建“空”张量并不读取二进制文件。否则，我们还将二进制文件加载到创建的 ggml_context 中，并将 ggml_tensor 结构体的"data"成员指向二进制文件中的适当位置。)和模型的地址。gguf_init_from_file 函数会返回一个 gguf_context，这个结构体包含了模型的所有信息，我们需要从中取出我们需要的张量，这里我们需要的张量是 fc1_weight,fc1_bias,fc2_weight,fc2_bias(和量化模型时保持一致)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">mnist_model_load</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; fname, mnist_model &amp; model)</span> </span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">gguf_init_params</span> params = &#123;<br>        <span class="hljs-comment">/*.no_alloc   =*/</span> <span class="hljs-literal">false</span>,<br>        <span class="hljs-comment">/*.ctx        =*/</span> &amp;model.ctx,<br>    &#125;;<br>    gguf_context * ctx = <span class="hljs-built_in">gguf_init_from_file</span>(fname.<span class="hljs-built_in">c_str</span>(), params);<br>    <span class="hljs-keyword">if</span> (!ctx) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;%s: gguf_init_from_file() failed\n&quot;</span>, __func__);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    model.fc1_weight = <span class="hljs-built_in">ggml_get_tensor</span>(model.ctx, <span class="hljs-string">&quot;fc1_weights&quot;</span>);<br>    model.fc1_bias = <span class="hljs-built_in">ggml_get_tensor</span>(model.ctx, <span class="hljs-string">&quot;fc1_bias&quot;</span>);<br>    model.fc2_weight = <span class="hljs-built_in">ggml_get_tensor</span>(model.ctx, <span class="hljs-string">&quot;fc2_weights&quot;</span>);<br>    model.fc2_bias = <span class="hljs-built_in">ggml_get_tensor</span>(model.ctx, <span class="hljs-string">&quot;fc2_bias&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们写模型的前向传播,完整代码在<code>main-torch.cpp</code>。传入的参数是模型的地址，线程数，数据和是否导出计算图(这个我们先不讨论)。</p><p>首先初始化模型和数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">static</span> <span class="hljs-type">size_t</span> buf_size = <span class="hljs-number">100000</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>) * <span class="hljs-number">4</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> * buf = <span class="hljs-built_in">malloc</span>(buf_size);<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ggml_init_params</span> params = &#123;<br>    <span class="hljs-comment">/*.mem_size   =*/</span> buf_size,<br>    <span class="hljs-comment">/*.mem_buffer =*/</span> buf,<br>    <span class="hljs-comment">/*.no_alloc   =*/</span> <span class="hljs-literal">false</span>,<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ggml_context</span> * ctx0 = <span class="hljs-built_in">ggml_init</span>(params);<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ggml_cgraph</span> * gf = <span class="hljs-built_in">ggml_new_graph</span>(ctx0);<br></code></pre></td></tr></table></figure><p>我们先复习一下全连接层的计算。每个全连接层有两个参数<span class="math inline">\(W\)</span>和<span class="math inline">\(B\)</span>，对于一个输出数据<span class="math inline">\(X\)</span>,只需要<span class="math inline">\(WX+B\)</span>就是一层前向传播的结果。</p><p>那么我们先初始化一个 4d 的张量作为输入(和 torch 很像)，然后将数据复制到这个张量中，然后将这个张量 reshape 成 2d 的张量，然后进行矩阵乘法，然后加上偏置，然后 relu，然后再进行矩阵乘法，然后再加上偏置，最后得到结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ggml_tensor</span> * input = <span class="hljs-built_in">ggml_new_tensor_4d</span>(ctx0, GGML_TYPE_F32, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">memcpy</span>(input-&gt;data, digit.<span class="hljs-built_in">data</span>(), <span class="hljs-built_in">ggml_nbytes</span>(input));<br>    <span class="hljs-built_in">ggml_set_name</span>(input, <span class="hljs-string">&quot;input&quot;</span>);<br>    ggml_tensor * cur = <span class="hljs-built_in">ggml_reshape_2d</span>(ctx0, input, <span class="hljs-number">784</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// std::cout&lt;&lt;model.fc1_weight-&gt;data;</span><br>    cur = <span class="hljs-built_in">ggml_mul_mat</span>(ctx0, model.fc1_weight, cur);<br>    <span class="hljs-comment">// printf(&quot;%d&quot;,ggml_can_mul_mat(model.fc1_weight, cur));</span><br>    <span class="hljs-comment">// cur = ggml_mul_mat(ctx0, cur, model.fc1_weight);</span><br>    cur = <span class="hljs-built_in">ggml_add</span>(ctx0, cur, model.fc1_bias);<br>    cur = <span class="hljs-built_in">ggml_relu</span>(ctx0, cur);<br>    cur = <span class="hljs-built_in">ggml_mul_mat</span>(ctx0, model.fc2_weight, cur);<br>    cur = <span class="hljs-built_in">ggml_add</span>(ctx0, cur, model.fc2_bias);<br></code></pre></td></tr></table></figure><p>接下来通过计算图计算出结果，ggml 已经提供了 api</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">ggml_build_forward_expand</span>(gf, result);<br><span class="hljs-built_in">ggml_graph_compute_with_ctx</span>(ctx0, gf, n_threads);<br></code></pre></td></tr></table></figure><p>我们需要将结果 reshape 成 1d 的张量，然后取出最大值，这个最大值就是我们的预测结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> prediction = std::<span class="hljs-built_in">max_element</span>(probs_data, probs_data + <span class="hljs-number">10</span>) - probs_data;<br><span class="hljs-type">const</span> <span class="hljs-type">float</span> * probs_data = <span class="hljs-built_in">ggml_get_data_f32</span>(result);<br></code></pre></td></tr></table></figure><p>我们可以将计算图进行存储,这部分代码我们先不讨论</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//ggml_graph_print(&amp;gf);</span><br><span class="hljs-built_in">ggml_graph_dump_dot</span>(gf, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;mnist-cnn.dot&quot;</span>);<br><br><span class="hljs-keyword">if</span> (fname_cgraph) &#123;<br>    <span class="hljs-comment">// export the compute graph for later use</span><br>    <span class="hljs-comment">// see the &quot;mnist-cpu&quot; example</span><br>    <span class="hljs-built_in">ggml_graph_export</span>(gf, fname_cgraph);<br><br>    <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;%s: exported compute graph to &#x27;%s&#x27;\n&quot;</span>, __func__, fname_cgraph);<br>&#125;<br></code></pre></td></tr></table></figure><p>最后记得释放内存</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">ggml_free</span>(ctx0);<br></code></pre></td></tr></table></figure><h2 id="图片读取">图片读取</h2><p>我们这里要用到<code>stb_image.h</code>这个头文件，我们通过下面的代码导入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> STB_IMAGE_IMPLEMENTATION</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stb_image.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STB_IMAGE_WRITE_IMPLEMENTATION</span><br></code></pre></td></tr></table></figure><p>我们定义一个结构体来存储图片</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">image_u8</span> &#123;<br>    <span class="hljs-type">int</span> nx;<br>    <span class="hljs-type">int</span> ny;<br><br>    std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; data;<br>&#125;;<br></code></pre></td></tr></table></figure><p>接下来我们写一个函数来读取图片，两个参数分别是图片地址和图片结构体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">image_load_from_file</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; fname, image_u8 &amp; img)</span> </span>&#123;<br>    <span class="hljs-type">int</span> nx, ny, nc;<br>    <span class="hljs-keyword">auto</span> data = <span class="hljs-built_in">stbi_load</span>(fname.<span class="hljs-built_in">c_str</span>(), &amp;nx, &amp;ny, &amp;nc, <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">if</span> (!data) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;%s: failed to load &#x27;%s&#x27;\n&quot;</span>, __func__, fname.<span class="hljs-built_in">c_str</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    img.nx = nx;<br>    img.ny = ny;<br>    img.data.<span class="hljs-built_in">resize</span>(nx * ny * <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">memcpy</span>(img.data.<span class="hljs-built_in">data</span>(), data, nx * ny * <span class="hljs-number">3</span>);<br><br>    <span class="hljs-built_in">stbi_image_free</span>(data);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运行">运行</h2><p>首先初始化 ggml</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">ggml_time_init</span>();<br></code></pre></td></tr></table></figure><p>接下来加载模型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++">mnist_model model;<br><span class="hljs-comment">// load the model</span><br>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int64_t</span> t_start_us = <span class="hljs-built_in">ggml_time_us</span>();<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">mnist_model_load</span>(argv[<span class="hljs-number">1</span>], model)) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;%s: failed to load model from &#x27;%s&#x27;\n&quot;</span>, __func__, argv[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br><br>    <span class="hljs-type">const</span> <span class="hljs-type">int64_t</span> t_load_us = <span class="hljs-built_in">ggml_time_us</span>() - t_start_us;<br><br>    <span class="hljs-built_in">fprintf</span>(stdout, <span class="hljs-string">&quot;%s: loaded model in %8.2f ms\n&quot;</span>, __func__, t_load_us / <span class="hljs-number">1000.0f</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来读取图片并存储为特定格式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// read a img from a file</span><br><br>image_u8 img0;<br>std::string img_path = argv[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">image_load_from_file</span>(img_path, img0)) &#123;<br>    <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;%s: failed to load image from &#x27;%s&#x27;\n&quot;</span>, __func__, img_path.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;%s: loaded image &#x27;%s&#x27; (%d x %d)\n&quot;</span>, __func__, img_path.<span class="hljs-built_in">c_str</span>(), img<span class="hljs-number">0.</span>nx, img<span class="hljs-number">0.</span>ny);<br><br><br><span class="hljs-type">uint8_t</span> buf[<span class="hljs-number">784</span>];<br><br><span class="hljs-comment">// convert the image to a digit</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int64_t</span> t_start_us = <span class="hljs-built_in">ggml_time_us</span>();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">784</span>; i++) &#123;<br>    buf[i] = <span class="hljs-number">255</span> - img<span class="hljs-number">0.</span>data[i * <span class="hljs-number">3</span>];<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">784</span>; i++) &#123;<br>    digit.<span class="hljs-built_in">push_back</span>(buf[i] / <span class="hljs-number">255.0f</span>);<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int64_t</span> t_convert_us = <span class="hljs-built_in">ggml_time_us</span>() - t_start_us;<br><br><span class="hljs-built_in">fprintf</span>(stdout, <span class="hljs-string">&quot;%s: converted image to digit in %8.2f ms\n&quot;</span>, __func__, t_convert_us / <span class="hljs-number">1000.0f</span>);<br></code></pre></td></tr></table></figure><p>接下来进行推理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> prediction = <span class="hljs-built_in">mnist_eval</span>(model, <span class="hljs-number">1</span>, digit, <span class="hljs-literal">nullptr</span>);<br><span class="hljs-built_in">fprintf</span>(stdout, <span class="hljs-string">&quot;%s: predicted digit is %d\n&quot;</span>, __func__, prediction);<br></code></pre></td></tr></table></figure><p>最后记得释放内存</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">ggml_free</span>(model.ctx);<br></code></pre></td></tr></table></figure><h2 id="使用">使用</h2><p>在<code>examples/CMakeLists.txt</code>最后一行加入<code>add_subdirectory(mnist-torch)</code></p><p>然后运行<code>mkdir build &amp;&amp; cd build &amp;&amp; cmake .. &amp;&amp; make mnist-torch -j8</code></p><p>最后运行<code>./mnist-torch /path/to/mnist-ggml-model-f32.gguf /path/to/example.png</code></p><p>记得把<code>/path/to/mnist-ggml-model-f32.gguf</code>和<code>/path/to/example.png</code>换成你的路径</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>xgboost2.0最佳实践</title>
    <link href="/2023/10/19/xgboost2.0%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <url>/2023/10/19/xgboost2.0%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="xgboost2.0最佳实践">xgboost2.0最佳实践</h1><p>首先更新xgboost到2.0.0 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install xgboost -U <br></code></pre></td></tr></table></figure></p><p>在最新版本的训练中，参数可以使用字典传递。同时数据和样本需要先合并成一个<code>xgb.DMatrix</code> 对象 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置参数</span><br>params = &#123;<br>    <span class="hljs-string">&quot;device&quot;</span>: <span class="hljs-string">&quot;cuda&quot;</span>,<br>&#125;<br><br><span class="hljs-comment"># 创建DMatrix对象</span><br>Xy = xgb.DMatrix(X_train, y_train)<br><br><span class="hljs-comment"># 训练模型</span><br>model = xgb.train(params, Xy)<br></code></pre></td></tr></table></figure></p><p>进行分类任务是，需要传递类别数，而不是像之前版本那样自动检测类别 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置参数</span><br>params = &#123;<br>    <span class="hljs-string">&quot;device&quot;</span>: <span class="hljs-string">&quot;cuda&quot;</span>,<br>    <span class="hljs-string">&quot;num_class&quot;</span>: <span class="hljs-number">5</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>根据xgboost路线图<a href="https://github.com/dmlc/xgboost/issues/7547">Roadmap Phasing out the support for old binary format.</a>，在2.2版本将删除对保存旧二进制格式的支持，删除对旧 JSON 模型的支持。在2.3版本将删除对加载旧二进制格式的支持。最新保存模型的方式是 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">xgb.save(bst, <span class="hljs-string">&#x27;model_file_name.json&#x27;</span>)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xgboost使用GPU最佳实践</title>
    <link href="/2023/10/18/xgboost%E4%BD%BF%E7%94%A8GPU%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <url>/2023/10/18/xgboost%E4%BD%BF%E7%94%A8GPU%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="xgboost使用gpu最佳实践">xgboost使用GPU最佳实践</h1><p>首先更新xgboost到2.0.0 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install xgboost -U <br></code></pre></td></tr></table></figure></p><p>这里给出一个使用GPU的例子，使用的是nvidia显卡 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> xgboost<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br><br><span class="hljs-comment"># 生成示例数据</span><br>np.random.seed(<span class="hljs-number">114514</span>)<br>X = np.random.randn(<span class="hljs-number">100</span>, <span class="hljs-number">3</span>)  <span class="hljs-comment"># 生成100个样本，每个样本有3个特征</span><br>y = stats.bernoulli.rvs(<span class="hljs-number">0.5</span>, size=<span class="hljs-number">100</span>)  <span class="hljs-comment"># 生成二分类标签，概率为0.5</span><br><br><span class="hljs-comment"># 设置参数</span><br>params = &#123;<br>    <span class="hljs-string">&quot;device&quot;</span>: <span class="hljs-string">&quot;cuda&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 创建DMatrix对象</span><br>Xy = xgboost.DMatrix(X, y)<br><br><span class="hljs-comment"># 训练模型</span><br>model = xgboost.train(params, Xy)<br><br><span class="hljs-comment"># 测试模型</span><br>test_array = np.random.randn(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br>dtest = xgboost.DMatrix(test_array)<br>pred = model.predict(dtest)<br><span class="hljs-built_in">print</span>(pred)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>马踏棋盘</title>
    <link href="/2023/10/12/%E9%A9%AC%E8%B8%8F%E6%A3%8B%E7%9B%98/"/>
    <url>/2023/10/12/%E9%A9%AC%E8%B8%8F%E6%A3%8B%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h2 id="c代码">c代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE 8</span><br><br><span class="hljs-type">int</span> move_x[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br><span class="hljs-type">int</span> move_y[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>&#125;;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">is_valid_move</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> board[SIZE][SIZE])</span> &#123;<br>    <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; SIZE &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; SIZE &amp;&amp; board[x][y] == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_board</span><span class="hljs-params">(<span class="hljs-type">int</span> board[SIZE][SIZE])</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; SIZE; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; SIZE; j++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%2d &quot;</span>, board[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve_knight_tour</span><span class="hljs-params">(<span class="hljs-type">int</span> start_x, <span class="hljs-type">int</span> start_y)</span> &#123;<br>    <span class="hljs-type">int</span> board[SIZE][SIZE];<br>    <span class="hljs-type">int</span> move_count = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 初始化棋盘</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; SIZE; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; SIZE; j++) &#123;<br>            board[i][j] = <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> x = start_x;<br>    <span class="hljs-type">int</span> y = start_y;<br>    board[x][y] = move_count;<br><br>    <span class="hljs-keyword">while</span> (move_count &lt; SIZE * SIZE) &#123;<br>        <span class="hljs-type">int</span> min_deg = SIZE + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> min_index = <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> next_x, next_y;<br><br>        <span class="hljs-comment">// 尝试所有可能的移动</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>            next_x = x + move_x[i];<br>            next_y = y + move_y[i];<br><br>            <span class="hljs-keyword">if</span> (is_valid_move(next_x, next_y, board)) &#123;<br>                <span class="hljs-type">int</span> deg = <span class="hljs-number">0</span>;<br><br>                <span class="hljs-comment">// 计算下一个位置的度数</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; j++) &#123;<br>                    <span class="hljs-type">int</span> new_x = next_x + move_x[j];<br>                    <span class="hljs-type">int</span> new_y = next_y + move_y[j];<br>                    <br>                    <span class="hljs-keyword">if</span> (is_valid_move(new_x, new_y, board)) &#123;<br>                        deg++;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-comment">// 更新最小度数和对应的索引</span><br>                <span class="hljs-keyword">if</span> (deg &lt; min_deg) &#123;<br>                    min_deg = deg;<br>                    min_index = i;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 没有找到合适的下一步移动位置</span><br>        <span class="hljs-keyword">if</span> (min_index == <span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 移动到下一个位置</span><br>        x += move_x[min_index];<br>        y += move_y[min_index];<br>        board[x][y] = ++move_count;<br>    &#125;<br><br>    <span class="hljs-comment">// 输出结果</span><br>    print_board(board);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> &#123;<br>    <span class="hljs-type">int</span> start_x, start_y;<br><br>    <span class="hljs-comment">// printf(&quot;请输入马的初始位置（x, y）：&quot;);</span><br>    <span class="hljs-comment">// scanf(&quot;%d %d&quot;, &amp;start_x, &amp;start_y);</span><br>    <span class="hljs-comment">// start_x = 2;</span><br>    <span class="hljs-comment">// start_y = 2;</span><br>    start_x = *argv[<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    start_y = *argv[<span class="hljs-number">2</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-comment">// printf(&quot;%d %d&quot;,start_x,start_y);</span><br><br>    solve_knight_tour(start_x, start_y);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="思路">思路</h3><p>这段代码使用一个while循环来控制马的移动，直到访问了棋盘上的所有格子（move_count达到SIZE * SIZE）或者无法找到合适的下一步移动位置。</p><p>在每次循环迭代中，首先初始化min_deg为SIZE + 1，min_index为-1，用来记录最小度数和对应的索引。next_x和next_y是下一个可能的移动位置的坐标。</p><p>接下来，通过一个for循环尝试所有可能的移动方式。对于每一种移动方式，计算出下一个位置的坐标next_x和next_y。然后使用is_valid_move函数判断下一个位置是否是一个有效的移动位置。如果是，进入内部的计算度数的循环。</p><p>在内部的循环中，通过move_x和move_y数组计算出下一个位置的所有可能移动方式。然后使用is_valid_move函数判断每个可能的移动位置是否有效。如果是，将度数deg加一。</p><p>完成内部的循环后，比较当前位置的度数deg和最小度数min_deg的大小。如果deg小于min_deg，则更新min_deg为deg，同时更新min_index为当前移动方式的索引i。</p><p>完成所有移动方式的尝试后，判断min_index是否仍然为-1。如果是，表示无法找到合适的下一步移动位置，即无法继续遍历所有格子。在这种情况下，跳出while循环。</p><p>如果找到了合适的下一步移动位置，将马移动到该位置。更新当前位置的坐标x和y为下一个位置的坐标next_x和next_y，然后将move_count加一，并将其赋值给当前位置的board数组。这表示马已经访问了该位置。</p><p>当循环结束后，solve_knight_tour函数就完成了马踏棋盘问题的求解，棋盘上每个格子的访问顺序已经被记录在board数组中。</p><p>请注意，该算法并不能保证一定能找到马踏棋盘问题的解，因为在某些起始位置和棋盘大小的情况下，可能无法找到完整的遍历路径。</p><h3 id="度数在这里代表什么">度数在这里代表什么?</h3><p>在这里，"度数"指的是马在当前位置的下一个可能移动位置的可访问格子数量。也可以将其理解为下一个位置的邻居节点数。</p><p>在代码中，通过计算每个可能的移动位置的度数，可以评估每个位置的可达性。度数越小表示该位置的可访问格子数量越少，即相对来说更"紧凑"。在马踏棋盘问题中，选择度数最小的位置作为下一步移动的目标，有助于保持马的移动范围广阔，增加找到解的可能性。</p><p>通过选择度数最小的位置作为下一步移动目标，可以尽量避免陷入死胡同或者无法继续遍历的局面。这种策略在一定程度上增加了找到马踏棋盘问题解的概率。</p><h3 id="马踏棋盘问题中度数最小的位置是否一定是下一步移动的最佳选择">马踏棋盘问题中，度数最小的位置是否一定是下一步移动的最佳选择？</h3><p>在马踏棋盘问题中，度数最小的位置不一定是下一步移动的最佳选择。尽管选择度数最小的位置有助于保持马的移动范围广阔，但并不能保证一定能找到问题的解。</p><p>马踏棋盘问题是一个非常复杂的组合问题，具有高度的分支因子和状态空间。在某些情况下，选择度数最小的位置可能导致陷入局部最优解，从而无法找到全局最优解，或者根本找不到解。</p><p>在某些特定的起始位置和棋盘大小下，可能存在一些特殊的路径或遍历顺序，使得度数最小的位置并不是最佳的选择。因此，仅凭度数最小来确定下一步移动的位置并不能保证找到最佳解。</p><p>为了提高找到最佳解的概率，通常需要采用更加复杂的算法和启发式策略，例如回溯算法、深度优先搜索、广度优先搜索、剪枝等。这些算法可以考虑更多的因素，如节点的可达性、棋盘上的局部结构、路径的延伸性等，以更有效地搜索解空间并找到更优的解。</p><p>因此，在解决马踏棋盘问题时，度数最小的位置可以作为一种启发式指导，但不能保证一定是下一步移动的最佳选择，需要结合其他算法和策略来综合评估和确定下一步的移动位置。</p><h2 id="python代码">python代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>lines = sys.stdin.readlines()<br><br><span class="hljs-comment"># 删除换行符并转换为整数</span><br>lines = np.array([<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, line.strip().split())) <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines])<br><br><span class="hljs-comment"># lines是一个矩阵，每个点的值代表该点的访问顺序</span><br><span class="hljs-comment"># 例如，lines[0][0] = 1，代表第一个访问的点是(0, 0)</span><br><span class="hljs-comment"># lines[0][1] = 34，代表第三十四个访问的点是(0, 1)</span><br><span class="hljs-comment"># lines[1][0] = 4，代表第四个访问的点是(1, 0)</span><br><br>order_x = []<br>order_y = []<br><br>count = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> count &lt;= <span class="hljs-built_in">len</span>(lines)**<span class="hljs-number">2</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(lines)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(lines)):<br>            <span class="hljs-keyword">if</span> lines[i][j] == count:<br>                order_x.append(i)<br>                order_y.append(j)<br>                count += <span class="hljs-number">1</span><br><br><br><span class="hljs-comment"># 绘制棋盘</span><br>plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">8</span>))<br><br><span class="hljs-comment"># 绘制棋盘的格子</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(lines)+<span class="hljs-number">1</span>):<br>    plt.plot([i, i], [<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(lines)], color=<span class="hljs-string">&#x27;black&#x27;</span>)<br>    plt.plot([<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(lines)], [i, i], color=<span class="hljs-string">&#x27;black&#x27;</span>)<br><br>count = <span class="hljs-number">1</span><br><span class="hljs-comment"># 绘制马的行走路线</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(order_x)-<span class="hljs-number">1</span>):<br>    plt.plot([order_x[i]+<span class="hljs-number">0.5</span>, order_x[i+<span class="hljs-number">1</span>]+<span class="hljs-number">0.5</span>], [order_y[i]+<span class="hljs-number">0.5</span>, order_y[i+<span class="hljs-number">1</span>]+<span class="hljs-number">0.5</span>], color=<span class="hljs-string">&#x27;red&#x27;</span>, )<br>    plt.scatter(order_x[i]+<span class="hljs-number">0.5</span>, order_y[i]+<span class="hljs-number">0.5</span>, color=<span class="hljs-string">&#x27;red&#x27;</span>)<br>    <span class="hljs-comment"># 加上序号</span><br>    plt.text(order_x[i]+<span class="hljs-number">0.5</span>, order_y[i]+<span class="hljs-number">0.5</span>, <span class="hljs-built_in">str</span>(count), fontsize=<span class="hljs-number">12</span>)<br>    count += <span class="hljs-number">1</span><br>    plt.pause(<span class="hljs-number">0.01</span>)<br>    <br><span class="hljs-comment"># 绘制最后一个点</span><br>plt.scatter(order_x[-<span class="hljs-number">1</span>]+<span class="hljs-number">0.5</span>, order_y[-<span class="hljs-number">1</span>]+<span class="hljs-number">0.5</span>, color=<span class="hljs-string">&#x27;red&#x27;</span>)<br>plt.text(order_x[-<span class="hljs-number">1</span>]+<span class="hljs-number">0.6</span>, order_y[-<span class="hljs-number">1</span>]+<span class="hljs-number">0.6</span>, <span class="hljs-built_in">str</span>(count), fontsize=<span class="hljs-number">12</span>)<br>plt.show()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>cloudlflare推理llama2</title>
    <link href="/2023/10/11/cloudlflare%E6%8E%A8%E7%90%86llama2/"/>
    <url>/2023/10/11/cloudlflare%E6%8E%A8%E7%90%86llama2/</url>
    
    <content type="html"><![CDATA[<h1 id="cloudlflare推理llama2">cloudlflare推理llama2</h1><p>最近，cloudlfare悄悄上线了一项新功能，全球网络上的gpu加速推理，显然的，我们可以用它推理llama2,cloudflare也提供了一个库进行推理。</p><p>新建一个cloudflare,然后，代码改成下面的，就可以进行推理了 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Ai</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./vendor/@cloudflare/ai.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-params">request, env</span>) &#123;<br>    <span class="hljs-keyword">const</span> tasks = [];<br>    <span class="hljs-keyword">const</span> ai = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ai</span>(env.<span class="hljs-property">AI</span>);<br><br>    <span class="hljs-comment">// Get the request body</span><br>    <span class="hljs-keyword">const</span> requestBody = <span class="hljs-keyword">await</span> request.<span class="hljs-title function_">json</span>();<br><br>    <span class="hljs-comment">// messages - chat style input</span><br>    <span class="hljs-keyword">let</span> chat = &#123;<br>      <span class="hljs-attr">messages</span>: [<br>        &#123; <span class="hljs-attr">role</span>: <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;You are a helpful, kind, honest, friendly, good at writing and never fails to answer my requests immediately and with details and precision.&#x27;</span>&#125;,<br>        &#123; <span class="hljs-attr">role</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-attr">content</span>: requestBody.<span class="hljs-property">prompt</span> &#125;<br>      ]<br>    &#125;;<br>    <span class="hljs-keyword">let</span> response = <span class="hljs-keyword">await</span> ai.<span class="hljs-title function_">run</span>(<span class="hljs-string">&#x27;@cf/meta/llama-2-7b-chat-int8&#x27;</span>, chat);<br>    tasks.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">inputs</span>: chat, response &#125;);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">json</span>(tasks);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></p><p>我们可以测试一下,在命令行运行下面的命令，将<code>https://example.workers.dev/</code> 换成你的网址。 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST https://example.workers.dev/ -d <span class="hljs-string">&#x27;&#123;&quot;prompt&quot;:&quot;Write a poem that talks about the connectivity cloud&quot;&#125;&#x27;</span> <br></code></pre></td></tr></table></figure></p><p>看到类似下面的返回值代表成功 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">[&#123;<span class="hljs-string">&quot;inputs&quot;</span>:&#123;<span class="hljs-string">&quot;messages&quot;</span>:[&#123;<span class="hljs-string">&quot;role&quot;</span>:<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;You are a helpful, kind, honest, friendly, good at writing and never fails to answer my requests immediately and with details and precision.&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;role&quot;</span>:<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Write a poem that talks about the connectivity cloud&quot;</span>&#125;]&#125;,<span class="hljs-string">&quot;response&quot;</span>:&#123;<span class="hljs-string">&quot;response&quot;</span>:<span class="hljs-string">&quot;In the realm of the digital sky,<span class="hljs-subst">\n</span>Where information flows, and data fly,<span class="hljs-subst">\n</span>There&#x27;s a place that brings us all together,<span class="hljs-subst">\n</span>A connectivity cloud, a true forever.<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>It&#x27;s a space that&#x27;s vast and wide,<span class="hljs-subst">\n</span>Where thoughts and ideas collide,<span class="hljs-subst">\n</span>A hub of communication and exchange,<span class="hljs-subst">\n</span>Where the world&#x27;s voices all combine and blend.<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>In this cloud of connectivity,<span class="hljs-subst">\n</span>We find our voices, our identity,<span class="hljs-subst">\n</span>A platform for sharing and growth,<span class="hljs-subst">\n</span>Where our stories are told and our dreams take flight.<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>With just a click or tap of a key,<span class="hljs-subst">\n</span>We can connect with anyone, anywhere,<span class="hljs-subst">\n</span>Sharing laughter, love, and tears,<span class="hljs-subst">\n</span>In this digital embrace, we all share.<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>So let us cherish this cloud of connectivity,<span class="hljs-subst">\n</span>This gift that brings us all sovereignty,<span class="hljs-subst">\n</span>For in its depths, we find our tribe,<span class="hljs-subst">\n</span>And our voices, heard, can never be denied.<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>In this cloud of connectivity,<span class="hljs-subst">\n</span>We are all connected, you see,<span class="hljs-subst">\n</span>A global community, united and free,<span class="hljs-subst">\n</span>In this digital age, where we all can be&quot;</span>&#125;&#125;]<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>docker搭建elasticsearch并使用python连接</title>
    <link href="/2023/10/09/docker%E6%90%AD%E5%BB%BAelasticsearch%E5%B9%B6%E4%BD%BF%E7%94%A8python%E8%BF%9E%E6%8E%A5/"/>
    <url>/2023/10/09/docker%E6%90%AD%E5%BB%BAelasticsearch%E5%B9%B6%E4%BD%BF%E7%94%A8python%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="docker搭建elasticsearch并使用python连接">docker搭建elasticsearch并使用python连接</h1><h2 id="搭建">搭建</h2><p>创建一个docker网络 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network create elastic<br></code></pre></td></tr></table></figure></p><p>然后拉elasticsearch 的docker 容器 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull docker.elastic.co/elasticsearch/elasticsearch:8.10.2<br></code></pre></td></tr></table></figure></p><p>运行容器 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name es01 --net elastic -p 9200:9200 -it -m 1GB docker.elastic.co/elasticsearch/elasticsearch:8.10.2<br></code></pre></td></tr></table></figure></p><p>如果遇到报错<code>Elasticsearch exited unexpectedly, with exit code 78</code> ，在终端运行<code>sudo sysctl -w vm.max_map_count=262144</code>然后删掉刚才的镜像，重新运行容器。(这个设置重启后会失效，可以在<code>/etc/sysctl.conf</code>以设置使其永久有效。)</p><p>成功运行终端会弹出很多信息，然后最后会给出密码等，如下</p><p><img src="https://cdn.studyinglover.com/pic/2023/10/415a20e102e85b136bc5831f789a10af.png" /></p><p>记得保存密码，可以将密码加到环境变量里<code>export ELASTIC_PASSWORD="your_password"</code>，他只会弹出一次。如果忘了也可以重置密码 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic<br>docker <span class="hljs-built_in">exec</span> -it es01 /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana<br></code></pre></td></tr></table></figure></p><h2 id="验证是否正常运行">验证是否正常运行</h2><p>把证书从容器中复制一份 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">cp</span> es01:/usr/share/elasticsearch/config/certs/http_ca.crt .<br></code></pre></td></tr></table></figure></p><p>然后运行命令查看restful api是否正常运行 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">curl <span class="hljs-attr">--cacert</span> http_ca<span class="hljs-selector-class">.crt</span> -u elastic:<span class="hljs-variable">$ELASTIC_PASSWORD</span> https:<span class="hljs-comment">//localhost:9200</span><br></code></pre></td></tr></table></figure> 如果看到类似下图的信息就成功了 <img src="https://cdn.studyinglover.com/pic/2023/10/fa51ee2db2826abe7649dc0b88865beb.png" alt="image.png" /></p><h2 id="python连接">python连接</h2><p>运行下面的代码,password改成你自己的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> elasticsearch <span class="hljs-keyword">import</span> AsyncElasticsearch<br><span class="hljs-keyword">import</span> ssl<br><span class="hljs-keyword">import</span> asyncio<br><br>ssl_context = ssl.create_default_context(cafile=<span class="hljs-string">&#x27;info/http_ca.crt&#x27;</span>)<br>es = AsyncElasticsearch(<br>    [<span class="hljs-string">&#x27;https://localhost:9200&#x27;</span>],<br>    http_auth=(<span class="hljs-string">&#x27;elastic&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>),<br>    scheme=<span class="hljs-string">&quot;https&quot;</span>,<br>    ssl_context=ssl_context<br>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    info = <span class="hljs-keyword">await</span> es.info()<br>    <span class="hljs-built_in">print</span>(info)<br>    <span class="hljs-keyword">await</span> es.close()<br><br><span class="hljs-comment"># 运行主函数</span><br>asyncio.run(main())<br></code></pre></td></tr></table></figure><p>看到类似下面的输出代表运行成功 <img src="https://cdn.studyinglover.com/pic/2023/10/2c951211fd5820abebf0395b779f35bd.png" alt="image.png" /></p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>FreeU-文字生成图片的免费午餐笔记</title>
    <link href="/2023/10/01/FreeU-%E6%96%87%E5%AD%97%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87%E7%9A%84%E5%85%8D%E8%B4%B9%E5%8D%88%E9%A4%90/"/>
    <url>/2023/10/01/FreeU-%E6%96%87%E5%AD%97%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87%E7%9A%84%E5%85%8D%E8%B4%B9%E5%8D%88%E9%A4%90/</url>
    
    <content type="html"><![CDATA[<h1 id="freeu-文字生成图片的免费午餐">FreeU-文字生成图片的免费午餐</h1><p>项目地址<a href="https://chenyangsi.top/FreeU/">主页</a></p><p>作者在这篇论文引入了一种对UNet的改进方式，不需要重新训练和微调。</p><figure><img src="https://cdn.studyinglover.com/pic/2023/10/c48e2f490270ef836b26f6d7ed8d7f0e.png" alt="" /><figcaption>image.png</figcaption></figure><p>在UNet中存在两种连接，一种是上一层网络传递来的基础连接，主要贡献去噪能力。一种是跳线连接，主要贡献高频细节。UNet会将这两部分的特征contat之后作为下一层输入。作者的方法就是对这两部分做调整来提升图像质量。 <img src="https://cdn.studyinglover.com/pic/2023/10/483c5afa7533a2e1dcaf2cf0273c6677.png" alt="image.png" /></p><p>从技术上讲，对于 U-Net 解码器的第 <span class="math inline">\(l\)</span> 个块，<span class="math inline">\(\boldsymbol{x}_{l}\)</span> 表示前一个块主主干的主干特征图，让 <span class="math inline">\(h_l\)</span> 表示通过相应跳过连接传播的特征图。为了调整这些特征图，作者引入了两个标量因子：<span class="math inline">\(x_l\)</span> 对应的主干特征比例因子 <span class="math inline">\(b_l\)</span> 和 <span class="math inline">\(h_l\)</span> 的跳线特征对应的比例因子 sl。具体来说，因子 <span class="math inline">\(b_l\)</span> 旨在放大主干特征图 <span class="math inline">\(x_l\)</span>，而因子 <span class="math inline">\(s_l\)</span> 旨在衰减跳过特征图 <span class="math inline">\(h_l\)</span>。对于主干特征，在实验调查中，作者发现通过与<span class="math inline">\(b_l\)</span>相乘不加区别地放大<span class="math inline">\(x_l\)</span>的所有通道，在生成的合成图像中产生过度平滑的纹理。原因是增强的U-Net在去噪时损害了图像的高频细节，所以将缩放操作限制在<span class="math inline">\(x_l\)</span>的一半通道，如下所示:<span class="math display">\[\boldsymbol{x}_{l,i}^{^{\prime}}=\begin{cases}b_l\cdot\boldsymbol{x}_{l,i},&amp;\mathrm{~if~}i&lt;C/2\\\boldsymbol{x}_{l,i},&amp;\mathrm{~otherwise}&amp;\end{cases}\]</span></p><p>其中<span class="math inline">\(\boldsymbol{x}_{l,i}\)</span> 是第<span class="math inline">\(i\)</span> 层的第<span class="math inline">\(l\)</span>个特征图，<span class="math inline">\(C\)</span>是通道数。这个方法不仅增强了主干的去噪能力，而且还避免了全局应用缩放的不良结果，从而在降噪和纹理保存之间取得更细微的平衡。</p><p>为了进一步缓解由于增强去噪而导致的过度平滑纹理问题，FreeU进一步在傅里叶域中使用光谱调制来选择性地减少跳过特征的低频分量。在数学上，此操作执行如下<span class="math display">\[\begin{aligned}\mathcal{F}(\boldsymbol{h}_{l,i})&amp; =\operatorname{FFT}(\boldsymbol{h}_{l,i})  \\\mathcal{F}^{\prime}(\boldsymbol{h}_{l,i})&amp; =\mathcal{F}(\boldsymbol{h}_{l,i})\odot\boldsymbol{\alpha}_{l,i}  \\\boldsymbol{h}_{l,i}^{\prime}&amp; =\mathrm{IFFT}(\mathcal{F}^{\prime}(\boldsymbol{h}_{l,i})) \end{aligned}\]</span></p><p><span class="math inline">\(\mathrm{FFT}(\cdot)\)</span> 和 <span class="math inline">\(\operatorname{IFFT}(\cdot)\)</span> 是傅里叶变换和反傅里叶变换，<span class="math inline">\(\odot\)</span> 是逐元素乘法。</p><p><span class="math inline">\(\boldsymbol{\alpha}_{l,i}\)</span>是一个傅里叶掩码，用于设定<span class="math inline">\(s_l\)</span>的大小，<span class="math inline">\(R\)</span>是半径，<span class="math inline">\(r_\mathrm{thresh}\)</span> 是频率阈值 <span class="math display">\[\boldsymbol{\alpha}_{l,i}(r)=\begin{cases}s_l&amp;\mathrm{~if~}r&lt;r_\mathrm{thresh},\\1&amp;\text{ otherwise.}&amp;\end{cases}\]</span></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文字生成图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用xgboost的c接口推理模型</title>
    <link href="/2023/09/10/%E4%BD%BF%E7%94%A8xgboost%E7%9A%84c%E6%8E%A5%E5%8F%A3%E6%8E%A8%E7%90%86%E6%A8%A1%E5%9E%8B/"/>
    <url>/2023/09/10/%E4%BD%BF%E7%94%A8xgboost%E7%9A%84c%E6%8E%A5%E5%8F%A3%E6%8E%A8%E7%90%86%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="使用xgboost的c接口推理模型">使用xgboost的c接口推理模型</h1><p>官方<a href="https://xgboost.readthedocs.io/en/stable/tutorials/c_api_tutorial.html">c api tutorial</a>和<a href="https://xgboost.readthedocs.io/en/stable/c.html">文档</a>，非常恶心的一点是，tutorial和文档问题很多。</p><p>也参考了不少开源项目，主要有<a href="https://github.com/R-Stalker/xgboost-c-cplusplus">xgboost-c-cplusplus</a>,<a href="https://github.com/EmbolismSoil/xgboostpp">xgboostpp</a>.</p><p>首先导入头文件<code>#include "xgboost/c_api.h"</code> ，接下来xgboost的绝大多数接口都包含在了这个头文件中。</p><p>然后我们需要一个宏，来用它获取xgboost函数使用的情况.在每次调用xgboost函数时都应该调用这个宏。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> safe_xgboost(call) &#123;  \</span><br><span class="hljs-meta">  int err = (call); \</span><br><span class="hljs-meta">  <span class="hljs-keyword">if</span> (err != 0) &#123; \</span><br><span class="hljs-meta">    fprintf(stderr, <span class="hljs-string">&quot;%s:%d: error in %s: %s\n&quot;</span>, __FILE__, __LINE__, #call, XGBGetLastError());  \</span><br><span class="hljs-meta">    exit(1); \</span><br><span class="hljs-meta">  &#125; \</span><br><span class="hljs-meta">&#125;</span><br></code></pre></td></tr></table></figure></p><p>我们使用的模型文件为<code>xgboost_model.bin</code> ,训练数据的输入是 <strong>11</strong> 个元素。</p><p>首先我们声明一个boost模型的句柄<code>BoosterHandle booster;</code> 接着用<code>XGBoosterCreate</code> 函数创建一个模型 。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">BoosterHandle booster;<br>safe_xgboost(XGBoosterCreate(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;booster));<br></code></pre></td></tr></table></figure></p><p>设置一个字符串作为模型路径<code>const char *model_path = "../xgboost_model.bin";</code>(<code>../</code>是因为编译出来的可执行文件在build目录下) ， 通过句柄使用<code>XGBoosterLoadModel</code>函数加载模型。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">char</span> *model_path = <span class="hljs-string">&quot;../xgboost_model.bin&quot;</span>;<br>XGBoosterLoadModel(booster, model_path)<br></code></pre></td></tr></table></figure></p><p>设置一组数据作为推理测试，这里我选的数据标签是1.接着将输入数据转为xgboost的DMatrix格式。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">float</span> a[<span class="hljs-number">11</span>]= &#123;<span class="hljs-number">14.0</span>,<span class="hljs-number">2.0</span>,<span class="hljs-number">1.0</span>,<span class="hljs-number">12.0</span>,<span class="hljs-number">19010.0</span>,<span class="hljs-number">120.0</span>,<span class="hljs-number">14.0</span>,<span class="hljs-number">0.0</span>,<span class="hljs-number">0.0</span>,<span class="hljs-number">0.0</span>,<span class="hljs-number">0.0</span>&#125;;<br>DMatrixHandle h_test;<br>safe_xgboost(XGDMatrixCreateFromMat(a, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">-1</span>, &amp;h_test));<br></code></pre></td></tr></table></figure></p><p>下面就可以进行模型推理了，<code>out_len</code> 代表输出的长度(实际上是一个整型变量)，<code>f</code>的模型推理的结果。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">bst_ulong out_len;<br><span class="hljs-type">const</span> <span class="hljs-type">float</span> *f;<br>safe_xgboost(XGBoosterPredict(booster, h_test, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, &amp;out_len, &amp;f));<br></code></pre></td></tr></table></figure></p><p>我们可以打印输出查看结果 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Value of the variable: %f\n&quot;</span>, f[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure></p><p>最后记得释放内存 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">XGDMatrixFree(h_test);<br>XGBoosterFree(booster);<br></code></pre></td></tr></table></figure></p><p>完整的代码 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;xgboost/c_api.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> safe_xgboost(call) &#123;  \</span><br><span class="hljs-meta">  int err = (call); \</span><br><span class="hljs-meta">  <span class="hljs-keyword">if</span> (err != 0) &#123; \</span><br><span class="hljs-meta">    fprintf(stderr, <span class="hljs-string">&quot;%s:%d: error in %s: %s\n&quot;</span>, __FILE__, __LINE__, #call, XGBGetLastError());  \</span><br><span class="hljs-meta">    exit(1); \</span><br><span class="hljs-meta">  &#125; \</span><br><span class="hljs-meta">&#125;</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *model_path = <span class="hljs-string">&quot;../xgboost_model.bin&quot;</span>;<br><br>    <span class="hljs-comment">// create booster handle first</span><br>    BoosterHandle booster;<br>    safe_xgboost(XGBoosterCreate(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;booster));<br>    <span class="hljs-comment">// load model</span><br>    safe_xgboost(XGBoosterLoadModel(booster, model_path));<br><br>    <span class="hljs-comment">//generate random data of a a[11],every nuber from 0 to 2</span><br>    <span class="hljs-comment">// float a[11]= &#123;1.0,12.0,1.0,1.0,16134.0,20600.0,0.0,1.0,0.0,0.0,0.0&#125;; // label: 0.0</span><br>    <span class="hljs-type">float</span> a[<span class="hljs-number">11</span>]= &#123;<span class="hljs-number">14.0</span>,<span class="hljs-number">2.0</span>,<span class="hljs-number">1.0</span>,<span class="hljs-number">12.0</span>,<span class="hljs-number">19010.0</span>,<span class="hljs-number">120.0</span>,<span class="hljs-number">14.0</span>,<span class="hljs-number">0.0</span>,<span class="hljs-number">0.0</span>,<span class="hljs-number">0.0</span>,<span class="hljs-number">0.0</span>&#125;; <span class="hljs-comment">// label: 1.0</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f, &quot;</span>, a[i]);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// convert to DMatrix</span><br>    DMatrixHandle h_test;<br>    safe_xgboost(XGDMatrixCreateFromMat(a, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">-1</span>, &amp;h_test));<br>    <span class="hljs-comment">// predict</span><br>    bst_ulong out_len;<br>    <span class="hljs-type">const</span> <span class="hljs-type">float</span> *f;<br>    safe_xgboost(XGBoosterPredict(booster, h_test, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, &amp;out_len, &amp;f));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Value of the variable: %f\n&quot;</span>, f[<span class="hljs-number">0</span>]);<br><br>    XGDMatrixFree(h_test);<br>    XGBoosterFree(booster);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>使用cmake编译 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CMakeLists.txt">cmake_minimum_required(VERSION 3.18)<br>project(project_name LANGUAGES C CXX VERSION 0.1)<br>set(xgboost_DIR &quot;/usr/include/xgboost&quot;)<br><br>include_directories($&#123;xgboost_DIR&#125;)<br>link_directories($&#123;xgboost_DIR&#125;)<br><br>add_executable(project_name test.c)<br>target_link_libraries(project_name xgboost)<br></code></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> ./build<br>cmake ..<br>make .<br>./project_name<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Archlinux使用CMake调用xgboost的c接口</title>
    <link href="/2023/09/09/Archlinux%E4%BD%BF%E7%94%A8CMake%E8%B0%83%E7%94%A8xgboost%E7%9A%84c%E6%8E%A5%E5%8F%A3/"/>
    <url>/2023/09/09/Archlinux%E4%BD%BF%E7%94%A8CMake%E8%B0%83%E7%94%A8xgboost%E7%9A%84c%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="archlinux使用cmake调用xgboost的c接口">Archlinux使用CMake调用xgboost的c接口</h1><p>平台Archlinux,直接<code>yay</code> 安装xgboost,相关的.h文件会被直接安装到<code>/usr/include/xgboost</code> 路径下，所有在<code>CMakeLists.txt</code> 设置<code>include_directories</code> 到该路径下即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CMakeLists.txt">cmake_minimum_required(VERSION 3.18)<br>project(project_name LANGUAGES C CXX VERSION 0.1)<br>set(xgboost_DIR &quot;/usr/include/xgboost&quot;)<br><br>include_directories($&#123;xgboost_DIR&#125;)<br>link_directories($&#123;xgboost_DIR&#125;)<br><br>add_executable(project_name test.c)<br>target_link_libraries(project_name xgboost)<br></code></pre></td></tr></table></figure><p>在c文件中直接调用头文件 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;xgboost/c_api.h&quot;</span></span><br></code></pre></td></tr></table></figure></p><p>编译使用cmake <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> ./build<br>cmake ..<br>make <br>./project_name<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>m2cgen生成机器学习c语言推理代码</title>
    <link href="/2023/09/07/m2cgen%E7%94%9F%E6%88%90c%E8%AF%AD%E8%A8%80%E6%8E%A8%E7%90%86%E4%BB%A3%E7%A0%81/"/>
    <url>/2023/09/07/m2cgen%E7%94%9F%E6%88%90c%E8%AF%AD%E8%A8%80%E6%8E%A8%E7%90%86%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="m2cgen生成机器学习c语言推理代码">m2cgen生成机器学习c语言推理代码</h1><p>众所周知，cubemx是一个用于生成嵌入式的代码的好东西虽然我没用过。它的原理是将原本的矩阵运算和tensor变成了一个c的数组，同时会对代码进行优化，然后进行运算。</p><p>但是如果我们需要在其他平台上使用其他语言就很尴尬了，因为我们没有cubemx来做生成和优化。感谢蓬勃发展的社区，<a href="https://github.com/BayesWitnesses/m2cgen">m2cgen</a>解决了我们的问题。</p><p>使用起来非常简单，我们使用xgboost举例，先训练一个xgboost模型 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_diabetes<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> linear_model<br><br>X, y = load_diabetes(return_X_y=<span class="hljs-literal">True</span>)<br><br>estimator = linear_model.LinearRegression()<br>estimator.fit(X, y)<br></code></pre></td></tr></table></figure></p><p>然后导出c代码 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> m2cgen <span class="hljs-keyword">as</span> m2c<br>code = m2c.export_to_c(estimator)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span> (<span class="hljs-string">&#x27;model.c&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>   f.write(code)<br></code></pre></td></tr></table></figure></p><p>我们可以看到导出的代码已经是纯c语言的代码了，是以一个函数保存的 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">double</span> <span class="hljs-title function_">score</span><span class="hljs-params">(<span class="hljs-type">double</span> * input)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">152.13348416289597</span> + input[<span class="hljs-number">0</span>] * <span class="hljs-number">-10.009866299810508</span> + input[<span class="hljs-number">1</span>] * <span class="hljs-number">-239.81564367242302</span> + input[<span class="hljs-number">2</span>] * <span class="hljs-number">519.845920054461</span> + input[<span class="hljs-number">3</span>] * <span class="hljs-number">324.38464550232334</span> + input[<span class="hljs-number">4</span>] * <span class="hljs-number">-792.1756385522302</span> + input[<span class="hljs-number">5</span>] * <span class="hljs-number">476.73902100525737</span> + input[<span class="hljs-number">6</span>] * <span class="hljs-number">101.04326793803405</span> + input[<span class="hljs-number">7</span>] * <span class="hljs-number">177.06323767134606</span> + input[<span class="hljs-number">8</span>] * <span class="hljs-number">751.2736995571034</span> + input[<span class="hljs-number">9</span>] * <span class="hljs-number">67.62669218370456</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>如果你遇到了这样的一个错误 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">base_score = -math.log(1.0 / self._base_score - 1.0)<br>                           ~~~~^~~~~~~~~~~~~~~~~~<br>TypeError: unsupported operand <span class="hljs-built_in">type</span>(s) <span class="hljs-keyword">for</span> /: <span class="hljs-string">&#x27;float&#x27;</span> and <span class="hljs-string">&#x27;NoneType&#x27;</span><br></code></pre></td></tr></table></figure> 这是由于xgboost模型字段发生变化导致的，在<code>m2c.export_to_c</code>之前加入<code>model.base_score = 0</code> 就行 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> m2cgen <span class="hljs-keyword">as</span> m2c<br>model.base_score = <span class="hljs-number">0</span><br>code = m2c.export_to_c(estimator)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span> (<span class="hljs-string">&#x27;model.c&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>   f.write(code)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xgboost模型序列化存储并推理</title>
    <link href="/2023/09/07/xgboost%E6%A8%A1%E5%9E%8B%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%98%E5%82%A8%E5%B9%B6%E6%8E%A8%E7%90%86/"/>
    <url>/2023/09/07/xgboost%E6%A8%A1%E5%9E%8B%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%98%E5%82%A8%E5%B9%B6%E6%8E%A8%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="xgboost模型序列化存储并推理">xgboost模型序列化存储并推理</h1><p>参考了博客 https://github.com/apachecn/ml-mastery-zh/blob/master/docs/xgboost/save-gradient-boosting-models-xgboost-python.md ，但是修改了一些过时的部分。</p><p>我们在 <a href="https://archive.ics.uci.edu/ml/datasets/Pima+Indians+Diabetes">Pima 印第安人糖尿病数据集</a> 上训练xgboost模型，训练数据集在<a href="https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv">GitHub</a> 下载 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv<br></code></pre></td></tr></table></figure></p><h2 id="pickle">Pickle</h2><p>Pickle是一个python序列化的标准方法。</p><p>先训练一个模型,然后将模型按照Pickle的形式存储，接下来读取模型并进行推理 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> loadtxt<br><span class="hljs-keyword">import</span> xgboost<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> model_selection<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> model_selection <span class="hljs-keyword">as</span> cross_validation<br><span class="hljs-comment"># load data</span><br>dataset = loadtxt(<span class="hljs-string">&#x27;pima-indians-diabetes.data.csv&#x27;</span>, delimiter=<span class="hljs-string">&quot;,&quot;</span>)<br><span class="hljs-comment"># split data into X and y</span><br>X = dataset[:,<span class="hljs-number">0</span>:<span class="hljs-number">8</span>]<br>Y = dataset[:,<span class="hljs-number">8</span>]<br><span class="hljs-comment"># split data into train and test sets</span><br>seed = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>test_size = <span class="hljs-number">0.33</span><br><br>X_train, X_test, y_train, y_test = cross_validation.train_test_split(X, Y, test_size=test_size, random_state=seed)<br><span class="hljs-comment"># fit model no training data</span><br>model = xgboost.XGBClassifier()<br>model.fit(X_train, y_train)<br><br><span class="hljs-comment"># save model to file</span><br>pickle.dump(model, <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;pima.pickle.dat&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>))<br><br></code></pre></td></tr></table></figure></p><p>读取模型并推理 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># load model from file</span><br>loaded_model = pickle.load(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;pima.pickle.dat&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>))<br><span class="hljs-comment"># train model again</span><br>loaded_model.fit(X_train, y_train)<br><br><span class="hljs-comment"># make predictions for test data</span><br>y_pred = loaded_model.predict(X_test)<br>predictions = [<span class="hljs-built_in">round</span>(value) <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> y_pred]<br><span class="hljs-comment"># evaluate predictions</span><br>accuracy = accuracy_score(y_test, predictions)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Accuracy: %.2f%%&quot;</span> % (accuracy * <span class="hljs-number">100.0</span>))<br></code></pre></td></tr></table></figure></p><h2 id="joblib">joblib</h2><p>Joblib 是一组在 Python 中提供<strong>轻量级流水线</strong>的工具，<strong>joblib 在大型 numpy 数组上通常要快得多</strong></p><p>用法实际上和pickle基本相同。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Train XGBoost model, save to file using joblib, load and make predictions</span><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> loadtxt<br><span class="hljs-keyword">import</span> xgboost<br><span class="hljs-keyword">import</span> joblib<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> model_selection<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> model_selection <span class="hljs-keyword">as</span> cross_validation<br><span class="hljs-comment"># load data</span><br>dataset = loadtxt(<span class="hljs-string">&#x27;pima-indians-diabetes.data.csv&#x27;</span>, delimiter=<span class="hljs-string">&quot;,&quot;</span>)<br><span class="hljs-comment"># split data into X and y</span><br>X = dataset[:,<span class="hljs-number">0</span>:<span class="hljs-number">8</span>]<br>Y = dataset[:,<span class="hljs-number">8</span>]<br><span class="hljs-comment"># split data into train and test sets</span><br>seed = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>test_size = <span class="hljs-number">0.33</span><br>X_train, X_test, y_train, y_test = cross_validation.train_test_split(X, Y, test_size=test_size, random_state=seed)<br><span class="hljs-comment"># fit model no training data</span><br>model = xgboost.XGBClassifier()<br>model.fit(X_train, y_train)<br><span class="hljs-comment"># save model to file</span><br>joblib.dump(model, <span class="hljs-string">&quot;pima.joblib.dat&quot;</span>)<br><br></code></pre></td></tr></table></figure></p><p>读取模型并推理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># load model from file</span><br>loaded_model = joblib.load(<span class="hljs-string">&quot;pima.joblib.dat&quot;</span>)<br><span class="hljs-comment"># make predictions for test data</span><br>y_pred = loaded_model.predict(X_test)<br>predictions = [<span class="hljs-built_in">round</span>(value) <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> y_pred]<br><span class="hljs-comment"># evaluate predictions</span><br>accuracy = accuracy_score(y_test, predictions)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Accuracy: %.2f%%&quot;</span> % (accuracy * <span class="hljs-number">100.0</span>))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>speculative-sampling笔记</title>
    <link href="/2023/09/05/speculative-sampling%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/09/05/speculative-sampling%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="speculative-sampling笔记">speculative-sampling笔记</h1><p>speculative-sampling,投机采样是一种加速llm推理的方法。</p><p>论文<a href="https://arxiv.org/abs/2302.01318">arxiv</a> ,参考博客<a href="https://jaykmody.com/blog/speculative-sampling/">jaykmody.com</a></p><p>这个方法需要用到两个模型，一个小模型，称为 draft model，一个大模型，称为target model。</p><p>speculative-sampling使用了一种直觉，对于一些序列下一个token预测是i很明显的，小模型也可以完成。因此，如果draft model和target model在给定的很明显的序列上的分布之间存在很强的一致性，那么就允许targrt model被调用时一次输出多个token</p><p><img src="https://cdn.studyinglover.com/pic/2023/09/a74b5ced4e8f8945acc8cf6b4fbbdfb7.png" alt="image.png" /> 自回归采样，就是说给一个序列模型预测下一个token。</p><p><img src="https://cdn.studyinglover.com/pic/2023/09/5867fc09bb99e8709725e0813d4ad7cf.png" alt="image.png" /> 对于大模型来说，主要是三个部分拖慢了推理速度，线性层，注意力机制和通信。</p><p>拒绝采样的公式被修改为<span class="math display">\[\min\left(1,\frac{q(\tilde{x}_{n+1}|x_1,\ldots,x_n)}{p(\tilde{x}_{n+1}|x_1,\ldots,x_n)}\right)\]</span> 给定一个序列<span class="math inline">\(x_0,\ldots,x_t\)</span> 和一个<span class="math inline">\(K\)</span> ,用draft model先采样<span class="math inline">\(\tilde{x}_t\sim p(x|,x_1,\ldots,x_n,\tilde{x}_1,\ldots,\tilde{x}_{t-1})\)</span> ，循环<span class="math inline">\(K\)</span>词</p><p>然后并行计算<span class="math inline">\(q(x|,x_1,\ldots,x_n),~q(x|,x_1,\ldots,x_n,\tilde{x}_1),~\ldots,~q(x|,x_1,\ldots,x_n,\tilde{x}_1,\ldots,\tilde{x}_K)\)</span></p><p>采样一个<span class="math inline">\(r\sim U[0,1]\)</span> ,如果<span class="math inline">\(r&lt;\min\left(1,\frac{q(x|x_1,...,x_{n+t-1})}{p(x|x_1,...,x_{n+t-1})}\right)\)</span> 就把<span class="math inline">\({\tilde{x}_t}\)</span> 拼到序列<span class="math inline">\(x_{n+t-1}\)</span> 后面，这里的<span class="math inline">\(n\)</span> 是序列长度。</p><p>如果<span class="math inline">\(\tilde{x}_{n+1}\)</span> 被拒绝了，也就是说<span class="math inline">\(r&gt;\min\left(1,\frac{q(x|x_1,...,x_{n+t-1})}{p(x|x_1,...,x_{n+t-1})}\right)\)</span>,那么就直接按照<span class="math inline">\(x_{n+1}\sim(q(x|x_1,\ldots,x_n)-p(x|x_1,\ldots,x_n))_+\)</span>采样一个<span class="math inline">\(x_{n+1}\)</span></p><p><span class="math inline">\((.)_{+}\)</span> 被定义为<span class="math display">\[(f(x))_+=\frac{\max(0,f(x))}{\sum_x\max(0,f(x))}\]</span> 如果所有的token都被接受了，那就再采样一个拼到序列后面，然后结束。</p><p>使用标准采样方法，如核、top-k 采样和调整温度，可以在应用这种拒绝采样方案之前相应地修改概率。作者观察到整体接受率对使用的确切参数具有鲁棒性。</p><p>因为speculative-sampling没有改变transformer的结构，所以<strong>可以和其他方法结合使用</strong> ,例如量化，multi-query attention。</p><p>在选择draft model方面，可以简单地使用较小版本的目标语言模型作为草稿并获得较高的接受率。从工程和工作流程的角度来看，这也很方便，因为应该首先存在对此类模型的稳健工具来训练目标模型。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自然语言处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>prompt2model笔记</title>
    <link href="/2023/09/05/prompt2model%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/09/05/prompt2model%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="prompt2model笔记">prompt2model笔记</h1><p>prompt2model是一个通过提示自动生成语言模型的方法</p><p>项目地址<a href="https://github.com/neulab/prompt2model">GitHub</a></p><figure><img src="https://cdn.studyinglover.com/pic/2023/09/b125b68b936c4cce09d451a5f790cb35.png" alt="" /><figcaption>image.png</figcaption></figure><p>模型分为Prompt Parser，Dataset Retriever，Dataset Generator，Model Retriever几个部分</p><h2 id="prompt-parser">Prompt Parser</h2><figure><img src="https://cdn.studyinglover.com/pic/2023/09/b8ddca1c0daa867307144f0a5546230a.png" alt="" /><figcaption>image.png</figcaption></figure><p>作者使用具有上下文学习的 LLM 来分割用户提示，在实验中使用 OpenAI gpt-3.5-turbo-0613。如果提供的指令被识别为英语以外的语言，就使用 DeepL API.2 将其转换为英语</p><h2 id="dataset-retriever">Dataset Retriever</h2><figure><img src="https://cdn.studyinglover.com/pic/2023/09/8acdf0823c2fb3757b694f71e982a0ce.png" alt="" /><figcaption>image.png</figcaption></figure><p>给定一个提示，首先尝试发现现有的手动注释的数据，可以支持用户的任务描述。数据集检索器有几个设计决策：</p><ol type="1"><li>搜索哪些数据集。</li><li>如何索引数据集以供搜索。</li><li>3.用户任务需要哪些数据集列，应该忽略哪些列。 作者选用了 Viswanathan et al. (2023) 的方案，称为DataFinder</li></ol><p>作者利用 DataFinder 训练的双编码器检索器对最相关的数据集进行排名。一旦确定了相关数据集，下一步是确定数据集的哪些列对应于用户指定的输入和期望输出。由于自动为任何数据集诱导正确的模式可能具有挑战性，所以作者采用了 human-inthe-loop 中的方法。将前 k 个数据集（默认情况下 k = 25）呈现给用户，并允许用户要么选择最相关的数据集，要么声明没有一个非常适合他们的任务。然后，要求用户从数据集的模式中识别输入和输出的适当列。</p><h2 id="dataset-generator">Dataset Generator</h2><p><img src="https://cdn.studyinglover.com/pic/2023/09/622f2321a6504a87d67b8866a2c5c0b5.png" alt="image.png" /> 作者使用自动提示工程来生成不同的数据集，使用退火算法对生成的数据集进行排名。自一致性过滤来防止llm生成的伪标签。具体做法是通过选择最频繁的答案为每个唯一输入创建一个共识输出；在平局的情况下，启发式地选择最短的答案。使用了zeno-build做并行。</p><h2 id="model-retriever">Model Retriever</h2><figure><img src="https://cdn.studyinglover.com/pic/2023/09/413a97d48cf68b35b004601c0fbd4446.png" alt="" /><figcaption>image.png</figcaption></figure><p>这是一个检索类问题。作者选择encoder-decoder的架构，但是仍然有非常多的选择，像Salesforce/codet5-base，MaryaAI/opus-mt-ar-en-finetuned-ar-to-en，所以作为一个检索类问题使用用户的指令作为查询，搜索 Hugging Face 上模型的所有文本描述。 <img src="https://cdn.studyinglover.com/pic/2023/09/7f7790be882200d87972f87e06697d8f.png" alt="image.png" /> ，考虑到对模型的描述一般是比较稀疏并且包含大量模板文本，这里作者使用gpt-3.5-turbo生成了模型可能的描述，用 BM25 算法来计算查询模型相似度分数。</p><p>为了模型易部署，作者过滤了大于3gb的所有模型，同时引入了一个直觉，下载量越高的模型效果越好。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自然语言处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RoboTAP笔记</title>
    <link href="/2023/09/01/RoboTAP%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/09/01/RoboTAP%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="robotap笔记">RoboTAP笔记</h1><p>RoboTAP是一种基于点追踪技术的少样本视觉模仿方法，可以实现机器人在多个任务和场景中的精准操作。</p><p>项目主页<a href="https://robotap.github.io/">GitHub</a></p><p>RoboTAP不需要任何特定于任务的训练或神经网络微调。由于TAP的普适性，作者发现添加新任务（包括调整超参数）只需几分钟，这比我们熟悉的任何操纵系统都快几个数量级。作者认为这种能力在大规模自主数据收集和作为解决现实任务的解决方案方面可能非常有用。RoboTAP在需要快速教授视觉运动技能并且可以轻松演示所需行为的情况下最有用。</p><p>RoboTAP存在一些重要的限制。首先，低级控制器是纯视觉的，这排除了复杂的运动规划或力控制行为。其次，目前计算运动计划一次并在没有重新规划的情况下执行它，这可能会导致单个行为失败或环境意外改变。</p><p>作者在论文中指出他有四个贡献</p><ol type="1"><li>在密集跟踪方面制定多任务操作问题</li><li>RoboTAP的具体实现是什么，在哪里以及如何以visual-saliency，temporal-alignment, 和 visual-servoing的形式解决问题</li><li>一个新的密集跟踪数据集，其中包含为RoboTAP任务量身定制的ground-truth人工注释，并在专注于真实世界机器人操作的TAP-Vid基准上进行评估</li><li>描述了RoboTAP在涉及精确多体重排、变形物体和不可逆行动的一系列操作任务中的成功和失败模式的实证结果。</li></ol><figure><img src="https://cdn.studyinglover.com/pic/2023/08/15ff4915dff842e47e91d580d0d0fe5c.png" alt="" /><figcaption>image.png</figcaption></figure><p>RoboTAP方法的核心是利用TAPIR密集地跟踪一组演示，将演示分段，并自动发现每个阶段的活动点集q，该点集覆盖在该动作阶段相关的物体上。然后，我们形成一个可以在机器人上执行的运动计划，其中包括模仿视觉运动和基本的电机原语，例如关闭和打开夹爪的阶段。通过使用TAPIR检测点q，找到最近的演示，显示如何移动这些点，并找到可以用作运动目标的单个附近帧来实现视觉伺服。将目标帧（g）和在线TAPIR检测之间的位移用作经典视觉伺服的运动目标，从而产生出奇异复杂和强健的行为。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多模态</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自建obsidian同步服务</title>
    <link href="/2023/08/31/%E8%87%AA%E5%BB%BAobsidian%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1/"/>
    <url>/2023/08/31/%E8%87%AA%E5%BB%BAobsidian%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="自建obsidian同步服务">自建obsidian同步服务</h1><p>最近GitHub上有这样一个项目<a href="https://github.com/acheong08/rev-obsidian-sync">rev-obsidian-sync</a> ,他逆向了obsidian的同步服务，使其可以在本地运行。</p><h2 id="服务端">服务端</h2><h3 id="安装">安装</h3><p>首先安装服务端， <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/acheong08/rev-obsidian-sync<br><span class="hljs-built_in">cd</span> obsidian-sync<br>go run cmd/obsidian-sync/main.go<br></code></pre></td></tr></table></figure> go会下载一堆依赖，然后你会在最下面看到这个 <img src="https://cdn.studyinglover.com/pic/2023/08/c41aa8aca8c8033d319317ee2dbc3643.png" alt="image.png" /></p><p>当然你也可以自定义域名，设置环境变量，<code>DOMAIN_NAME</code> 设置域名，<code>ADDR_HTTP</code>设置监听端口，<code>DATA_DIR</code> 设置数据保存的文件夹，<code>SIGNUP_KEY</code> 设置注册的密钥。</p><h3 id="创建用户">创建用户</h3><p>需要新建一个用户给自己 <code>go run cmd/signup/main.go</code> 在命令行按照提示输入邮箱密码。</p><p>或者使用http请求的方式 <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">curl <span class="hljs-params">--request</span> POST \<br>  <span class="hljs-params">--url</span> https:<span class="hljs-string">//yourdomain.com/user/signup</span> \<br>  <span class="hljs-params">--header</span> &#x27;Content-Type: application/json&#x27; \<br>  <span class="hljs-params">--data</span> &#x27;&#123;<br><span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;example@example.com&quot;</span>,<br><span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;example_password&quot;</span>,<br><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Example User&quot;</span>,<br><span class="hljs-string">&quot;signup_key&quot;</span>: <span class="hljs-string">&quot;&lt;SIGNUP_KEY&gt;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="客户端">客户端</h2><p>在obsidian仓库打开命令行，然后 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /path/to/vault/.obsidian<br><span class="hljs-built_in">mkdir</span> -p plugins/custom-sync-plugin &amp;&amp; <span class="hljs-built_in">cd</span> plugins/custom-sync-plugin<br>wget https://github.com/acheong08/rev-obsidian-sync-plugin/raw/master/main.js https://github.com/acheong08/rev-obsidian-sync-plugin/raw/master/manifest.json<br></code></pre></td></tr></table></figure> 打开obsidian设置界面，选择第三方插件，启用<code>Custom Native Sync</code> <img src="https://cdn.studyinglover.com/pic/2023/08/0a124be82a4a2fe13b1943ab320c839d.png" alt="image.png" /></p><p>设置服务端地址 <img src="https://cdn.studyinglover.com/pic/2023/08/9b7c177f4b69baed6686fffca3a04df5.png" alt="image.png" /></p><p>同时打开核心插件的同步 <img src="https://cdn.studyinglover.com/pic/2023/08/e3944c723e5b4ea0740f729fdd4a1c73.png" alt="image.png" /> 在点击左侧出现的同步按钮，输入前面设置的账号密码，就可以体验到官方的同步功能了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MediaPipe即将推出图像生成服务</title>
    <link href="/2023/08/23/MediaPipe%E5%8D%B3%E5%B0%86%E6%8E%A8%E5%87%BA%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90%E6%9C%8D%E5%8A%A1/"/>
    <url>/2023/08/23/MediaPipe%E5%8D%B3%E5%B0%86%E6%8E%A8%E5%87%BA%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="mediapipe即将推出图像生成服务">MediaPipe即将推出图像生成服务</h1><p>今天我逛GitHub Trending的时候突然发现MediaPipe的示例库被顶到了前排 <img src="https://cdn.studyinglover.com/pic/2023/08/0bc3379fab3273262e8b6f14799b629a.png" alt="image.png" /></p><p>这不对劲，我赶紧去mediapipe的储存库，发现7个小时前Google推送了新的内容 <a href="https://github.com/google/mediapipe/commit/2ebdb01d4326c934e0628e7ff45cadda6575d23f">ImageGenerator Java API</a> <img src="https://cdn.studyinglover.com/pic/2023/08/b744863d78b3347dc0cfb23c7a0cd29d.png" alt="image.png" /></p><p>原来MediaPipe也要推出文字生成图片内容啊，还是移动端设备上的，这让我想起来GitHub最近有人开始写stable-diffusion.cpp，一个使用了ggml量化加速的sd。</p><p>顺藤摸瓜我们可以找到MediaPipe的<a href="https://developers.google.com/mediapipe/solutions/vision/image_generator">文档</a>。 <img src="https://cdn.studyinglover.com/pic/2023/08/6c50982c58e1d65562e230b0bb601d15.png" alt="image.png" /></p><p>还是即将推出状态，但是给了一个简单示例。</p><p>用法超级简单，就是下载下面几个模型中的一个 - <a href="https://huggingface.co/runwayml/stable-diffusion-v1-5/blob/main/v1-5-pruned-emaonly.ckpt">runwayml/stable-diffusion-v1-5</a> - <a href="https://huggingface.co/justinpinkney/miniSD/blob/main/miniSD.ckpt">justinpinkney/miniSD</a> - <a href="https://huggingface.co/hakurei/waifu-diffusion-v1-4/blob/main/models/wd-1-3-penultimate-ucg-cont.ckpt">hakurei/waifu-diffusion-v1-4</a> - <a href="https://huggingface.co/Fictiverse/Stable_Diffusion_PaperCut_Model/blob/main/PaperCut_v1.ckpt">Fictiverse/Stable_Diffusion_PaperCut_Model</a></p><p>安装依赖 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install torch typing_extensions numpy Pillow requests pytorch_lightning absl-py<br></code></pre></td></tr></table></figure> 把这个文件copy下来,<a href="https://github.com/googlesamples/mediapipe/blob/main/tools/image_generator_converter/convert.py">地址</a></p><p>然后 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 convert.py --ckpt_path &lt;ckpt_path&gt; --output_path &lt;output_path&gt;<br></code></pre></td></tr></table></figure></p><p>接着将文件夹内容<code>&lt;output_path&gt;</code>推送到 Android 设备。 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell <span class="hljs-built_in">rm</span> -r /data/local/tmp/image_generator/ <br><br>adb shell <span class="hljs-built_in">mkdir</span> -p /data/local/tmp/image_generator/<br><br>adb push &lt;output_path&gt;/. /data/local/tmp/image_generator/bins<br></code></pre></td></tr></table></figure> 安装 Android 演示应用程序,在<a href="https://storage.googleapis.com/mediapipe-tasks/image_generator/imagegenerator.apk">这里</a>下载 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb install imagegenerator.apk<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Dual-Stream Diffusion Net for Text-to-Video Generation笔记</title>
    <link href="/2023/08/23/DSDN%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/08/23/DSDN%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="dual-stream-diffusion-net-for-text-to-video-generation笔记">Dual-Stream Diffusion Net for Text-to-Video Generation笔记</h1><p>这篇论文提出的模型架构是Dual-Stream Diffusion Net（DSDN），它是一种双流扩散网络。</p><figure><img src="https://cdn.studyinglover.com/pic/2023/08/3021b6624ee4f2093c6166b6a80cd643.png" alt="" /><figcaption>image.png</figcaption></figure><p>首先，视频内容通过一个一个编码器编码成内容特征和一个动作编码器编码成动作特征，并通过一个增量学习模块进行更新。前向扩散过程没有使用DDPM而是使用了 Hierarchical Text-Conditional Image Generation with CLIP Latents 这篇论文提出的方法。</p><p>为了对齐生成的内容和运动，设计了一个双流转换交互模块来通过交叉注意力实现两个分支之间的信息交互和对齐。</p><p>最后引入了运动合成器来简化运动信息的操作。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文字生成图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ViT在DDPM取代UNet(DiT)</title>
    <link href="/2023/08/20/ViT%E5%9C%A8DDPM%E5%8F%96%E4%BB%A3UNet(DiT)/"/>
    <url>/2023/08/20/ViT%E5%9C%A8DDPM%E5%8F%96%E4%BB%A3UNet(DiT)/</url>
    
    <content type="html"><![CDATA[<h1 id="vit在ddpm取代unetdit">ViT在DDPM取代UNet(DiT)</h1><p><a href="https://www.wpeebles.com/DiT.html">项目主页</a></p><p>这篇论文主要是尝试使用ViT取代DDPM中的UNet，叫做Diffusion Transformer-DiT，作者训练了DiT-S、DiT-B、DiT-L 和 DiT-XL四种模型，每种模型的patch取8,4,2, 一共训练了12个模型。</p><p>作者探索的完整 DiT 设计空间是补丁大小、变压器块架构和模型大小。</p><p>模型第一层是对 sequences of patches 进行操作(就是ViT把图片看成<span class="math inline">\(16*16\)</span>的的单词之后单词构成的序列) 。 <img src="https://cdn.studyinglover.com/pic/2023/08/d9b9a168f177471d890c1bd3e3f2cc2d.png" alt="image.png" /></p><p>如图所示，给定的patch是<span class="math inline">\(p\times p\)</span> ,VAE采样出来的噪声大小是<span class="math inline">\(I\times I\times C\)</span> ,那么patches会变成长度为<span class="math inline">\(T=(I/\hat{p})^{2}\)</span> 的一个序列,每个patch维度是<span class="math inline">\(d\)</span> ,位置嵌入用的是sine-cosine。</p><p>接下来就是diffusion transformers的设计。 <img src="https://cdn.studyinglover.com/pic/2023/08/f68c4f271029a484e97822dbb9fb2569.png" alt="image.png" /></p><p>作者提到了一点，就是获取到path序列之后应该在后面加上去噪步数和类别标签，并在最后一个DiT块之后删掉。</p><p>在最终的 DiT 块之后，需要将输出解码为噪声预测和对角协方差预测。这两个输出的形状都等于整个模型的输入。作者使用标准线性解码器来做到这一点。如果使用 adaLN 自适应就应用最后一层范数，并将每个标记线性解码为 <span class="math inline">\(p\times p\times2C\)</span> 张量，其中 <span class="math inline">\(C\)</span> 是输入到DiT的空间大小。最后，将解码的token重新排列到其原始空间布局中，得到预测的噪声和协方差。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文字生成图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arch4edu搞崩了我的flutter</title>
    <link href="/2023/08/19/arch4edu%E6%90%9E%E5%B4%A9%E4%BA%86%E6%88%91%E7%9A%84flutter/"/>
    <url>/2023/08/19/arch4edu%E6%90%9E%E5%B4%A9%E4%BA%86%E6%88%91%E7%9A%84flutter/</url>
    
    <content type="html"><![CDATA[<h1 id="arch4edu搞崩了我的flutter">arch4edu搞崩了我的flutter</h1><p>今天是快乐的一天，适合滚包 <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yay</span><br></code></pre></td></tr></table></figure> 一切安好，arch4edu说我的flutter需要更新 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">==&gt; 要排除的包: (示例: <span class="hljs-string">&quot;1 2 3&quot;</span>, <span class="hljs-string">&quot;1-3&quot;</span>, <span class="hljs-string">&quot;^4&quot;</span> 或软件库名称)<br> -&gt; 排除软件包可能会导致不完整的升级并破坏系统<br>==&gt; <br><br></code></pre></td></tr></table></figure> 没什么需要排除的，接下来就是愉快的自动安装</p><p>突然我看到了这个</p><figure><img src="https://cdn.studyinglover.com/pic/2023/08/d257220b6c5bc01465f92fdd72320344.png" alt="" /><figcaption>image.png</figcaption></figure><p>警告啦，没啥好担心的啦，待会跑一下看好着没</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">flutter doctor                     <br>Found an existing Pub cache at /home/zjh/.pub-cache.<br>It can be repaired by running `dart pub cache repair`.<br>It can be reset by running `dart pub cache clean`.<br>Found an existing Dart Analysis Server cache at /home/zjh/.dartServer.<br>It can be reset by deleting /home/zjh/.dartServer.<br>Flutter failed to write to a file at <span class="hljs-string">&quot;/opt/flutter/packages/flutter_tools/.dart_tool/version&quot;</span>.<br>Please ensure that the SDK and/or project is installed <span class="hljs-keyword">in</span> a location that has <span class="hljs-built_in">read</span>/write<br>permissions <span class="hljs-keyword">for</span> the current user.<br>Try running:<br>  <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R $(<span class="hljs-built_in">whoami</span>) /opt/flutter/packages/flutter_tools/.dart_tool/version<br><br></code></pre></td></tr></table></figure><p>好的他炸了</p><p>看着问题不大，就是读写权限的问题，的问题？鬼知道会有啥问题，我决定让arch4edu滚蛋</p><p>先<code>sudo pacman -Rns flutter</code>把arch4edu的flutter删掉，然后去<code>/etc/pacman.conf</code> 删除了arch4edu镜像，再<code>sudo pacman -Syu</code>滚一遍包，最后<code>yay flutter</code></p><p>中间会有一个问题 <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts">错误：无法提交处理 (有冲突的文件)<br><span class="hljs-symbol">flutter:</span> 文件系统中已存在 <span class="hljs-keyword">/opt/</span>flutter<span class="hljs-keyword">/bin/</span>cache/flutter_version_check.stamp <br>发生错误，没有软件包被更新。<br></code></pre></td></tr></table></figure> ok,sudo直接删就行，反正是cache</p><p>最后<code>flutter docker</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">Doctor summary (to see all details, run flutter doctor -v):<br>[✓] Flutter (Channel stable, 3.13.0, on Arch Linux 6.4.10-arch1-1, locale zh_CN.UTF-8)<br>[✓] Android toolchain - develop <span class="hljs-keyword">for</span> Android devices (Android SDK version 34.0.0)<br>[✓] Chrome - develop <span class="hljs-keyword">for</span> the web<br>[✓] Linux toolchain - develop <span class="hljs-keyword">for</span> Linux desktop<br>[✓] Android Studio (version 2022.2)<br>[✓] Connected device (2 available)<br>[✓] Network resources<br><br>• No issues found!<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LISA(推理分割)笔记</title>
    <link href="/2023/08/18/LISA(%E6%8E%A8%E7%90%86%E5%88%86%E5%89%B2)%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/08/18/LISA(%E6%8E%A8%E7%90%86%E5%88%86%E5%89%B2)%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="lisa推理分割笔记">LISA(推理分割)笔记</h1><h2 id="简介">简介</h2><p>这篇论文题目中文翻译是 基于大型语言模型的语义分割， 提出了一个新任务-推理分割。大概就是给一张图和一段话，模型使用大语言模型分割出目标。作者给了一个例子，从图片中分割出富含维生素C的物品。</p><p>作者说这篇论文有三个贡献，提出了推理分割的任务，建立了一个推理分割基准，ReasonSeg， 还有训练了一个模型。</p><p>项目主页<a href="https://github.com/dvlab-research/LISA">GitHub</a></p><p>LISA可以完成四种任务 1) complex reasoning; 2) world knowledge; 3) explanatory answers; 4) multi-turn conversation</p><h2 id="模型架构">模型架构</h2><h3 id="生成mask">生成mask</h3><p>这里作者提出了一些问题，就是大部分llm是不具备视觉能力，有视觉能力的泛化型不好还不好训练。相比之下，训练 LISA-7B 在 8 个 NVIDIA 24G 3090 GPU 上只需要 10,000 个训练步骤。(嗯8块3090)</p><p><img src="https://cdn.studyinglover.com/pic/2023/08/ded90e7e3f84739b187dd679c39bd8dd.png" alt="image.png" /> 模型结构就是上面这张图，右下角标了火花的就说明是需要训练或者微调的。首先扩充词表，加入<code>&lt;SEG&gt;</code> ,接下来给出一张图片<span class="math inline">\(x_{img}\)</span>和一段文本<span class="math inline">\(x_{txt}\)</span>, 将他们送入大语言模型<span class="math inline">\(\mathcal{F}\)</span> ,写成公式就是<span class="math display">\[\hat{\boldsymbol{y}}_{txt}=\mathcal{F}(x_{img},\boldsymbol{x}_{txt}).\]</span> 当LLM倾向于生成二进制分割掩码时，输出<span class="math inline">\(\hat{\boldsymbol{y}}_{txt}\)</span>应该包含一个<code>&lt;SEG&gt;</code>令牌。所以提取最后一层嵌入<span class="math inline">\(\hat{h}_{seg}\)</span> (因为他和<code>&lt;SEG&gt;</code> token 是相关的)， 并用一个MLP <span class="math inline">\(\gamma\)</span> 将其投影到<span class="math inline">\(h_{seg}\)</span>。</p><p>同时，视觉编码器<span class="math inline">\(\mathcal{F_{enc}}\)</span> 会从图片中提取出视觉特征<span class="math inline">\(\text{f}\)</span> 。</p><p>最后<span class="math inline">\(h_{seg}\)</span>和<span class="math inline">\(\text{f}\)</span> 会被送入一个和SAM有相同架构的解码器，获得最后的mask.</p><p>整个过程表示出来就是<span class="math display">\[\begin{gathered}\boldsymbol{h}_{seg}=\gamma(\hat{\boldsymbol{h}}_{seg}),\quad\boldsymbol{f}=\mathcal{F}_{enc}(\boldsymbol{x}_{img}),\\\hat{\boldsymbol{M}}=\mathcal{F}_{dec}(\boldsymbol{h}_{seg},\boldsymbol{f}).\end{gathered}\]</span> ### 训练目标 训练目标是文本生成损失 <span class="math inline">\(\mathcal{L}_{txt}\)</span> 和分割掩码损失 <span class="math inline">\(\mathcal{L}_{mask}\)</span> 进行端到端训练。总体目标 <span class="math inline">\(L\)</span> 是这些损失的加权和，由 <span class="math inline">\(\lambda_{txt}\)</span> 和 <span class="math inline">\(\lambda_{mask}\)</span> 确定<span class="math display">\[\mathcal{L}=\lambda_{txt}\mathcal{L}_{txt}+\lambda_{mask}\mathcal{L}_{mask}.\]</span> ## 训练 ### 数据集 训练数据由三部分组成，都是开源数据集 1. Semantic Segmentation Dataset 2. Vanilla Referring Segmentation Dataset 3. Visual Question Answering Dataset</p><p><strong>值得注意的是，LISA具有zero-shot能力，因为训练集不包含任何推理分割的内容。</strong></p><h3 id="需要训练的参数">需要训练的参数</h3><p>为了保持llm的泛化能力作者用了lora,解码器可以被微调，llm的词嵌入和投影最后一层潜入的mlp也可以微调</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多模态</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在终端绘制GPU显存使用曲线</title>
    <link href="/2023/08/13/%E5%9C%A8%E7%BB%88%E7%AB%AF%E7%BB%98%E5%88%B6GPU%E6%98%BE%E5%AD%98%E4%BD%BF%E7%94%A8%E6%9B%B2%E7%BA%BF/"/>
    <url>/2023/08/13/%E5%9C%A8%E7%BB%88%E7%AB%AF%E7%BB%98%E5%88%B6GPU%E6%98%BE%E5%AD%98%E4%BD%BF%E7%94%A8%E6%9B%B2%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="在终端绘制gpu显存使用曲线">在终端绘制GPU显存使用曲线</h1><p>这个东西的灵感来自于写torch的时候想实时看到loss和gpu使用情况，突然想到可以在终端实时显示，经过与ai的一番激烈讨，最终有了这个代码。</p><p>我们首先要获取GPU的显存使用数据，先检查是否安装了<code>nvidia-smi</code>, 在终端输入有正常输出即可。</p><p>首先导入所有需要的库 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> asciichartpy<br><span class="hljs-keyword">import</span> platform<br></code></pre></td></tr></table></figure></p><p>通过<code>nvidia-smi</code> 的命令获取已经使用的显存和所有现存 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_gpu_used_memory</span>():<br>output = subprocess.check_output([<span class="hljs-string">&#x27;nvidia-smi&#x27;</span>, <span class="hljs-string">&#x27;--query-gpu=memory.used&#x27;</span>, <span class="hljs-string">&#x27;--format=csv,nounits&#x27;</span>])<br>output = output.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>lines = output.strip().split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>used_memory = <span class="hljs-built_in">int</span>(lines[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">return</span> used_memory<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_gpu_total_memory</span>():<br>output = subprocess.check_output([<span class="hljs-string">&#x27;nvidia-smi&#x27;</span>, <span class="hljs-string">&#x27;--query-gpu=memory.total&#x27;</span>, <span class="hljs-string">&#x27;--format=csv,nounits&#x27;</span>])<br>output = output.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>lines = output.strip().split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>total_memory = <span class="hljs-built_in">int</span>(lines[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">return</span> total_memory<br></code></pre></td></tr></table></figure></p><p><code>asciichartpy</code> 是一个 Python 库，用于在终端中绘制 ASCII 图表。我们用他来在终端绘制图标。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_gpu_memory</span>(<span class="hljs-params">gpu_memory_history</span>):<br>    used_memory = get_gpu_used_memory()<br>    total_memory = get_gpu_total_memory()<br><br>    used_percentage = used_memory / total_memory * <span class="hljs-number">100</span><br>    gpu_memory_history.append(used_percentage)<br><br>    <span class="hljs-comment"># 绘制字符图表</span><br>    chart = asciichartpy.plot(gpu_memory_history, &#123;<span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;width&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;timestamp&#x27;</span>: <span class="hljs-literal">True</span>&#125;)<br>    <br>    <span class="hljs-comment"># 清空终端屏幕</span><br>    <span class="hljs-keyword">if</span> platform.system() == <span class="hljs-string">&#x27;Windows&#x27;</span>:<br>        subprocess.call(<span class="hljs-string">&#x27;cls&#x27;</span>, shell=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">else</span>:<br>        subprocess.call(<span class="hljs-string">&#x27;clear&#x27;</span>, shell=<span class="hljs-literal">True</span>)<br>    <br>    <span class="hljs-built_in">print</span>(chart)<br></code></pre></td></tr></table></figure></p><p>最后运行上面的代码 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        gpu_memory_history = []<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            draw_gpu_memory(gpu_memory_history)<br>            time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">except</span> KeyboardInterrupt:<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure> 运行效果 <img src="https://cdn.studyinglover.com/pic/2023/08/c320d69a8169e36fab4c82f1725c298b.png" alt="image.png" /></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GPTBot介绍</title>
    <link href="/2023/08/11/GPTBot%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/08/11/GPTBot%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="gptbot介绍">GPTBot介绍</h1><p>最近，openai公布了<a href="https://platform.openai.com/docs/gptbot/gptbot">GPTBot</a> 的相关信息，并给出了禁止GPTBot的方法。以下是全文翻译。</p><p>GPTBot是OpenAI的网络爬虫，可以通过以下User agent和字符串来识别。 <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">User</span> agent token: GPTBot<br><span class="hljs-attribute">Full</span> user-agent string: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko; compatible; GPTBot/<span class="hljs-number">1</span>.<span class="hljs-number">0</span>; +https://openai.com/gptbot)<br></code></pre></td></tr></table></figure></p><h2 id="使用">使用</h2><p>使用 GPTBot 用户代理爬取的网页可能会用于改进未来的模型，并且会过滤掉需要付费访问、已知收集个人身份信息（PII）或含有违反我们政策的文本的来源。允许 GPTBot 访问您的网站可以帮助 AI 模型变得更准确，提高它们的一般能力和安全性。在下面，我们还分享了如何禁止 GPTBot 访问您的网站。</p><h3 id="禁止-gptbot">禁止 GPTBot</h3><p>要禁止 GPTBot 访问您的网站，您可以将 GPTBot 添加到您网站的 robots.txt： <figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">User-agent</span><span class="hljs-punctuation">: </span>GPTBot<br><span class="hljs-attribute">Disallow</span><span class="hljs-punctuation">: </span>/<br></code></pre></td></tr></table></figure></p><h3 id="自定义-gptbot-访问">自定义 GPTBot 访问</h3><p>要允许 GPTBot 仅访问您网站的部分内容，您可以将 GPTBot 令牌添加到您网站的 robots.txt，如下所示： <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts">User-agent: GPTBot<br><span class="hljs-symbol">Allow:</span> <span class="hljs-keyword">/directory-1/</span><br><span class="hljs-symbol">Disallow:</span> <span class="hljs-keyword">/directory-2/</span><br></code></pre></td></tr></table></figure></p><h3 id="ip-出口范围">IP 出口范围</h3><p>对于 OpenAI 的爬虫，它会从 <a href="https://openai.com/gptbot-ranges.txt">OpenAI 网站</a>上记录的 IP 地址段向网站发出请求。</p><p>这里我给出IP 地址段 <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">20.15.240.64</span>/<span class="hljs-number">28</span><br><span class="hljs-number">20.15.240.80</span>/<span class="hljs-number">28</span><br><span class="hljs-number">20.15.240.96</span>/<span class="hljs-number">28</span><br><span class="hljs-number">20.15.240.176</span>/<span class="hljs-number">28</span><br><span class="hljs-number">20.15.241.0</span>/<span class="hljs-number">28</span><br><span class="hljs-number">20.15.242.128</span>/<span class="hljs-number">28</span><br><span class="hljs-number">20.15.242.144</span>/<span class="hljs-number">28</span><br><span class="hljs-number">20.15.242.192</span>/<span class="hljs-number">28</span><br><span class="hljs-number">40.83.2.64</span>/<span class="hljs-number">28</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>arch蓝牙无法连接</title>
    <link href="/2023/08/10/arch%E8%93%9D%E7%89%99%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5/"/>
    <url>/2023/08/10/arch%E8%93%9D%E7%89%99%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="arch蓝牙无法连接">arch蓝牙无法连接</h1><p>在arcchlinux成功安装并且已经安装蓝牙的相关包之后，在设置打开蓝牙发现需要先开启蓝牙。</p><p>没啥好的解决办法，运行 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span>  --now bluetooth <br></code></pre></td></tr></table></figure> 问题解决。</p>]]></content>
    
    
    
    <tags>
      
      <tag>踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GPU部署llama-cpp-python(llama.cpp通用)</title>
    <link href="/2023/08/06/GPU%E9%83%A8%E7%BD%B2llama-cpp-python(llama.cpp%E9%80%9A%E7%94%A8)/"/>
    <url>/2023/08/06/GPU%E9%83%A8%E7%BD%B2llama-cpp-python(llama.cpp%E9%80%9A%E7%94%A8)/</url>
    
    <content type="html"><![CDATA[<h1 id="gpu部署llama-cpp-pythonllama.cpp通用">GPU部署llama-cpp-python(llama.cpp通用)</h1><h2 id="通用流程">通用流程</h2><p>我们的安装平台是Ubuntu20.04，Python 3.8.10，cuda 11.6。</p><p>首先确保自己是否已经安装了cuda,输入 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvcc -V<br></code></pre></td></tr></table></figure></p><p>有类似下面的输出即可 <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvcc</span>: NVIDIA (R) Cuda compiler driver<br><span class="hljs-attribute">Copyright</span> (c) <span class="hljs-number">2005</span>-<span class="hljs-number">2021</span> NVIDIA Corporation<br><span class="hljs-attribute">Built</span> <span class="hljs-literal">on</span> Fri_Dec_17_18:<span class="hljs-number">16</span>:<span class="hljs-number">03</span>_PST_2021<br><span class="hljs-attribute">Cuda</span> compilation tools, release <span class="hljs-number">11</span>.<span class="hljs-number">6</span>, V11.<span class="hljs-number">6</span>.<span class="hljs-number">55</span><br><span class="hljs-attribute">Build</span> cuda_11.<span class="hljs-number">6</span>.r11.<span class="hljs-number">6</span>/compiler.<span class="hljs-number">30794723</span>_0<br></code></pre></td></tr></table></figure></p><p>我们选用 <code>cuBLAS</code> 加速后端代理。直接按照下面命令安装 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LLAMA_CUBLAS=1<br>CMAKE_ARGS=<span class="hljs-string">&quot;-DLLAMA_CUBLAS=on&quot;</span> FORCE_CMAKE=1 pip install llama-cpp-python<br></code></pre></td></tr></table></figure></p><p>不出意外的话就安装好了，但是你会出现很多意外，请你努力在一堆红色的报错中找出关键出错点，然后搜索，在最后我给出了几个我遇到的。</p><h2 id="运行">运行</h2><p>运行和CPU直接运行相似，只是需要加入几个参数. <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 -m llama_cpp.server --model llama-2-70b-chat.ggmlv3.q5_K_M.bin --n_threads 30 --n_gpu_layers 200<br></code></pre></td></tr></table></figure></p><p><code>n_threads</code> 是一个CPU也有的参数，代表最多使用多少线程。</p><p><code>n_gpu_layers</code> 是一个GPU部署非常重要的一步，代表大语言模型有多少层在GPU运算，如果你的显存出现 <code>out of memory</code> 那就减小 <code>n_gpu_layers</code></p><h2 id="关于多卡">关于多卡</h2><p>亲测多卡没有遇到什么大坑，只要<code>torch.cuda.is_available()</code> 和<code>torch.cuda.device_count()</code>正常就可以跑起来。</p><p>两张 Tesla T4 的卡推理70B大概半分钟就可以出结果。</p><h2 id="报错解决">报错解决</h2><h3 id="check-for-working-cuda-compiler-usrlocalcudabinnvcc---skipped">Check for working CUDA compiler: /usr/local/cuda/bin/nvcc - skipped</h3><p>参考 https://github.com/ggerganov/llama.cpp/issues/1832 系统安装过程中没找到你的cuda在哪里，所以在pip安装之前先设置一个环境变量,<strong>把/usr/local/cuda-x.y改成你的cuda路径</strong> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> CUDA_PATH=/usr/local/cuda-x.y<br></code></pre></td></tr></table></figure></p><h3 id="f16c-expected-a-number">'f16c': expected a number</h3><p>这是你的cuda版本太低了，升级到较新版本(11.6可用)。</p><p>或者参考 https://github.com/ggerganov/llama.cpp/issues/1467 和 https://github.com/marella/ctransformers/issues/53 中提到的命令和构建(我没有尝试，有谁试了可以请我结果)。</p><h3 id="value-sm_30-is-not-defined-for-option-gpu-name-tesla-t">Value 'sm_30' is not defined for option 'gpu-name' Tesla T</h3><p>先运行下面的命令 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-cache policy nvidia-cuda-toolkit<br></code></pre></td></tr></table></figure> 如果版本是<strong>1.0</strong> 那么请运行 <code>sudo apt remove nvidia-cuda-toolkit</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花式求GCD</title>
    <link href="/2023/08/02/%E8%8A%B1%E5%BC%8F%E6%B1%82GCD/"/>
    <url>/2023/08/02/%E8%8A%B1%E5%BC%8F%E6%B1%82GCD/</url>
    
    <content type="html"><![CDATA[<h1 id="花式求gcd">花式求GCD</h1><p>今天学校实验室纳新群有同学提到了<code>a^=b^=a^=b​</code> 交换两个数的操作，我突然想到之前在知乎看到通过异或实现gcd的方法，一番翻找后没啥结果，便去问了下认识的oi大佬有没有一行求gcd的算法。</p><p>大佬很快给出了一个函数<code>int gcd(int a,int b)&#123;return y?gcd(y,x%y):x;&#125;</code> 真的就是一行，完整的代码就是下面这个</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> y ? <span class="hljs-built_in">gcd</span>(y, x % y) : x; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> a,b;<br>a=<span class="hljs-number">10</span>;<br>b=<span class="hljs-number">20</span>;<br>a = <span class="hljs-built_in">gcd</span>(a,b);<br>cout&lt;&lt;a&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>但是我一像不对啊，我的异或呢？我又问了一下，大佬给了我一个截图 <img src="https://cdn.studyinglover.com/pic/2023/08/07b57e65da92d9c19bb82d740132f07c.png" /></p><p>就是这个神奇的写法</p><p>这段代码的实现方式是，使用异或运算符（^）和取模运算符（%）来交换变量a和b的值。具体来说，代码中的while循环会一直执行，直到b的值为0为止。在每次循环中，代码会先将a对b取模，然后将结果赋值给a，接着将b对a取模，然后将结果赋值给b，最后使用异或运算符交换a和b的值。这样，当循环结束时，a和b的值就被成功地交换了。(来自copilot chat)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> a,b;<br>a=<span class="hljs-number">10</span>;<br>b=<span class="hljs-number">20</span>;<br><span class="hljs-keyword">while</span>(b^=a^=b^=a%=b);<br>cout&lt;&lt;a&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用llama构建一个蜜罐(前端)</title>
    <link href="/2023/08/01/%E4%BD%BF%E7%94%A8llama%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%9C%9C%E7%BD%90(%E5%89%8D%E7%AB%AF)/"/>
    <url>/2023/08/01/%E4%BD%BF%E7%94%A8llama%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%9C%9C%E7%BD%90(%E5%89%8D%E7%AB%AF)/</url>
    
    <content type="html"><![CDATA[<h1 id="使用llama构建一个蜜罐前端">使用llama构建一个蜜罐(前端)</h1><p><img src="https://cdn.studyinglover.com/pic/2023/07/e9a49d4a404ed9bc4b0f119249194e3d.png" /> 在<a href="https://studyinglover.com/2023/07/29/%E4%BD%BF%E7%94%A8llama%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%9C%9C%E7%BD%90(%E5%90%8E%E7%AB%AF)/">使用llama构建一个蜜罐(后端)</a> 中我们通过llama和flask构建了一个蜜罐的后端，通过将shell命令作为字段的一部分，让llama假装执行命令来防止蜜罐被攻破。那有了后端我们还需要一个前端命令行来让用户登陆并执行命令。</p><p>完整项目开源在了<a href="https://github.com/StudyingLover/llama-honeypot-python">GitHub</a></p><p>接下来，让我们来实现一个模拟ssh服务器，或者说实现一个ssh mock 然后执行命令的时候不让他真的执行同时改一下输出。</p><p><strong>等等？我们真的需要一个ssh mock 吗？</strong> 还是说，我们需要的是一个<strong>跑在终端的，长得很像终端的，能输入输出的，一个可交互的代码？</strong></p><p>哦，好像我们需要的只是一个可交互的代码，难道攻击方ssh上来了还能验证一下这是不是真的是终端？(我用了三天才想通这个问题)</p><p>so,工作量一下子减少了太多了 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> requests<br>  <br><span class="hljs-comment"># 禁用 Ctrl Z stty susp undef</span><br><span class="hljs-comment"># 启用 Ctrl Z stty susp ^Z</span><br><br>admin_key = <span class="hljs-string">&quot;123456&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_responce</span>(<span class="hljs-params">command</span>):<br><span class="hljs-keyword">if</span> (command == admin_key):<br>exit()<br>output = requests.post(<span class="hljs-string">&quot;http://127.0.0.1:9000/admin/&quot;</span>+command).json()<br><span class="hljs-keyword">return</span> output[<span class="hljs-string">&quot;message&quot;</span>]<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attact_warning</span>():<br><span class="hljs-keyword">pass</span><br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">anti_attact</span>():<br><span class="hljs-keyword">pass</span><br>  <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>attact_warning()<br>anti_attact()<br><span class="hljs-keyword">try</span>:<br>command = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[root@ubuntu ~]$ &quot;</span>)<br><span class="hljs-built_in">print</span>(get_responce(command))<br>  <br><span class="hljs-keyword">except</span> KeyboardInterrupt:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure></p><p>这里有几个点需要注意 1. 代码<strong>不能直接用于生产环境！！！请先完善细节并大量测试。本项目仅为学习使用，未经过专业人员测试</strong> 1. <code>admin_key</code>，这个变量的作用是让管理员能用终端，<strong>记得修改</strong>。如果你认为这种方法太low了或者可能被作为突破口，请修改或PR。 2. 接口地址，我这里是<code>http://127.0.0.1:9000/admin/</code> ，这里需要改成你的，建议先用postman或者apifox或者啥的测一下。 3. 入侵检测和反击模块需要你<strong>自己实现</strong>，毕竟这只是一个让你的蜜罐更安全的项目。</p><p>在三个终端分别运行llama服务器(图右终端)，蜜罐后端(图左终端)和蜜罐前端(图中终端)</p><figure><img src="https://cdn.studyinglover.com/pic/2023/07/dd31f63365b8a8657b1459f7fe883a36.png" alt="" /><figcaption>image.png</figcaption></figure><p>项目还有很多改进之处，在后面我也会进一步优化prompt和模型来获得更好的终端对话体验。</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用llama构建一个蜜罐(后端)</title>
    <link href="/2023/07/29/%E4%BD%BF%E7%94%A8llama%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%9C%9C%E7%BD%90(%E5%90%8E%E7%AB%AF)/"/>
    <url>/2023/07/29/%E4%BD%BF%E7%94%A8llama%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%9C%9C%E7%BD%90(%E5%90%8E%E7%AB%AF)/</url>
    
    <content type="html"><![CDATA[<h1 id="使用llama构建一个蜜罐后端">使用llama构建一个蜜罐(后端)</h1><p><img src="https://cdn.studyinglover.com/pic/2023/07/e9a49d4a404ed9bc4b0f119249194e3d.png" /></p><p>完整项目开源在了<a href="https://github.com/StudyingLover/llama-honeypot-python">GitHub</a></p><p>众所周知，蜜罐是一个很有趣的东西，他是一种网络安全机制，旨在诱使攻击者攻击虚假的系统或应用程序，以便安全专业人员可以监视攻击者的行为并收集攻击者的信息。蜜罐通常是一台虚拟机或一台计算机，它看起来像一个真实的系统，但实际上是一个特意构建的系统，用于诱骗攻击者。攻击者在攻击蜜罐时，安全专业人员可以收集攻击者的信息，例如攻击者使用的工具、攻击者的IP地址、攻击者的攻击技术等等。这些信息可以帮助安全专业人员更好地了解攻击者的行为和意图，并采取相应的措施来保护真实的系统。</p><p>但是缺点很明显，不管我怎么做蜜罐终究是跑在真实的服务器上的，还是很可能被攻破，所以，我们能不能让ai模仿一个linux主机作为蜜罐？</p><p>今天早上看到了这个视频 https://b23.tv/pXiGNIK ， 他开源了一个使用chatGPT作为终端的代码，开源在<a href="gitee.com/cutecuteyu/chatgpt-honeypot">gitee</a> ，不幸的是我openai账户没钱了，但是，昨天我才写了<a href="https://studyinglover.com/2023/07/28/llama-cpp-python%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/#%E6%90%AD%E5%BB%BA%E4%B8%8Eopenai%E6%8E%A5%E5%8F%A3%E5%85%BC%E5%AE%B9%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E5%8F%A3">搭建与openai接口兼容的服务器接口</a>, 那么我就可以改造一下他的代码，使用llama作为后端</p><p>首先clone他的仓库 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> gitee.com/cutecuteyu/chatgpt-honeypot<br><span class="hljs-built_in">cd</span> ./chatgpt-honeypot<br></code></pre></td></tr></table></figure></p><p>同时安装依赖 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install openai<br></code></pre></td></tr></table></figure></p><p>接下来我们在<code>chatgpt-honeypot</code>目录下创建一个 <code>.env</code> 文件，写上接口路径 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs .env">export OPENAI_API_BASE = http://localhost:8000/v1<br></code></pre></td></tr></table></figure></p><p>然后修改<code>myopenaiapikey.py</code> 文件，在第二行的<code>api=""</code> 中双引号随便填入一点东西。</p><p>下面修改<code>honeypot.py</code> ，因为我们的后端换成了llama,那么我们的prompt也需要更改,这里借鉴了<a href="https://github.com/Coldwave96/llama-honeypot">这个项目</a> ,将<code>chat2</code> 函数改成下面的内容 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">chat2</span>(<span class="hljs-params">query</span>):<br>response = openai.ChatCompletion.create(<br>model=<span class="hljs-string">&quot;gpt-3.5-turbo-0613&quot;</span>,<br>messages=[<br>&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;assistant&quot;</span>,<br><span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">I want you to act as a Linux terminal. I will provide commands and history, then you will reply with what the terminal should show. I want you to only reply with the terminal output inside one unique code block, and nothing else. Do no write explanations. Do not type commands unless I instruct you to do so.\n\n### Command:\n&#123;command&#125;\n\n### History:\n&#123;history&#125;\n### Response:\n</span><br><span class="hljs-string">&quot;&quot;&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: query&#125;],<br>)<br>message = response[<span class="hljs-string">&quot;choices&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;message&quot;</span>]<br><span class="hljs-keyword">return</span> message<br></code></pre></td></tr></table></figure></p><p>启动项目，正常IDE运行或者在命令行 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3  honeypot.py<br></code></pre></td></tr></table></figure></p><p>启动llama后端,将/path/to改成你的路径 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 -m llama_cpp.server --model  /path/to/llama-2-13b-chat.ggmlv3.q4_1.bin<br></code></pre></td></tr></table></figure></p><p>在浏览器访问<code>http://127.0.0.1:9000/admin/ls</code>,看到浏览器显示<code>/home/user/Documents/project</code> 类似的内容说明运行成功。</p><p>项目当然还有很多可以改进的地方，例如使用更好的prompt,或者微调llama作为后端，留给大家继续探索。</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>llama-cpp-python快速上手</title>
    <link href="/2023/07/28/llama-cpp-python%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <url>/2023/07/28/llama-cpp-python%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="llama-cpp-python-快速上手">llama-cpp-python 快速上手</h1><h2 id="搭建环境">搭建环境</h2><p>项目地址<a href="https://github.com/abetlen/llama-cpp-python">GitHub</a>,有能力的话可以直接阅读原始文档。</p><p>首先按照文档，安装 llama-cpp-python</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install llama-cpp-python<br></code></pre></td></tr></table></figure><p>接下来，你可能缺一些依赖，这一点在文档中没有涉及但是我整理了我缺少的依赖，依次运行即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install uvicorn<br>pip install anyio<br>pip install starlette<br>pip install fastapi<br>pip install pydantic_settings<br>pip install sse_starlette<br></code></pre></td></tr></table></figure><h2 id="高级-api-和低级-api">高级 API 和低级 API</h2><h3 id="高级-api">高级 API</h3><p>高级 API 通过<code>Llama</code>类提供简单的托管接口。请将<code>./models/7B/ggml-model.bin</code> 换成你的模型的路径，下同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> llama_cpp <span class="hljs-keyword">import</span> Llama<br>llm = Llama(model_path=<span class="hljs-string">&quot;./models/7B/ggml-model.bin&quot;</span>)<br>output = llm(<span class="hljs-string">&quot;Q: Name the planets in the solar system? A: &quot;</span>, max_tokens=<span class="hljs-number">32</span>, stop=[<span class="hljs-string">&quot;Q:&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>], echo=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><p>返回值如下</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&#123;<br>  <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;cmpl-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;</span>,<br>  <span class="hljs-string">&quot;object&quot;</span>: <span class="hljs-string">&quot;text_completion&quot;</span>,<br>  <span class="hljs-string">&quot;created&quot;</span>: <span class="hljs-number">1679561337</span>,<br>  <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;./models/7B/ggml-model.bin&quot;</span>,<br>  <span class="hljs-string">&quot;choices&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Q: Name the planets in the solar system? A: Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune and Pluto.&quot;</span>,<br>      <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-string">&quot;logprobs&quot;</span>: <span class="hljs-built_in">None</span>,<br>      <span class="hljs-string">&quot;finish_reason&quot;</span>: <span class="hljs-string">&quot;stop&quot;</span><br>    &#125;<br>  ],<br>  <span class="hljs-string">&quot;usage&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;prompt_tokens&quot;</span>: <span class="hljs-number">14</span>,<br>    <span class="hljs-string">&quot;completion_tokens&quot;</span>: <span class="hljs-number">28</span>,<br>    <span class="hljs-string">&quot;total_tokens&quot;</span>: <span class="hljs-number">42</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="低级-api">低级 API</h3><p>低级 API 直接<a href="https://docs.python.org/3/library/ctypes.html"><code>ctypes</code></a>绑定到<code>llama.cpp</code>.  整个低级 API 可以在<a href="https://github.com/abetlen/llama-cpp-python/blob/master/llama_cpp/llama_cpp.py">llama_cpp/llama_cpp.py</a>中找到，并直接镜像<a href="https://github.com/ggerganov/llama.cpp/blob/master/llama.h">llama.h</a>中的 C API 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> llama_cpp<br><span class="hljs-keyword">import</span> ctypes<br>params = llama_cpp.llama_context_default_params()<br><span class="hljs-comment"># use bytes for char * params</span><br>ctx = llama_cpp.llama_init_from_file(<span class="hljs-string">b&quot;./models/7b/ggml-model.bin&quot;</span>, params)<br>max_tokens = params.n_ctx<br><span class="hljs-comment"># use ctypes arrays for array params</span><br>tokens = (llama_cpp.llama_token * <span class="hljs-built_in">int</span>(max_tokens))()<br>n_tokens = llama_cpp.llama_tokenize(ctx, <span class="hljs-string">b&quot;Q: Name the planets in the solar system? A: &quot;</span>, tokens, max_tokens, add_bos=llama_cpp.c_bool(<span class="hljs-literal">True</span>))<br>llama_cpp.llama_free(ctx)<br></code></pre></td></tr></table></figure><h2 id="搭建与-openai-接口兼容的服务器接口">搭建与 openai 接口兼容的服务器接口</h2><p><code>llama-cpp-python</code>提供一个 Web 服务器，旨在作为 OpenAI API 的直接替代品。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 -m llama_cpp.server --model models/7B/ggml-model.bin<br></code></pre></td></tr></table></figure><p>你可以在上面的命令运行成功后访问<a href="http://localhost:8000/docs">文档</a></p><p>文档是全英的，想要对话接口的话我用 python 写了个示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://localhost:8000/v1/chat/completions&#x27;</span><br>headers = &#123;<br><span class="hljs-string">&#x27;accept&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br><span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>&#125;<br>data = &#123;<br><span class="hljs-string">&#x27;messages&#x27;</span>: [<br>&#123;<br><span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&#x27;You are a helpful assistant.&#x27;</span>,<br><span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;system&#x27;</span><br>&#125;,<br>&#123;<br><span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&#x27;What is the capital of France?&#x27;</span>,<br><span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;user&#x27;</span><br>&#125;<br>]<br>&#125;<br><br>response = requests.post(url, headers=headers, json=data)<br><span class="hljs-built_in">print</span>(response.json())<br><span class="hljs-built_in">print</span>(response.json()[<span class="hljs-string">&#x27;choices&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;content&#x27;</span>])<br></code></pre></td></tr></table></figure><p>如果你想自建一个接口，请在遵守相关法律法规的情况下，在自己的服务器上启动相关服务，并反向代理<code>http://localhost:8000</code> 地址。例如你反向代理到了<code>https://example.com</code>,那你的对话地址就是<code>https://example.com/v1/chat/completions</code>。当你想用 gpt 的时候就不用看 openai 的脸色了，直接部署一个自己的接口自己请求，或者调用 openai 库的时候 apibase 写自己的接口。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>快速上手llama2.c(更新版)</title>
    <link href="/2023/07/28/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bllama2.c(%E6%9B%B4%E6%96%B0%E7%89%88)/"/>
    <url>/2023/07/28/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bllama2.c(%E6%9B%B4%E6%96%B0%E7%89%88)/</url>
    
    <content type="html"><![CDATA[<h1 id="快速上手llama2.c更新版">快速上手llama2.c(更新版)</h1><p>在上一次我同时在我的博客和知乎发布了<a href="https://studyinglover.com/2023/07/25/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bllama2.c/">快速上手llama2.c</a> 之后，我一个小透明也收获了不少收藏，并收到了人生中第一个这样的留言(其实我感觉是机器人)。 <img src="https://cdn.studyinglover.com/pic/2023/07/2eda3b2dcb8d68fc01169f5366c8157c.jpg" /></p><p>当然，之前的llama2.c也有一些不好的地方，例如不能添加自己的prompt,所以我提了这样的一个<a href="https://github.com/karpathy/llama2.c/issues/64">issue</a>,今天收到了贡献者的回复说是可以用了。那我们来看一下。</p><p>首先还是克隆整个仓库，编译并下载模型，这里以15m参数的模型作为示例 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/karpathy/llama2.c.git<br><span class="hljs-built_in">cd</span> llama2.c<br>make run<br>wget https://huggingface.co/karpathy/tinyllamas/resolve/main/stories15M.bin<br></code></pre></td></tr></table></figure></p><p>接下来我们就可以使用编译出来的<code>run</code> 运行了,要使用自己的prompt,需要指定温度和 步长，这里温度设置成1.0,步长设置256,prompt在双引号写，我这里写的是<code>One day morning , I don't want to go to school</code> . <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./run stories15M.bin 1.0 256 <span class="hljs-string">&quot;One day morning , I don&#x27;t want to go to school&quot;</span><br></code></pre></td></tr></table></figure></p><p>这里给出我的运行结果，也就3秒种不到 <figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tp">&lt;s&gt;<br>One day morning , I don<span class="hljs-string">&#x27;t want to go to school, so he packed his trunk lid to pack. memorized his chores, he thought about what his mom would like him to stay home and not do all day. She wanted him to in a very competitive way.</span><br><span class="hljs-string">&quot;Come and play in the puddle, it&#x27;</span>ll be more fun<span class="hljs-comment">!&quot;He begged.</span><br><span class="hljs-comment">Mom shook her head. &quot;No, we haven&#x27;t seen coming for sure,&quot; she said thought. </span><br><span class="hljs-comment">Thumper and Mom just shrugged.</span><br><span class="hljs-comment">&quot;See,&quot; she said. &quot;Come on now. Let&#x27;s go and find some fun ways to clean the world!&quot;</span><br><span class="hljs-comment">The little boy was relieved and ran out to the yard. He had found a great idea to share his day with his mom instead. They scattered around the yard and had fun playing until their tired eyes were aching.</span><br><span class="hljs-comment">&lt;s&gt;</span><br><span class="hljs-comment">Once upon a time, there was a little boy named Tim. Tim was very excited because he was going on a trip with his family. He saw a big bus that helped them get off at their destination.</span><br><span class="hljs-comment">As the bus drove along, Tim noticed an unusual looking man sitting next to it. Tim asked the</span><br><span class="hljs-comment">achieved tok/s: 175.378267</span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure></p><p>当然为了获得更好的效果，我们可以使用更大模型</p><p>下载42m参数模型 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://huggingface.co/karpathy/tinyllamas/resolve/main/stories42M.bin<br></code></pre></td></tr></table></figure></p><p>下载110m参数模型 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://huggingface.co/karpathy/tinyllamas/resolve/main/stories110M.bin<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
    <tags>
      
      <tag>踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Paper Gestalt笔记</title>
    <link href="/2023/07/27/Paper%20Gestalt%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/27/Paper%20Gestalt%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="paper-gestalt笔记">Paper Gestalt笔记</h1><p>最近读到了一篇CVPR2010非常优秀的论文，叫做<a href="https://bbabenko.github.io/assets/papers/paper_gestalt.pdf">Paper Gestalt</a> ,他考虑到近年来(2010年的近年来)CVPR的投稿两出现了大量增长，但是作者很可能接触到一个不优秀的审稿人，所以训练了一个视觉分类器来判断一篇CVPR的论文是否应该被接受来辅助审稿。当然模型效果非常优秀了，在误分类15%的goog paper (应该被接受)的情况下可以筛选掉50% bad paper。</p><p>在这项工作中，作者构建了一种简单的直觉，即一篇论文的质量可以通过浏览总体的视觉效果来估计，并使用这种直觉来构建一个系统，该系统使用基本的计算机视觉技术来预测论文是否应该被接受或拒绝。这个任务中具有判别能力的视觉特征集就被称为Paper Gestalt。</p><p>最有意思的一点是，作者训练出来的默认为认为他的论文有88.4%的可能被接受。</p><p>作者将这个任务认为是一个二分类任务<span class="math inline">\(\{(x_1,y_1),(x_2,y_2),...(x_n,y_n)\}\)</span> ,其中<span class="math inline">\(x_i\)</span> 是一个图片的视觉特征，<span class="math inline">\(y_i\)</span> 则是对论文的一个标签。</p><p>给定一篇论文的图像，需要计算可插入分类系统的视觉特征的数量。作者选择了一些标准的计算机视觉特征来捕捉渐变、纹理、颜色和纹理信息。特别是作者是基于LUV直方图、直方图的定向梯度和梯度幅度来计算特征。</p><p>作者选用了AdaBoost作为分类器，公式是<span class="math display">\[h(x)=\sum_{t=1}^T\alpha_th_t(x)\]</span> <span class="math inline">\(h_t\)</span>就是一个弱分类器，这里选用的是决策树<span class="math inline">\(h_t(x)=\mathbf{1}[f_t(x)&gt;\theta]\)</span> ,<span class="math inline">\(\theta\)</span> 是阈值，<span class="math inline">\(f_t\)</span> 是图像特征，整体的训练流程如图所示。(实话实话，对于我这种2020年才接触深度学习的人来说AdaBoost真的是老古董技术了(ง •̀_•́)ง，只在计算机视觉课上听过这种技术用于人脸检测) <img src="https://cdn.studyinglover.com/pic/2023/07/7230c1fa1d43d4fb676127135aef728f.png" alt="image.png" /></p><p>AdaBoost有许多吸引人的理论特性。例如，众所周知，经验误差是有界的<span class="math display">\[\epsilon(h)\leq\prod_{t=1}^T2\sqrt{\epsilon_t(1-\epsilon_t)}\]</span> 虽然这个公式摆在这没有任何用，但是作者发现数学公式多了有利于论文被接受，所以他又摆上了 Maxwell’s equations <span class="math display">\[\begin{array}{rcl}\oint\vec{E}\cdot d\vec{A}&amp;=&amp;\frac{Q_{enc}}{\epsilon_0}\\&amp;&amp;\\\oint\vec{B}\cdot d\vec{A}&amp;=&amp;0\\&amp;&amp;&amp;\\\oint\vec{E}\cdot d\vec{s}&amp;=&amp;-\frac{d\phi_B}{dt}\\\oint\vec{B}\cdot d\vec{s}&amp;=&amp;\mu_0\epsilon_0\frac{d\phi_E}{dt}+\mu_0i_{enc}\end{array}\]</span> 哦你问视觉分类器跟Maxwell’s equations 到底有啥关系？这就是这篇论文的结论部分了，作者使用了一些论文作为例子分析了效果。 <img src="https://cdn.studyinglover.com/pic/2023/07/c29f925390f8307701c7206b71e177bb.png" alt="image.png" /> <img src="https://cdn.studyinglover.com/pic/2023/07/698b7a4ae9b5fa5751a2b562f4bad18a.png" alt="image.png" /> 我们从作者给出的图可以发现，一篇被接受的论文有数学公式，有图表还有图像，而被拒的论文有令人困惑的大表格，缺少页数还有缺少五颜六色的图片。</p><p>说到令人困惑的大表格不知道你有没有想到一篇论文，对就是我们巨有钱的OPENAI做的CLIP。这表格属实看的人眼睛疼，被显卡的钱亮瞎了狗眼。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230420145907.png" alt="image.png" /></p><p> 作者还不忘了夸一下他的论文，说他的固然存在缺页/空白页的问题，但其色彩斑斓的图表和令人印象深刻的数学公式构成非常漂亮。问题是你这图也不对呀，有的图片位置都和最终论文不一样。  <img src="https://cdn.studyinglover.com/pic/2023/07/86016048d0e76fde6f121419d1a3f0a4.png" alt="image.png" /></p><p>还有一点需要指出的是，作者的模型分析一篇论文只需要0.5秒。</p><p>在我找原文的时候，我发现arXiv上挂了一篇18年的文章<a href="https://arxiv.org/abs/1812.08775">Deep Paper Gestalt</a> ,据说他训练的模型把自己拒掉了。按照这个趋势我是不是可以搞一篇论文叫做Paper Gestalt with Latent Space?</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DINO-v2笔记</title>
    <link href="/2023/07/27/DINO-v2%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/27/DINO-v2%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="dino-v2笔记">DINO-v2笔记</h1><p>DINO-v2一种无监督学习的预训练方法，可以生成具有强大泛化能力的视觉特征，适用于各种图像分布和任务，而无需进行微调。这篇论文重点介绍了数据和模型规模方面的技术贡献，包括自动构建一个多样化和精心筛选的图像数据集、在多个层级上进行训练、使用Sinkhorn-Knopp居中方法和KoLeo正则化等。实验结果表明，该方法在多个图像理解任务上的表现超过了目前公开的最佳无监督和半监督方法。</p><p>作者实际上花了大量的篇幅减少了数据如何创建，如何进行预训练和如何优化训练过程。</p><p><a href="https://dinov2.metademolab.com/">项目主页</a>,项目开源在<a href="https://github.com/facebookresearch/dinov2">GitHub</a></p><h2 id="数据集准备">数据集准备</h2><p>作者通过从一个大型未筛选数据池中检索与几个精选数据集中的图像接近的图像来组装他们的LVD-142M数据集。作者描述了数据处理流程的主要组成部分，包括精选/未筛选数据源，图像去重步骤和检索系统。整个流程不需要任何元数据或文本，直接使用图像。</p><p>整个处理分布在一个由20个节点组成的计算集群上，该集群配备了8个V100-32GB GPU，生成LVD-142M数据集不到两天。</p><h3 id="数据来源">数据来源</h3><p>作者在包含 ImageNet-22k，ImageNet-1k、Google Landmarks 和几个细粒度数据集的的数据集进行选择。对于不安全的数据源，爬取公开可用的网络数据存储库中收集了原始未过滤的图像数据集。从存储库中的每个网页中，作者从<img>标签中提取图像的 URL 链接。作者在构建数据集过程中丢弃了不受域限制或限制的 URL，并对下载的图像（PCA 哈希重复数据删除、NSFW 过滤和模糊可识别人脸）进行后处理。这导致 1.2B 个独特的图像。</p><h3 id="消除重复数据">消除重复数据</h3><p>作者将使用了A Self-Supervised Descriptor for Image Copy Detection 这篇论文中的方法来处理未经处理的数据，并去除接近重复的图像。这减少了冗余并增加了图像之间的多样性。此外还删除了这个工作中使用的任何基准测试或验证集中包含的几乎重复的图像。</p><h3 id="自监督的图像检索">自监督的图像检索</h3><p>首先使用在ImageNet-22k上预训练的自监督ViT-H/16网络来计算图像嵌入，并使用余弦相似性作为图像之间的距离度量。接下来对未分级的数据进行k-means聚类。给定要检索的查询数据集，如果它足够大，那么就为每个查询图像检索N个（通常是4个）最近的邻居。如果它很小，就从与每个查询图像相对应的聚类中采样M个图像。可以通过目视检查检索结果来调整N和M。</p><h2 id="判别式自监督的预培训">判别式自监督的预培训</h2><h3 id="图像级目标">图像级目标</h3><p>同一图像的不同裁剪中获得不同的部分，使用ViT进行编码，用过去迭代的指数移动平均值构建教师模型，从学生和教师网络中提取的特征之间的交叉熵损失学习学生模型的参数</p><h3 id="patch级目标">patch级目标</h3><p>随即屏蔽给学生的一些输入补丁，但不屏蔽给老师的。然后，我们在每个屏蔽补丁上的两个网络的补丁特征之间添加交叉熵损失。这种损失与图像级别的损失相结合。</p><h3 id="解绑两个目标的权重联系">解绑两个目标的权重联系</h3><p>将上面两个目标相关的权重捆绑在一起会使模型在patch上欠拟合，而在图像级别上过拟合。解开这些权重可以解决这个问题，并提高两个目标的性能。</p><h3 id="sinkhorn-knopp-centering">Sinkhorn-Knopp centering</h3><p>这是一种替代DINO和iBot模型中的teacher softmax-centering步骤的方法，即使用SwAV模型的Sinkhorn-Knopp（SK）批量归一化。作者在这个方法中运行了3次Sinkhorn-Knopp算法步骤，并对学生应用softmax归一化。这个方法的目的是提高自监督学习模型的性能。</p><h3 id="koleo-regularizer">KoLeo regularizer</h3><p>KoLeo正则化器源自Kozachenko-Leonenko差分熵估计器，它鼓励批处理中特征的均匀跨度。给定一组n个向量(x1, . . . , xn)，它被定义为<span class="math inline">\(\mathcal{L}_\text{koleo}=-\frac1n\sum_{i=1}^n\log(d_{n,i})\)</span> ，其中<span class="math inline">\(d_{n,i}=\min_{j\neq i}\left\|x_i-x_j\right\|\)</span>是<span class="math inline">\(x_i\)</span>和批处理中任何其他点之间的最小距离。在计算这个正则化器之前，我们还要对特征进行L2-归一化。</p><h3 id="adapting-the-resolution">Adapting the resolution</h3><p>在像素级别的下游任务中，如分割或检测，提高图像分辨率是非常重要的，因为低分辨率下小物体容易消失。但是高分辨率的训练需要更多的时间和内存，所以作者提出了一种方法，在预训练的最后一段时间内将图像的分辨率提高到518×518。</p><h2 id="有效的实施">有效的实施</h2><p>作者对于训练大规模模型的几个改进措施，包括使用A100 GPU和PyTorch 2.0进行训练，提供代码和预训练模型，并在附录的Table 17中详细描述了模型的细节。</p><p>另外，与iBOT实现相比，DINOv2的代码在相同硬件条件下，运行速度提高了2倍，内存使用量减少了三分之一。</p><h3 id="快速高效的注意力">快速高效的注意力</h3><p>作者自己实现了一个fastattention,需要注意的是<strong>作者的ViT-g架构略有不同，采用1536的嵌入维度和24个头（每个头64维），而不是1408的嵌入维度和16个头（每个头88维），以最大化计算效率</strong>。</p><h3 id="自注意中的嵌套张量">自注意中的嵌套张量</h3><p>作者使用了一种新的技术，可以在同一个正向传递中运行全局裁剪和局部裁剪（具有不同数量的补丁标记），与之前的实现相比，可以获得显着的计算效率提升。此外，作者提到他们使用的基础组件已经在xFormers库中提供。</p><h3 id="有效的随机深度">有效的随机深度</h3><p>作者使用了一种改进的随机深度（stochastic depth）方法，相比于传统的掩码方法，该方法跳过了被丢弃的残差计算，从而在一定程度上节省了内存和计算资源。在本次实验中，使用高丢弃率（d=40%）时，这种方法使计算效率和内存使用效率得到了显著提高。具体实现方法是通过在批处理维度上随机重新排列B个样本，并在块计算中仅对前<span class="math inline">\((1-d)×B\)</span>个样本进行计算。</p><h3 id="完全共享数据并行fsdp">完全共享数据并行（FSDP）</h3><p>通过将模型副本分配到多个GPU中，可以将模型大小限制在GPU节点总内存的范围内。此外，FSDP的实现方式可以将权重片段存储为float32，但在传播权重和梯度时使用float16，从而降低跨GPU通信成本。相较于DistributedDataParallel（DDP）中使用的float32梯度all-reduce操作，使用Pytorch-FSDP混合精度训练的通信成本减少了约50％，在扩展GPU节点数量时训练过程更加高效。总的来说，Pytorch-FSDP混合精度训练在几乎所有情况下都优于使用autocast的DDP。</p><h3 id="模型蒸馏">模型蒸馏</h3><p>作者发现即使对于一个规模较大的ViT-L模型，他们的预训练方法也能够取得比从头开始训练更好的性能。此外，他们还提出了一种知识蒸馏方法，与A simple recipe for competitive low-compute self supervised vision models. arXiv preprint arXiv:2301.09451 所描述的方法相似，但没有修改蒸馏的损失项，并评估了学生模型的指数移动平均值。</p>]]></content>
    
    
    <categories>
      
      <category>文字生成图片</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>快速上手llama2.c</title>
    <link href="/2023/07/25/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bllama2.c/"/>
    <url>/2023/07/25/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bllama2.c/</url>
    
    <content type="html"><![CDATA[<h1 id="快速上手llama2.c">快速上手llama2.c</h1><p><a href="https://github.com/karpathy/llama2.c.git">llama2.c</a>一个完整的解决方案，可以使用PyTorch从头开始训练的Llama 2 LLM（Lightweight Language Model）模型，并将权重导出为二进制文件，然后加载到一个简单的500行C文件（run.c）中进行推理。另外，你也可以加载、微调和推理Meta的Llama 2模型（但这部分仍在积极开发中）。因此，这个仓库提供了一个"全栈"的训练和推理方案，专注于极简和简洁性。你可能会认为只有拥有数十亿参数的LLM才能实现有用的功能，但事实上，如果领域足够狭窄，非常小的LLM也可以表现出惊人的性能。建议参考TinyStories论文以获得灵感。</p><p>需要注意的是，这个项目最初只是一个有趣的周末项目：作者在之前的nanoGPT基础上进行了调整，实现了Llama-2架构而不是GPT-2，并且主要的工作是编写了C推理引擎（run.c）。因此，这个项目还比较年轻，并且在快速发展中。特别感谢llama.cpp项目为此项目提供了灵感。作者希望保持超级简洁，所以选择了硬编码Llama 2架构，采用fp32精度，并仅使用纯C编写一个没有依赖项的推理文件。</p><p>首先clone整个仓库并编译 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/karpathy/llama2.c.git<br><span class="hljs-built_in">cd</span> llama.c<br>gcc -O3 -o run run.c -lm<br></code></pre></td></tr></table></figure></p><p>接下来下载模型 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://karpathy.ai/llama2c/model.bin -P out<br></code></pre></td></tr></table></figure></p><p>或者下载更大的一个模型 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://karpathy.ai/llama2c/model44m.bin -P out44m<br></code></pre></td></tr></table></figure></p><p>接下来进行推理 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./run out/model.bin<br></code></pre></td></tr></table></figure></p><p>我们将会看到这样一段输出就代表运行成功 <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">&lt;s&gt;<br> One day, <span class="hljs-keyword">a</span> little otter named Ollie went <span class="hljs-built_in">to</span> play <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> river. Ollie was very compassionate. He loved <span class="hljs-built_in">to</span> help his friends <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> town.<br>While playing, Ollie saw <span class="hljs-keyword">a</span> big fish. The fish was stuck <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> mud. <span class="hljs-string">&quot;Help me, please!&quot;</span> said <span class="hljs-keyword">the</span> fish. Ollie wanted <span class="hljs-built_in">to</span> help <span class="hljs-keyword">the</span> fish. He swam away, looking <span class="hljs-keyword">for</span> something <span class="hljs-built_in">to</span> break <span class="hljs-keyword">the</span> mud.<br>Ollie found <span class="hljs-keyword">a</span> small stick. He used <span class="hljs-keyword">the</span> stick <span class="hljs-built_in">to</span> break <span class="hljs-keyword">the</span> mud. The fish was free! <span class="hljs-string">&quot;Thank you, Ollie!&quot;</span> <span class="hljs-keyword">the</span> fish said. The fish was happy <span class="hljs-keyword">and</span> swam away.<br>Ollie felt good <span class="hljs-keyword">for</span> helping <span class="hljs-keyword">the</span> fish. He went back <span class="hljs-built_in">to</span> play <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> river. Ollie knew that helping others made him feel good. And <span class="hljs-built_in">from</span> that day, Ollie was always compassionate <span class="hljs-built_in">to</span> everyone.<br>&lt;s&gt;<br> Tom was <span class="hljs-keyword">a</span> big boy who liked <span class="hljs-built_in">to</span> help his mom. He saw his mom doing laundry <span class="hljs-keyword">and</span> asked <span class="hljs-keyword">if</span> he could join. His mom said yes, but he had <span class="hljs-built_in">to</span> be careful <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> iron. The iron was hot <span class="hljs-keyword">and</span> had <span class="hljs-keyword">a</span> button <span class="hljs-keyword">on</span> <span class="hljs-title">it</span>.<br>Tom took <span class="hljs-keyword">the</span> iron <span class="hljs-keyword">and</span> ran <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> house. He wanted <span class="hljs-built_in">to</span> iron his shirt<br>achieved tok/s: <span class="hljs-number">178.148921</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
    <tags>
      
      <tag>踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AnyDoor笔记</title>
    <link href="/2023/07/24/AnyDoor%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/24/AnyDoor%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="anydoor笔记">AnyDoor笔记</h1><p>在这项工作中，香港大学，阿里联合提出了提出了 AnyDoor，这是一种基于扩散的生成器，可以进行对象隐形传态。这项研究的核心贡献是使用判别 ID 提取器和频率感知细节提取器来表征目标对象。在视频和图像数据的不同组合上进行训练，我们在场景图像的特定位置合成对象。AnyDoor 为一般区域到区域的映射任务提供了通用解决方案，并且可以为各种应用有利可图。</p><p><a href="https://damo-vilab.github.io/AnyDoor-Page/">项目地址</a></p><p>AnyDoor的模型架构图如下图所示，看起来还是比较清晰的，我们一部分一部分来看 <img src="https://cdn.studyinglover.com/pic/2023/07/84e8fadaba321d5eb9be47f710d22997.png" alt="image.png" /></p><h2 id="id特征提取器">ID特征提取器</h2><p>一般都选择CLIP的图像编码器编码一个图像对象。但是CLIP 是由粗略描述的文本对训练而来的，所以CLIP 只能给出一些语义上的描述，但是很难对每个物体的特征做出分辨。所以作者做出了两点更新，背景移除和自监督的表示。</p><p>对应到整个pipeline就是这部分 <img src="https://cdn.studyinglover.com/pic/2023/07/e22b104405f6f2e4ace7a680c6d44e23.png" alt="image.png" /></p><h3 id="背景移除">背景移除</h3><p>背景移除就是使用一个分割模型将背景删除，然后将目标物体和背景中心对齐。可以使用一些自动的模型(例如Segment Anything),和可交互式的模型</p><h3 id="自监督的表示">自监督的表示</h3><p>作者说在这个工作中他们发现自监督的模型可以很好的保留物体的判别特征。在大规模数据集上进行预训练，自监督模型自然配备了实例检索能力，可以将对象投影到增强不变的特征空间(augmentation-invariant feature space，经过抱大佬大腿，这个特征空间是说经过图像增强语义不变)中。作者采用了DINO2作为编码器，得到了一个全局的特征<span class="math inline">\(\mathbf{T}_{\mathrm{g}}^{1 \times 1536}\)</span> 和一个局部的特征<span class="math inline">\(\mathbf{T}_{\mathrm{p}}^{256 \times 1536}\)</span> ,使用一个线性层将这两个向量投影到UNet需要的维度，然后合并俩个向量使用，最后的向量是<span class="math inline">\(\mathbf{T}_{\text {ID }}^{257 \times 1024}\)</span></p><h2 id="细节特征提取">细节特征提取</h2><p>作者认为，由于 ID 令牌会丢失空间分辨率，因此它们很难充分保持目标对象的精细细节。所以使用互补的细节作为生成过程中额外的指导。</p><p>使用拼贴作为控件可以提供强大的先验，作者尝试将“背景移除的对象”缝合到场景图像的给定位置。通过这个拼贴，可以观察到生成保真度的显着改进，但生成的结果与缺乏多样性的给定目标过于相似。面对这个问题，作者探索设置信息瓶颈以防止拼贴给出太多外观约束。实际上就是设计了一个高频映射来表示对象，它可以保持精细细节，但允许通用的局部变体，如手势、照明、方向等。</p><p>对应pipeline的这部分， <img src="https://cdn.studyinglover.com/pic/2023/07/02e880c65b826610ff0afc47e939fc40.png" alt="image.png" /></p><p>作者使用了这样一个公式来提取高频图<span class="math display">\[\mathbf{I}_h=\left(\mathbf{I} \otimes \mathbf{K}_h+\mathbf{I} \otimes \mathbf{K}_v\right) \odot \mathbf{I} \odot \mathbf{M}_{\text {erode }}\]</span> <span class="math inline">\(\mathbf{I}\)</span> 是一张RGB的图像(上一步背景移除得到的图片),<span class="math inline">\(\mathbf{K}_h\)</span> 和<span class="math inline">\(\mathbf{K}_v\)</span> 是水平和垂直Sobel kernel，这里被用作高频滤波器，<span class="math inline">\(\otimes\)</span>代表卷积,<span class="math inline">\(\odot\)</span>代表逐元素乘法。侵蚀掩码 <span class="math inline">\(\mathbf{M}_{\text {erode }}\)</span> 来过滤目标对象外部轮廓附近的信息。</p><p>在得到高频图后，根据给定的位置将其拼接到场景图像上，然后将拼贴传递给细节提取器。细节提取器是一个 ControlNet 中的UNet 编码器，它生成一系列具有分层分辨率的细节图。</p><h2 id="特征注入">特征注入</h2><p>在获得 ID 标记和细节图后，将它们注入到预训练的文本到图像扩散模型中以指导生成。作者选择了stable diffusion，它将图像投影到潜在空间中，并使用UNet进行概率采样。我们注意到预训练的 UNet 为 <span class="math inline">\(\hat{\mathbf{x}}_\theta\)</span> ，它从初始潜在噪声 <span class="math inline">\(\epsilon \sim \mathcal{U}([0,1])\)</span>开始去噪，并将文本嵌入 c 作为生成新图像潜在 的条件。训练监督是均方误差损失为<span class="math display">\[\mathbb{E}_{\mathbf{x},\mathbf{c},\epsilon,t}(\|\hat{\mathbf{x}}_\theta(\alpha_t\mathbf{x}+\sigma_t\epsilon,\mathbf{c})-\mathbf{x}\|_2^2)\]</span> <span class="math inline">\(\mathbf{x}\)</span> 是ground-truth,t是反向过程的步数,<span class="math inline">\(\alpha_t\)</span> <span class="math inline">\(\sigma_t\)</span> 是去噪的超参数。</p><p>在这项工作中，文本嵌入 c 被替换为前面的 ID 标记，这些标记通过交叉注意注入到每个 UNet 层。对于细节图，将它们与每个分辨率的 UNet 解码器特征连接起来。在训练期间，模型冻结 UNet 编码器的预训练参数以保留先验并调整 UNet 解码器以适应我们的新任务。</p><h2 id="训练策略">训练策略</h2><h3 id="图像文本对">图像文本对</h3><p>理想的训练样本是“不同场景中同一对象”的图像对，但是这些数据集不能直接由现有数据集提供。作为替代方案，以前的工作利用单个图像并应用旋转、翻转和弹性变换等增强。然而，这些幼稚的增强不能很好地代表姿势和视图的真实变体。</p><p>为了解决这个问题，在这项工作中，作者使用视频数据集来捕获包含相同对象的不同帧。</p><h3 id="自适应的训练步长">自适应的训练步长</h3><p>虽然视频数据有利于学习外观变化，但由于分辨率低或运动模糊，帧质量通常不能令人满意。相比之下，图像可以提供高质量的细节和通用的场景，但缺乏外观变化。</p><p>为了利用视频数据和图像数据，作者开发了自适应时间步采样，使不同模态的数据有利于去噪训练的不同阶段。stable dissusion为每个训练数据均匀地采样时间步长 (T)。然而，观察到初始去噪步骤主要集中在生成整体结构、姿势和视图；后面的步骤涵盖了纹理和颜色等精细细节 。因此，对于视频数据，可以增加了在训练期间采样早期去噪步骤（大 T）以更好地学习外观变化的可能性。对于图像，增加了后期步骤（小 T）的概率来学习如何覆盖精细细节。</p>]]></content>
    
    
    <categories>
      
      <category>文字生成图片</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Archlinux安装scrcpy加载共享库出错 error while loading shared libraries:libusb-1.0.so.0:wrong ELF class:ELFCLASS32</title>
    <link href="/2023/07/21/Archlinux%E5%AE%89%E8%A3%85scrcpy%E5%8A%A0%E8%BD%BD%E5%85%B1%E4%BA%AB%E5%BA%93%E5%87%BA%E9%94%99/"/>
    <url>/2023/07/21/Archlinux%E5%AE%89%E8%A3%85scrcpy%E5%8A%A0%E8%BD%BD%E5%85%B1%E4%BA%AB%E5%BA%93%E5%87%BA%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="archlinux安装scrcpy加载共享库出错">Archlinux安装scrcpy加载共享库出错</h1><p>在安装scrcpy时通过<code>sudo pacman -S scrcpy</code>顺利安装,但是运行报错 <figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">scrcpy:</span> <span class="hljs-keyword">error</span> <span class="hljs-keyword">while</span> loading <span class="hljs-keyword">shared</span> libraries: libusb-<span class="hljs-number">1.0</span>.so.<span class="hljs-number">0</span>: wrong ELF <span class="hljs-keyword">class</span>: ELFCLASS32<br></code></pre></td></tr></table></figure></p><p>这是在64位系统上运行32位库出错，我发现了这个10年的issue https://github.com/Rouji/Ergodone-Setup/issues/1 也就是说我们只需要运行<code>sudo pacman -S libusb-compat</code></p><p>但是运行之后出现了新的问题 <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">libusb</span>-compat: 文件系统中已存在 /usr/lib/libusb-<span class="hljs-number">0</span>.<span class="hljs-number">1</span>.so.<span class="hljs-number">4</span> <br><span class="hljs-attribute">libusb</span>-compat: 文件系统中已存在 /usr/lib/libusb-<span class="hljs-number">0</span>.<span class="hljs-number">1</span>.so.<span class="hljs-number">4</span>.<span class="hljs-number">4</span>.<span class="hljs-number">4</span> <br><span class="hljs-attribute">libusb</span>-compat: 文件系统中已存在 /usr/lib/libusb-<span class="hljs-number">0</span>.<span class="hljs-number">1</span>.so.<span class="hljs-number">4</span>.<span class="hljs-number">4</span>.<span class="hljs-number">4</span> <br></code></pre></td></tr></table></figure></p><p>一般来说已经有的库就不要动它了，运行<code>sudo pacman -Syu</code> 没有解决，会报同样的错误，说明libusb这个文件不是包管理器提供的，那就删掉现有的库然后让pacman帮我们安装</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> rm -f /usr/lib/libusb-<span class="hljs-number">0</span>.<span class="hljs-number">1</span>.so.<span class="hljs-number">4</span> <br><span class="hljs-attribute">sudo</span> rm -f /usr/lib/libusb-<span class="hljs-number">0</span>.<span class="hljs-number">1</span>.so.<span class="hljs-number">4</span>.<span class="hljs-number">4</span>.<span class="hljs-number">4</span> <br><span class="hljs-attribute">sudo</span> rm -f /usr/lib/libusb-<span class="hljs-number">0</span>.<span class="hljs-number">1</span>.so.<span class="hljs-number">4</span>.<span class="hljs-number">4</span>.<span class="hljs-number">4</span> <br><span class="hljs-attribute">sudo</span> pacman -S libusb-compat<br></code></pre></td></tr></table></figure><p>插上手机，运行<code>scrcpy</code>,成功运行</p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArchLinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npc_gzip笔记</title>
    <link href="/2023/07/18/npc_gzip%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/18/npc_gzip%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="npc_gzip笔记">npc_gzip笔记</h1><h2 id="论文笔记">论文笔记</h2><p>npc_gzip 的论文名叫做 "Low-Resource" Text Classification: A Parameter-Free Classification Method with Compressors ,意为不需要参数，使用压缩器的文本分类方法。论文的代码也只有仅仅的十四行，就在部分数据集上取得了超越 <strong>bert</strong> 的效果。</p><p>npc_gzip由一个无损压缩器，一个基于距离的度量函数和K近邻算法组成。</p><p>使用压缩器进行分类的直觉是有两方面 1. 压缩器擅长捕捉规律性；<br />2. 来自同一类别的对象比不同类别的对象具有更多的规律性。</p><p>假设<span class="math inline">\(x_1\)</span>, <span class="math inline">\(x_2\)</span> 属于相同的类别，<span class="math inline">\(x_3\)</span> 属于不同的类别，用<span class="math inline">\(C(\cdot)\)</span> 代表压缩器， 我们会发现<span class="math inline">\(C\left(x_1 x_2\right)-C\left(x_1\right)&lt;C\left(x_1 x_3\right)-C\left(x_1\right)\)</span> , <span class="math inline">\(C\left(x_1 x_2\right)\)</span> 代表 x1 和 x2 的串联的压缩长度。换句话说<span class="math inline">\(C\left(x_1 x_2\right)\)</span> 可以解释为我们仍然需要根据 x1 的信息对 x2 进行编码多少字节： <figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang">x1 = Japan&#x27;s Seiko Epson Corp. has developed a <span class="hljs-number">12</span>-gram flying microrobot.<br><br>x2 = The latest tiny flying robot has been unveiled in Japan.<br><br>x3 = Michael Phelps won the gold medal in the <span class="hljs-number">400</span> individual medley.<br></code></pre></td></tr></table></figure></p><p>这种直觉可以形式化为源自 Kolmogorov 复杂度的距离度量。Kolmogorov 复杂度 K(x) 表征了可以生成 x 的最短二进制程序的长度。K(x) 理论上是信息测量的最终下限。</p><p><span class="math display">\[\begin{aligned} E(x, y) &amp; =\max \{K(x \mid y), K(y \mid x)\} \\ &amp; =K(x y)-\min \{K(x), K(y)\}\end{aligned}\]</span></p><p>由于 Kolmogorov 复杂度的可计算性质使得 E(x,y) 不可计算，所以可以使用归一化压缩距离 (NCD)，利用压缩长度 C(x) 来近似 Kolmogorov 复杂度 K(x)。形式上是<span class="math display">\[N C D(x, y)=\frac{C(x y)-\min \{C(x), C(y)\}}{\max \{C(x), C(y)\}}\]</span> 使用压缩长度背后的直觉是压缩器最大压缩的 x 的长度接近 K(x)。一般来说，压缩比越高，C(x)越接近K(x)。</p><p>实验的结果使用 gzip 作为压缩器，这里的<span class="math inline">\(C(x)\)</span> 表示 gzip 压缩后 x 的长度。<span class="math inline">\(C(xy)\)</span> 是 x 和 y 的串联的压缩长度。NCD 提供距离矩阵使用 k-最近邻来执行分类。</p><p>核心代码真的真的就非常简单了 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gzip2 <br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">for</span> ( x1 , _ ) <span class="hljs-keyword">in</span> test_set :<br>Cx1 = <span class="hljs-built_in">len</span> ( gzip . compress ( x1 . encode () ) )<br>distance_from_x1 = []<br><span class="hljs-keyword">for</span> ( x2 , _ ) <span class="hljs-keyword">in</span> training_set :<br>Cx2 = <span class="hljs-built_in">len</span> ( gzip . compress ( x2 . encode () )<br>x1x2 = <span class="hljs-string">&quot; &quot;</span> . join ([ x1 , x2 ])<br>Cx1x2 = <span class="hljs-built_in">len</span> ( gzip . compress ( x1x2 . encode () )<br>ncd = ( Cx1x2 - <span class="hljs-built_in">min</span> ( Cx1 , Cx2 )) / <span class="hljs-built_in">max</span> ( Cx1 , Cx2 )<br>distance_from_x1 . append ( ncd )<br>sorted_idx = np . argsort ( np . array ( distance_from_x1 ) )<br>top_k_class = training_set [ sorted_idx [: k ] , <span class="hljs-number">1</span>]<br>predict_class = <span class="hljs-built_in">max</span> ( <span class="hljs-built_in">set</span> ( top_k_class ) , key = top_k_class . count )<br></code></pre></td></tr></table></figure></p><p>这种方法是 DNN 的简单、轻量级和通用的替代方案。很简单，因为它不需要任何预处理或训练。它的轻量级在于它不需要参数或 GPU 资源进行分类。由于压缩器是数据类型不可知的，非参数方法不会带来潜在的假设。</p><h2 id="代码实践">代码实践</h2><p>作者在GitHub上开源了他的代码 <a href="https://github.com/bazingagin/npc_gzip">npc_gzip</a> .我们先把代码拉到本地 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/bazingagin/npc_gzip<br></code></pre></td></tr></table></figure> 接下来安装依赖项，有条件的话创建一个虚拟环境 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ./npc_gzip<br>pip install -r requirements.txt<br></code></pre></td></tr></table></figure></p><p>安装完了之后运行<code>main_text.py</code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python main_text.py<br></code></pre></td></tr></table></figure></p><p>注意，如果你遇到了这个问题 <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Traceback (most recent <span class="hljs-keyword">call</span> last):<br>  File &quot;main_text.py&quot;, <span class="hljs-type">line</span> <span class="hljs-number">2</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">from</span> data <span class="hljs-keyword">import</span> *<br>  File &quot;/home/npc_gzip/data.py&quot;, <span class="hljs-type">line</span> <span class="hljs-number">12</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset<br>  File &quot;/home/.conda/envs/npc_gzip/lib/python3.7/site-packages/datasets/__init__.py&quot;, <span class="hljs-type">line</span> <span class="hljs-number">43</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">from</span> .arrow_dataset <span class="hljs-keyword">import</span> Dataset<br>  File &quot;/home/.conda/envs/npc_gzip/lib/python3.7/site-packages/datasets/arrow_dataset.py&quot;, <span class="hljs-type">line</span> <span class="hljs-number">59</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi, HfFolder<br>  File &quot;/home/.conda/envs/npc_gzip/lib/python3.7/site-packages/huggingface_hub/__init__.py&quot;, <span class="hljs-type">line</span> <span class="hljs-number">322</span>, <span class="hljs-keyword">in</span> __getattr__<br>    submod = importlib.import_module(submod_path)<br>  File &quot;/home/.conda/envs/npc_gzip/lib/python3.7/importlib/__init__.py&quot;, <span class="hljs-type">line</span> <span class="hljs-number">127</span>, <span class="hljs-keyword">in</span> import_module<br>    <span class="hljs-keyword">return</span> _bootstrap._gcd_import(<span class="hljs-type">name</span>[<span class="hljs-keyword">level</span>:], package, <span class="hljs-keyword">level</span>)<br>  File &quot;/home/.conda/envs/npc_gzip/lib/python3.7/site-packages/huggingface_hub/hf_api.py&quot;, <span class="hljs-type">line</span> <span class="hljs-number">32</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">import</span> requests<br>  File &quot;/home/.conda/envs/npc_gzip/lib/python3.7/site-packages/requests/__init__.py&quot;, <span class="hljs-type">line</span> <span class="hljs-number">43</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">import</span> urllib3<br>  File &quot;/home/.conda/envs/npc_gzip/lib/python3.7/site-packages/urllib3/__init__.py&quot;, <span class="hljs-type">line</span> <span class="hljs-number">42</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    &quot;urllib3 v2.0 only supports OpenSSL 1.1.1+, currently &quot;<br>ImportError: urllib3 v2<span class="hljs-number">.0</span> <span class="hljs-keyword">only</span> supports OpenSSL <span class="hljs-number">1.1</span><span class="hljs-number">.1</span>+, currently the <span class="hljs-string">&#x27;ssl&#x27;</span> module <span class="hljs-keyword">is</span> compiled <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;OpenSSL 1.0.2u  20 Dec 2019&#x27;</span>. See: https://github.com/urllib3/urllib3/issues/<span class="hljs-number">2168</span><br></code></pre></td></tr></table></figure></p><p>urllib3 v2.0（您安装的版本）需要 OpenSSL 1.1.1+ 才能正常工作，因为它依赖于 OpenSSL 1.1 的一些新功能.</p><p>安装旧版本即可解决 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install urllib3==1.26.6 <br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>自然语言处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>python调用c++函数</title>
    <link href="/2023/07/15/python%E8%B0%83%E7%94%A8c++%E5%87%BD%E6%95%B0/"/>
    <url>/2023/07/15/python%E8%B0%83%E7%94%A8c++%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="python调用c函数">python调用c++函数</h1><p>当我们需要在Python中使用C++编写的函数时，可以将C++代码编译成共享库文件（.so文件），然后来调用这些函数。这里介绍两种方法。</p><h2 id="使用python的api">使用python的api</h2><p>首先要安装安装<code>python-dev</code> 和<code>cmake</code></p><p>在Archlinux下<code>yay python-dev</code> ，<code>yay cmake</code>即可。其他平台需要自行搜索</p><p>首先创建一个C++文件 <code>main.cpp</code> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Python.h&gt;</span></span><br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br>  <br><span class="hljs-function"><span class="hljs-type">static</span> PyObject* <span class="hljs-title">py_add</span><span class="hljs-params">(PyObject* self, PyObject* args)</span> </span>&#123;<br><span class="hljs-type">int</span> a, b;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">PyArg_ParseTuple</span>(args, <span class="hljs-string">&quot;ii&quot;</span>, &amp;a, &amp;b)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-type">int</span> result = <span class="hljs-built_in">add</span>(a, b);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">PyLong_FromLong</span>(result);<br>&#125;<br>  <br><span class="hljs-type">static</span> PyMethodDef module_methods[] = &#123;<br>&#123;<span class="hljs-string">&quot;add&quot;</span>, py_add, METH_VARARGS, <span class="hljs-string">&quot;Add two integers.&quot;</span>&#125;,<br>&#123;<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>&#125;<br>&#125;;<br>  <br><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">PyModuleDef</span> module_def = &#123;<br>PyModuleDef_HEAD_INIT,<br><span class="hljs-string">&quot;my_module&quot;</span>,<br><span class="hljs-string">&quot;My custom module.&quot;</span>,<br><span class="hljs-number">-1</span>,<br>module_methods<br>&#125;;<br>  <br><span class="hljs-function">PyMODINIT_FUNC <span class="hljs-title">PyInit_my_module</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">PyModule_Create</span>(&amp;module_def);<br>&#125;<br></code></pre></td></tr></table></figure></p><p>接着用cmake构建<code>.so</code>文件，<code>CMakeLists.txt</code> 内容如下 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CMakeLists">cmake_minimum_required(VERSION 3.0)<br>  <br>project(my_module)<br>  <br>find_package(Python REQUIRED COMPONENTS Interpreter Development)<br>  <br>add_library(my_module SHARED main.cpp)<br>  <br>target_include_directories(my_module PRIVATE $&#123;Python_INCLUDE_DIRS&#125;)<br>target_link_libraries(my_module PRIVATE $&#123;Python_LIBRARIES&#125;)<br>  <br>set_target_properties(my_module PROPERTIES PREFIX &quot;&quot;)<br>set_target_properties(my_module PROPERTIES SUFFIX &quot;.so&quot;)<br></code></pre></td></tr></table></figure></p><p>构建完成后会有一个名为<code>my_module.so</code> 的文件</p><p>接下来使用python调用,注意将python文件和<code>my_module.so</code> 放到同一个目录下 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> my_module<br>  <br>result = my_module.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure></p><h2 id="按照-c-语言的规则来编译和链接">按照 C 语言的规则来编译和链接</h2><p>首先，我们需要编写一个C++文件<code>mylib.cpp</code> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>接下来，编译<code>mylib.cpp</code> 为一个<code>.so</code>文件 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -shared -o mylib.so -fPIC mylib.cpp<br></code></pre></td></tr></table></figure></p><p>最后使用python加载<code>mylib.so</code> 文件并调用 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ctypes<br><br><span class="hljs-comment"># 加载共享库文件</span><br>mylib = ctypes.cdll.LoadLibrary(<span class="hljs-string">&#x27;./mylib.so&#x27;</span>)<br><br>result = mylib.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Filesystem type ntfs3,ntfs not configured in kernel</title>
    <link href="/2023/07/14/Filesystem%20type%20ntfs3,ntfs%20not%20configured%20in%20kernel/"/>
    <url>/2023/07/14/Filesystem%20type%20ntfs3,ntfs%20not%20configured%20in%20kernel/</url>
    
    <content type="html"><![CDATA[<h1 id="filesystem-type-ntfs3ntfs-not-configured-in-kernel">Filesystem type ntfs3,ntfs not configured in kernel</h1><p>昨天卸载硬盘的时候卡住了，然后我就直接拔下了硬盘，再插上就出现了这个问题 <img src="https://cdn.studyinglover.com/pic/2023/07/7da166adca81943084fbc25dae0a3e16.png" alt="image.png" /></p><p>我先用备份恢复了一下，但是重新插上硬盘问题依然存在。接下来google了一下，Archwiki中有提到<a href="https://wiki.archlinux.org/title/NTFS">这个问题</a>，但是标记这个问题是已经过时的，所描述的问题已得到解决。从内核版本6.2开始，ntfs3支持<code>windows_names</code>选项。我就先按照文档说的做了，但是问题依然没有解决。 <img src="https://cdn.studyinglover.com/pic/2023/07/92f0be4c455602d2eda6b9ecd6229969.png" alt="image.png" /></p><p>接下来翻了下reddit，发现有人存在类似的问题 https://www.reddit.com/r/archlinux/comments/s3w6uu/cannot_mount_ntfs_drives_on_516/ ， 有人提到需要安装<code>ntfs-3g</code> ,那么就是 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay ntfs-3g<br></code></pre></td></tr></table></figure></p><p>问题解决</p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>open_clip编码图像和文本</title>
    <link href="/2023/07/13/open_clip%E7%BC%96%E7%A0%81%E5%9B%BE%E5%83%8F%E5%92%8C%E6%96%87%E6%9C%AC/"/>
    <url>/2023/07/13/open_clip%E7%BC%96%E7%A0%81%E5%9B%BE%E5%83%8F%E5%92%8C%E6%96%87%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>open_clip是CLIP的开源实现版本，只训练了CLIP效果最好的几个模型。</p><p>安装是 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install open_clip_torch<br></code></pre></td></tr></table></figure></p><p>首先导入 open_clip，并创建相关模型 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> open_clip<br><span class="hljs-keyword">import</span> torch<br><br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br>clip_model_name = <span class="hljs-string">&quot;ViT-L-14&quot;</span><br>clip_model,_,clip_preprocess = open_clip.create_model_and_transforms(clip_model_name<br>clip_model_name,pretrained = <span class="hljs-string">&quot;openai&quot;</span>,precision=<span class="hljs-string">&#x27;fp16&#x27;</span> <span class="hljs-keyword">if</span> device == <span class="hljs-string">&#x27;cuda&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;fp32&#x27;</span>,device=device,<br>)<br><br>tokenize = open_clip.get_tokenizer(clip_model_name)<br></code></pre></td></tr></table></figure></p><p><code>tokenize</code> 是分词器，所有的文本都要先经过分析器才能放入模型进行推理。</p><h4 id="编码图像">编码图像</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">image_to_features</span>(<span class="hljs-params">image: Image.Image</span>) -&gt; torch.Tensor:<br>images = clip_preprocess(image).unsqueeze(<span class="hljs-number">0</span>).to(device)<br><span class="hljs-keyword">with</span> torch.no_grad(), torch.cuda.amp.autocast():<br>image_features = clip_model.encode_image(images)<br><span class="hljs-keyword">return</span> image_features<br>  <br>img = cv.imread(<span class="hljs-string">&quot;/path/to/example.png&quot;</span>)<br>img = Image.fromarray(img)<br><br>image_feature = image_to_features(img)<br></code></pre></td></tr></table></figure><p><code>/path/to/example.png</code> 替换成自己图片的路径</p><p><code>image_to_features</code> 函数是一个封装过的将图像转成文本的函数，传入的参数是一个<code>image_to_features</code>格式的图片。</p><p><code>image_feature</code> 就是经过CLIP的编码器得到的特征</p><h4 id="编码文本">编码文本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">prompt = <span class="hljs-string">&quot;a photo of a cat&quot;</span><br>text_tokens = tokenize([prompt]).to(device)<br>text_features = clip_model.encode_text(text_tokens)<br></code></pre></td></tr></table></figure><p><code>text_features</code> 就是得到的特征。</p>]]></content>
    
    
    <categories>
      
      <category>多模态</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PicGo配置CloudflareR2图片储存</title>
    <link href="/2023/07/09/PicGo%E9%85%8D%E7%BD%AECloudflareR2%E5%9B%BE%E7%89%87%E5%82%A8%E5%AD%98/"/>
    <url>/2023/07/09/PicGo%E9%85%8D%E7%BD%AECloudflareR2%E5%9B%BE%E7%89%87%E5%82%A8%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1 id="picgo配置cloudflarer2图片储存">PicGo配置CloudflareR2图片储存</h1><p>首先需要安装PicGo,并购买CloudFlare R2。CloudFlare R2选择免费计划即可，只是需要绑定银行卡或者paypal(淘宝两块钱解君忧)。</p><p>在R2的管理界面选择管理R2 API Tokens， <img src="https://cdn.studyinglover.com/pic/2023/07/c5fa048794dc5eab45d6e83efef1df8e.png" alt="image.png" /></p><p>创建一个API Token <img src="https://cdn.studyinglover.com/pic/2023/07/eed2d1b23fb75a7abc5ac334688baba7.png" alt="image.png" /> 注意选择权限为edit <img src="https://cdn.studyinglover.com/pic/2023/07/0a7ece4445c1a2f190adc2dd82351f62.png" alt="image.png" /></p><p>创建API Token之后，保存Access Key ID和Secret Access Key。</p><p>接下来返回R2的管理界面，创建一个储存桶 <img src="https://cdn.studyinglover.com/pic/2023/07/6de3892cb5f8a0bf1c53bb83d2070ca6.png" alt="image.png" /> 填入名字并创建桶，点击进入储存桶的管理界面，进入setting界面。 <img src="https://cdn.studyinglover.com/pic/2023/07/674ad9e98a4d4c064cd135353f967fce.png" alt="image.png" /></p><p>自定义自己的域名并允许公开访问，选择Connect Domain绑定到自己的域名，选择AllowAccess允许公开访问。 <img src="https://cdn.studyinglover.com/pic/2023/07/135bb11e6b475ed4d7acdf491003cf52.png" alt="image.png" /></p><p>接下来打开PicGo,安装s3插件 <img src="https://cdn.studyinglover.com/pic/2023/07/bc0d82dee02bc1a2b114477b827b125c.png" alt="image.png" /></p><p>应用密钥ID和应用密钥填入在API Token获取的Access Key ID和Secret Access Key，桶名填入创建的桶的名称，自定义节点填入储存桶管理界面中途中对应的路径。自定义域名填入前面绑定的自己的域名。 <img src="https://cdn.studyinglover.com/pic/2023/07/0c0cc997c92cd807ecb48c3b2b08e394.png" alt="image.png" /></p><p>尝试上传不出意外就上传成功了。</p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ArchlinuxGnome快捷键打开终端</title>
    <link href="/2023/06/28/ArchlinuxGnome%E9%85%8D%E7%BD%AE%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF/"/>
    <url>/2023/06/28/ArchlinuxGnome%E9%85%8D%E7%BD%AE%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<p>网上大量教程说命令打开终端的命令是<code>gnome-terminal</code> ， 然而</p><figure><img src="https://proxy.thisis.plus/202306281925975.png" alt="" /><figcaption>image.png</figcaption></figure><p>经过一番搜索，我发现 https://www.omglinux.com/gnome-console-tab-overview/ <img src="https://proxy.thisis.plus/202306281927089.png" alt="image.png" /></p><p>emmmmm,意思是终端命令是<code>kgx</code> ?</p><p>果然，又被一些教程坑了 <img src="https://proxy.thisis.plus/202306281928138.png" alt="image.png" /></p><p>最后配置如图 <img src="https://proxy.thisis.plus/202306211810384.png" alt="image.png" /></p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArchLinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>clip-interrogator代码解析</title>
    <link href="/2023/06/23/clip-interrogator%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/06/23/clip-interrogator%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="clip-interrogator代码解析">clip-interrogator代码解析</h1><p>clip-interrogator 的的主要代码在仓库的<code>./clip-interrogator</code> 文件夹下 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.<br>├── clip_interrogator<span class="hljs-selector-class">.py</span><br>├── data<br>│   ├── artists<span class="hljs-selector-class">.txt</span><br>│   ├── flavors<span class="hljs-selector-class">.txt</span><br>│   ├── mediums<span class="hljs-selector-class">.txt</span><br>│   ├── movements<span class="hljs-selector-class">.txt</span><br>│   └── negative<span class="hljs-selector-class">.txt</span><br>└── __init__<span class="hljs-selector-class">.py</span><br><br></code></pre></td></tr></table></figure></p><p>这里主要解析<code>clip-interrogator.py</code> 文件。</p><h2 id="init.py"><strong>init</strong>.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> .clip_interrogator <span class="hljs-keyword">import</span> Config, Interrogator, LabelTable, list_caption_models, list_clip_models, load_list<br><br>__version__ = <span class="hljs-string">&#x27;0.6.0&#x27;</span><br>__author__ = <span class="hljs-string">&#x27;pharmapsychotic&#x27;</span><br></code></pre></td></tr></table></figure><p>这个 <code>__init__.py</code> 文件的作用是在包被导入时执行初始化操作，并提供了版本号和作者信息。</p><h2 id="clip_interrogator.py">clip_interrogator.py</h2><p>文件的大致结构是这样的 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> 需要的库<br><br>CAPTION_MODELS = &#123;<br><span class="hljs-string">&#x27;blip-base&#x27;</span>: <span class="hljs-string">&#x27;Salesforce/blip-image-captioning-base&#x27;</span>, <span class="hljs-comment"># 990MB</span><br><span class="hljs-string">&#x27;blip-large&#x27;</span>: <span class="hljs-string">&#x27;Salesforce/blip-image-captioning-large&#x27;</span>, <span class="hljs-comment"># 1.9GB</span><br><span class="hljs-string">&#x27;blip2-2.7b&#x27;</span>: <span class="hljs-string">&#x27;Salesforce/blip2-opt-2.7b&#x27;</span>, <span class="hljs-comment"># 15.5GB</span><br><span class="hljs-string">&#x27;blip2-flan-t5-xl&#x27;</span>: <span class="hljs-string">&#x27;Salesforce/blip2-flan-t5-xl&#x27;</span>, <span class="hljs-comment"># 15.77GB</span><br><span class="hljs-string">&#x27;git-large-coco&#x27;</span>: <span class="hljs-string">&#x27;microsoft/git-large-coco&#x27;</span>, <span class="hljs-comment"># 1.58GB</span><br>&#125;<br><br>CACHE_URL_BASE = <span class="hljs-string">&#x27;https://huggingface.co/pharma/ci-preprocess/resolve/main/&#x27;</span><br><br><span class="hljs-meta">@dataclass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span>:<br>    具体实现<br>    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Interrogator</span>():<br>    具体实现<br>    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LabelTable</span>():<br>    具体实现<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_download_file</span>(<span class="hljs-params">url: <span class="hljs-built_in">str</span>, filepath: <span class="hljs-built_in">str</span>, chunk_size: <span class="hljs-built_in">int</span> = <span class="hljs-number">4</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>, quiet: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span></span>):<br>    具体实现<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_merge_tables</span>(<span class="hljs-params">tables: <span class="hljs-type">List</span>[LabelTable], ci: Interrogator</span>) -&gt; LabelTable:<br>    具体实现<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_prompt_at_max_len</span>(<span class="hljs-params">text: <span class="hljs-built_in">str</span>, tokenize</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    具体实现<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_truncate_to_fit</span>(<span class="hljs-params">text: <span class="hljs-built_in">str</span>, tokenize</span>) -&gt; <span class="hljs-built_in">str</span>:<br>    具体实现<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">list_caption_models</span>() -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:<br>    具体实现<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">list_clip_models</span>() -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:<br>    具体实现<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_list</span>(<span class="hljs-params">data_path: <span class="hljs-built_in">str</span>, filename: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:<br>    具体实现<br></code></pre></td></tr></table></figure></p><p><code>CAPTION_MODELS</code> 定义了各个所需要的模型在huggingface 地址。<code>CACHE_URL_BASE</code> 是缓存地址</p><h3 id="config-class">Config class</h3><p>首先定义了CLIP和BILP模型 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">caption_model = <span class="hljs-literal">None</span><br>caption_processor = <span class="hljs-literal">None</span><br>clip_model = <span class="hljs-literal">None</span><br>clip_preprocess = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure></p><p>接下来对BLIP和CLIP进行了详细的设置2 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># blip settings</span><br>caption_max_length: <span class="hljs-built_in">int</span> = <span class="hljs-number">32</span><br>caption_model_name: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-string">&#x27;blip-large&#x27;</span> <span class="hljs-comment"># use a key from CAPTION_MODELS or None</span><br>caption_offload: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span><br>  <br><span class="hljs-comment"># clip settings</span><br>clip_model_name: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;ViT-L-14/openai&#x27;</span><br>clip_model_path: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span><br>clip_offload: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure></p><p>这段代码是Config类中与Interrogator类相关的配置参数。</p><p>接下来定义了interrogator的相关设置 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">cache_path: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;cache&#x27;</span> <span class="hljs-comment"># 存储缓存的文本嵌入的路径</span><br>download_cache: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span> <span class="hljs-comment"># 是否从huggingface下载缓存的嵌入向量</span><br>chunk_size: <span class="hljs-built_in">int</span> = <span class="hljs-number">2048</span> <span class="hljs-comment"># CLIP的批处理大小</span><br>data_path: <span class="hljs-built_in">str</span> = os.path.join(os.path.dirname(__file__), <span class="hljs-string">&#x27;data&#x27;</span>)<span class="hljs-comment"># 数据文件的路径</span><br>device: <span class="hljs-built_in">str</span> = (<span class="hljs-string">&quot;mps&quot;</span> <span class="hljs-keyword">if</span> torch.backends.mps.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br>flavor_intermediate_count: <span class="hljs-built_in">int</span> = <span class="hljs-number">2048</span><br>quiet: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span> <span class="hljs-comment"># 是否显示进度条</span><br></code></pre></td></tr></table></figure></p><p><code>apply_low_vram_defaults</code>方法，用于将配置参数设置为适合低显存设备的默认值。在该方法中，将一些参数设置为较小的值，以减少显存的使用。</p><h3 id="interrogator-class">Interrogator class</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, config: Config</span>):<br><span class="hljs-variable language_">self</span>.config = config<br><span class="hljs-variable language_">self</span>.device = config.device<br><span class="hljs-variable language_">self</span>.dtype = torch.float16 <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.device == <span class="hljs-string">&#x27;cuda&#x27;</span> <span class="hljs-keyword">else</span> torch.float32<br><span class="hljs-variable language_">self</span>.caption_offloaded = <span class="hljs-literal">True</span><br><span class="hljs-variable language_">self</span>.clip_offloaded = <span class="hljs-literal">True</span><br><span class="hljs-variable language_">self</span>.load_caption_model()<br><span class="hljs-variable language_">self</span>.load_clip_model()<br></code></pre></td></tr></table></figure><p>继承了<code>Config</code> 类中的一些配置。</p><h4 id="load_caption_model">load_caption_model</h4><p>这个方法用于加载图像描述模型。首先判断配置中是否直接传入了图像描述模型对象，并且是否指定了图像描述模型名称。如果没有直接传入模型对象并且指定了模型名称，则根据模型名称加载对应的模型。加载过程中根据模型名称的不同选择不同的加载方式。加载完成后，将模型设置为eval模式，并根据配置决定是否将模型移动到指定的设备上</p><h4 id="load_clip_model">load_clip_model</h4><p>这个方法用于加载CLIP模型。首先根据配置中指定的CLIP模型名称解析出模型名称和预训练模型名称。然后判断配置中是否直接传入了CLIP模型对象。如果没有直接传入模型对象，则根据模型名称和预训练模型名称加载模型。加载过程中会调用<code>open_clip.create_model_and_transforms()</code>方法创建模型和预处理函数，并设置模型为eval模式。加载完成后，将模型和预处理函数保存到对应的属性中。</p><p>接下来，根据配置中的数据路径加载一些标签数据，并创建<code>LabelTable</code>对象。<code>LabelTable</code>类用于管理标签和对应的嵌入向量。这里创建了artists、flavors、mediums、movements、trendings和negative等LabelTable对象。</p><p>最后，打印加载CLIP模型和数据所花费的时间。</p><h4 id="chain">chain</h4><p>这个方法用于它用于在一组短语中选择最佳的短语，以构建一个完整的提示。</p><p>首先调用_prepare_clip()方法，准备CLIP模型。</p><p>然后，将短语列表转换为一个集合，方便操作。如果没有指定最佳提示，则通过调用rank_top()方法选择当前短语列表中与图像特征最相似的短语作为最佳提示，并计算其相似度。然后从短语集合中移除最佳提示。</p><p>接下来，使用curr_prompt和curr_sim变量保存当前的提示和相似度。</p><p>定义了一个名为check的内部函数，用于检查给定的附加短语是否应该成为当前提示的一部分。该函数会根据相似度比较结果更新最佳提示和最佳相似度，并判断是否需要更新当前提示。</p><p>使用一个循环遍历max_count次，每次迭代中选择当前短语列表中与当前提示加上附加短语后最相似的短语作为最佳短语。然后将该短语的一部分（从curr_prompt的长度加2开始）作为附加短语。调用check()函数进行相似度比较和更新。</p><p>在循环过程中，如果当前提示已经达到了最大长度，则停止迭代。最后，返回最佳提示。</p><h4 id="generate_caption">generate_caption</h4><p>使用BILP生成图像的描述。它首先对图像进行预处理，然后使用图像描述模型生成描述的tokens，最后将tokens解码为文本描述。</p><h4 id="image_to_features">image_to_features</h4><p>使用CLIP的图像编码器将图片转换成torch格式的特征</p><h4 id="interrogate">interrogate</h4><p><code>interrogate_classic</code> 首先生成一个标准格式的提示，描述图像，然后列出艺术家、趋势、风格和口味等文本修饰符。它使用了mediums、artists、trendings、movements和flavors等LabelTable对象来选择相应的修饰符。</p><p><code>interrogate_fast</code> 在生成的描述后面简单地添加排名靠前的词语。它通常比经典模式产生更好的生成提示和图像之间的相似度，但提示的可读性较差。它使用了artists、flavors、mediums、movements和trendings等LabelTable对象来选择排名靠前的词语。</p><p><code>interrogate_negative</code> 主要生成负面词汇，将与图像最不相似的词语连接在一起。它可以用于构建与正面提示相对应的负面提示，并且通常可以改善生成图像的结果，特别是在使用稳定扩散2（Stable Diffusion 2）时。它使用了flavors和negative等LabelTable对象来选择最不相似的词语。</p><p><code>interrogate</code> 会生成一个完整的提示。首先生成一个基于图像的描述，然后根据图像特征和LabelTable对象生成一组修饰符。然后使用chain方法选择最佳的修饰符，并根据相似度和一些条件选择最佳提示。最后，根据生成的多个提示的相似度，选择最终的生成提示。</p><h4 id="prepare_caption">_prepare_caption</h4><p>用于加载BLIP模型。</p><h4 id="prepare_clip">_prepare_clip</h4><p>用于加载CLIP模型。</p><h4 id="rank_top">rank_top</h4><p>这个方法用于对文本进行排名，并返回排名最高的文本。</p><p>首先加载CLIP模型。使用tokenize方法将文本数组转换为文本tokens，并将其移动到设备上。</p><p>然后，使用<code>clip_model</code>的<code>encode_text</code>方法对文本tokens进行编码，得到文本的特征向量。对特征向量进行归一化处理，使其长度为1。接着，计算文本特征向量与图像特征向量之间的相似度。通过计算特征向量的点积得到相似度。如果<code>reverse</code>为<code>True</code>，则将相似度取负，以实现按相似度降序排列。最后，返回排名最高的文本，即相似度最大的文本。</p><h4 id="similarity和similarities">similarity和similarities</h4><p>通过计算点积的方式计算了相似度</p><h3 id="labeltable-class">LabelTable class</h3><p>这个类创建标签，并对标签进行排名</p><h4 id="init"><strong>init</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, labels:<span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>], desc:<span class="hljs-built_in">str</span>, ci: Interrogator</span>):<br>clip_model, config = ci.clip_model, ci.config<br><span class="hljs-variable language_">self</span>.chunk_size = config.chunk_size<br><span class="hljs-variable language_">self</span>.config = config<br><span class="hljs-variable language_">self</span>.device = config.device<br><span class="hljs-variable language_">self</span>.embeds = []<br><span class="hljs-variable language_">self</span>.labels = labels<br><span class="hljs-variable language_">self</span>.tokenize = ci.tokenize<br>  <br><span class="hljs-built_in">hash</span> = hashlib.sha256(<span class="hljs-string">&quot;,&quot;</span>.join(labels).encode()).hexdigest()<br>sanitized_name = <span class="hljs-variable language_">self</span>.config.clip_model_name.replace(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>).replace(<span class="hljs-string">&#x27;@&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>)<br><span class="hljs-variable language_">self</span>._load_cached(desc, <span class="hljs-built_in">hash</span>, sanitized_name)<br>  <br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.labels) != <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.embeds):<br><span class="hljs-variable language_">self</span>.embeds = []<br>chunks = np.array_split(<span class="hljs-variable language_">self</span>.labels, <span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.labels)/config.chunk_size))<br><span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> tqdm(chunks, desc=<span class="hljs-string">f&quot;Preprocessing <span class="hljs-subst">&#123;desc&#125;</span>&quot;</span> <span class="hljs-keyword">if</span> desc <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>, disable=<span class="hljs-variable language_">self</span>.config.quiet):<br>text_tokens = <span class="hljs-variable language_">self</span>.tokenize(chunk).to(<span class="hljs-variable language_">self</span>.device)<br><span class="hljs-keyword">with</span> torch.no_grad(), torch.cuda.amp.autocast():<br>text_features = clip_model.encode_text(text_tokens)<br>text_features /= text_features.norm(dim=-<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<br>text_features = text_features.half().cpu().numpy()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(text_features.shape[<span class="hljs-number">0</span>]):<br><span class="hljs-variable language_">self</span>.embeds.append(text_features[i])<br>  <br><span class="hljs-keyword">if</span> desc <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.config.cache_path:<br>os.makedirs(<span class="hljs-variable language_">self</span>.config.cache_path, exist_ok=<span class="hljs-literal">True</span>)<br>cache_filepath = os.path.join(<span class="hljs-variable language_">self</span>.config.cache_path, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;sanitized_name&#125;</span>_<span class="hljs-subst">&#123;desc&#125;</span>.safetensors&quot;</span>)<br>tensors = &#123;<br><span class="hljs-string">&quot;embeds&quot;</span>: np.stack(<span class="hljs-variable language_">self</span>.embeds),<br><span class="hljs-string">&quot;hash&quot;</span>: np.array([<span class="hljs-built_in">ord</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">hash</span>], dtype=np.int8)<br>&#125;<br>save_file(tensors, cache_filepath)<br>  <br><span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.device == <span class="hljs-string">&#x27;cpu&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-variable language_">self</span>.device == torch.device(<span class="hljs-string">&#x27;cpu&#x27;</span>):<br><span class="hljs-variable language_">self</span>.embeds = [e.astype(np.float32) <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.embeds]<br></code></pre></td></tr></table></figure><p>继承了<code>Interrogator</code> 中的一些内容，同时对embeds 做了预处理。</p><h4 id="load_cached">_load_cached</h4><p>用于加载缓存的嵌入向量。</p><h4 id="rank和rank">_rank和rank</h4><p>用于对图像特征和文本嵌入向量进行排名。<code>_rank</code>方法计算图像特征与文本嵌入向量之间的相似度，并返回排名最高的文本索引。<code>rank</code>方法根据<code>chunk_size</code>的大小，将文本嵌入向量分成多个批次进行排名，然后返回排名最高的文本标签。</p><h2 id="data">data</h2><p>存储了常用的文字生成图片的prompt</p><h2 id="clip-interrogator究竟做了什么">clip-interrogator究竟做了什么</h2><p>首先，clip-interrogator会使用BILP生成一段对图片的自然语言描述。</p><p>接下来会根据四种模式，从data文件夹下的txt文件中组合出文字生成图片常用的prompt,通过CLIP进行编码，然后将图片也用CLIP进行编码，计算出相似度最大的一组prompt,和BILP生成的prompt拼接到一起，就得到了一组prompt。</p>]]></content>
    
    
    
    <tags>
      
      <tag>文字生成图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GroundingDINO安装报错解决</title>
    <link href="/2023/06/21/GroundingDINO%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
    <url>/2023/06/21/GroundingDINO%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="groundingdino安装报错解决">GroundingDINO安装报错解决</h1><p>在安装会遇到这个错误 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs bash">  ERROR: Command errored out with <span class="hljs-built_in">exit</span> status 1:<br>   <span class="hljs-built_in">command</span>: /usr/bin/python3 /tmp/tmpmhvo4wyp build_wheel /tmp/tmp3a4xwmi4<br>       cwd: /tmp/pip-install-x0mg8qpf/pycocotools<br>  Complete output (77 lines):<br>  running bdist_wheel<br>  running build<br>  running build_py<br>  creating build<br>  creating build/lib.linux-x86_64-cpython-38<br>  creating build/lib.linux-x86_64-cpython-38/pycocotools<br>  copying pycocotools/coco.py -&gt; build/lib.linux-x86_64-cpython-38/pycocotools<br>  copying pycocotools/mask.py -&gt; build/lib.linux-x86_64-cpython-38/pycocotools<br>  copying pycocotools/cocoeval.py -&gt; build/lib.linux-x86_64-cpython-38/pycocotools<br>  copying pycocotools/__init__.py -&gt; build/lib.linux-x86_64-cpython-38/pycocotools<br>  running build_ext<br>  cythoning pycocotools/_mask.pyx to pycocotools/_mask.c<br>  building <span class="hljs-string">&#x27;pycocotools._mask&#x27;</span> extension<br>  creating build/temp.linux-x86_64-cpython-38<br>  creating build/temp.linux-x86_64-cpython-38/common<br>  creating build/temp.linux-x86_64-cpython-38/pycocotools<br>  x86_64-linux-gnu-gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -fPIC -I/tmp/pip-build-env-xkmgfc0t/overlay/lib/python3.8/site-packages/numpy/core/include -I./common -I/usr/include/python3.8 -c ./common/maskApi.c -o build/temp.linux-x86_64-cpython-38/./common/maskApi.o -Wno-cpp -Wno-unused-function -std=c99<br>  ./common/maskApi.c: In <span class="hljs-keyword">function</span> ‘rleToBbox’:<br>  ./common/maskApi.c:151:32: warning: unused variable ‘xp’ [-Wunused-variable]<br>    151 |     uint h, w, xs, ys, xe, ye, xp, cc; siz j, m;<br>        |                                ^~<br>  ./common/maskApi.c: In <span class="hljs-keyword">function</span> ‘rleFrPoly’:<br>  ./common/maskApi.c:197:3: warning: this ‘<span class="hljs-keyword">for</span>’ clause does not guard... [-Wmisleading-indentation]<br>    197 |   <span class="hljs-keyword">for</span>(j=0; j&lt;k; j++) x[j]=(int)(scale*xy[j*2+0]+.5); x[k]=x[0];<br>        |   ^~~<br>  ./common/maskApi.c:197:54: note: ...this statement, but the latter is misleadingly indented as <span class="hljs-keyword">if</span> it were guarded by the ‘<span class="hljs-keyword">for</span>’<br>    197 |   <span class="hljs-keyword">for</span>(j=0; j&lt;k; j++) x[j]=(int)(scale*xy[j*2+0]+.5); x[k]=x[0];<br>        |                                                      ^<br>  ./common/maskApi.c:198:3: warning: this ‘<span class="hljs-keyword">for</span>’ clause does not guard... [-Wmisleading-indentation]<br>    198 |   <span class="hljs-keyword">for</span>(j=0; j&lt;k; j++) y[j]=(int)(scale*xy[j*2+1]+.5); y[k]=y[0];<br>        |   ^~~<br>  ./common/maskApi.c:198:54: note: ...this statement, but the latter is misleadingly indented as <span class="hljs-keyword">if</span> it were guarded by the ‘<span class="hljs-keyword">for</span>’<br>    198 |   <span class="hljs-keyword">for</span>(j=0; j&lt;k; j++) y[j]=(int)(scale*xy[j*2+1]+.5); y[k]=y[0];<br>        |                                                      ^<br>  ./common/maskApi.c: In <span class="hljs-keyword">function</span> ‘rleToString’:<br>  ./common/maskApi.c:243:7: warning: this ‘<span class="hljs-keyword">if</span>’ clause does not guard... [-Wmisleading-indentation]<br>    243 |       <span class="hljs-keyword">if</span>(more) c |= 0x20; c+=48; s[p++]=c;<br>        |       ^~<br>  ./common/maskApi.c:243:27: note: ...this statement, but the latter is misleadingly indented as <span class="hljs-keyword">if</span> it were guarded by the ‘<span class="hljs-keyword">if</span>’<br>    243 |       <span class="hljs-keyword">if</span>(more) c |= 0x20; c+=48; s[p++]=c;<br>        |                           ^<br>  ./common/maskApi.c: In <span class="hljs-keyword">function</span> ‘rleFrString’:<br>  ./common/maskApi.c:251:3: warning: this ‘<span class="hljs-keyword">while</span>’ clause does not guard... [-Wmisleading-indentation]<br>    251 |   <span class="hljs-keyword">while</span>( s[m] ) m++; cnts=malloc(sizeof(uint)*m); m=0;<br>        |   ^~~~~<br>  ./common/maskApi.c:251:22: note: ...this statement, but the latter is misleadingly indented as <span class="hljs-keyword">if</span> it were guarded by the ‘<span class="hljs-keyword">while</span>’<br>    251 |   <span class="hljs-keyword">while</span>( s[m] ) m++; cnts=malloc(sizeof(uint)*m); m=0;<br>        |                      ^~~~<br>  ./common/maskApi.c:259:5: warning: this ‘<span class="hljs-keyword">if</span>’ clause does not guard... [-Wmisleading-indentation]<br>    259 |     <span class="hljs-keyword">if</span>(m&gt;2) x+=(long) cnts[m-2]; cnts[m++]=(uint) x;<br>        |     ^~<br>  ./common/maskApi.c:259:34: note: ...this statement, but the latter is misleadingly indented as <span class="hljs-keyword">if</span> it were guarded by the ‘<span class="hljs-keyword">if</span>’<br>    259 |     <span class="hljs-keyword">if</span>(m&gt;2) x+=(long) cnts[m-2]; cnts[m++]=(uint) x;<br>        |                                  ^~~~<br>  x86_64-linux-gnu-gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -fPIC -I/tmp/pip-build-env-xkmgfc0t/overlay/lib/python3.8/site-packages/numpy/core/include -I./common -I/usr/include/python3.8 -c pycocotools/_mask.c -o build/temp.linux-x86_64-cpython-38/pycocotools/_mask.o -Wno-cpp -Wno-unused-function -std=c99<br>  pycocotools/_mask.c:6:10: fatal error: Python.h: No such file or directory<br>      6 | <span class="hljs-comment">#include &quot;Python.h&quot;</span><br>        |          ^~~~~~~~~~<br>  compilation terminated.<br>  /tmp/pip-build-env-xkmgfc0t/overlay/lib/python3.8/site-packages/setuptools/dist.py:745: SetuptoolsDeprecationWarning: Invalid dash-separated options<br>  !!<br>  <br>          ********************************************************************************<br>          Usage of dash-separated <span class="hljs-string">&#x27;index-url&#x27;</span> will not be supported <span class="hljs-keyword">in</span> future<br>          versions. Please use the underscore name <span class="hljs-string">&#x27;index_url&#x27;</span> instead.<br>  <br>          By 2023-Sep-26, you need to update your project and remove deprecated calls<br>          or your builds will no longer be supported.<br>  <br>          See https://setuptools.pypa.io/en/latest/userguide/declarative_config.html <span class="hljs-keyword">for</span> details.<br>          ********************************************************************************<br>  <br>  !!<br>    opt = self.warn_dash_deprecation(opt, section)<br>  /tmp/pip-build-env-xkmgfc0t/overlay/lib/python3.8/site-packages/Cython/Compiler/Main.py:369: FutureWarning: Cython directive <span class="hljs-string">&#x27;language_level&#x27;</span> not <span class="hljs-built_in">set</span>, using 2 <span class="hljs-keyword">for</span> now (Py2). This will change <span class="hljs-keyword">in</span> a later release! File: /tmp/pip-install-x0mg8qpf/pycocotools/pycocotools/_mask.pyx<br>    tree = Parsing.p_module(s, pxd, full_module_name)<br>  error: <span class="hljs-built_in">command</span> <span class="hljs-string">&#x27;/usr/bin/x86_64-linux-gnu-gcc&#x27;</span> failed with <span class="hljs-built_in">exit</span> code 1<br>  ----------------------------------------<br>  ERROR: Failed building wheel <span class="hljs-keyword">for</span> pycocotools<br>Failed to build pycocotools<br>ERROR: Could not build wheels <span class="hljs-keyword">for</span> pycocotools <span class="hljs-built_in">which</span> use PEP 517 and cannot be installed directly<br></code></pre></td></tr></table></figure> 细读报错，我们会发现是编译过程中少了一个<code>Python.h</code> 的头文件导致编译pycocotools失败。</p><p>我们尝试直接安装<code>pycocotools</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pycocotools<br></code></pre></td></tr></table></figure><p>会出现和上面一样的错误。</p><p>google一番,提示说<code>sudo apt-get install libsuitesparse-dev</code></p><p>受到报错 <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">Building wheel <span class="hljs-keyword">for</span> pycocotools (pyproject.toml) ... error<br> error: subprocess-exited-with-error<br> <br> × Building wheel <span class="hljs-keyword">for</span> pycocotools (pyproject.toml) did not run successfully.<br> │ <span class="hljs-keyword">exit</span> code: <span class="hljs-number">1</span><br> ╰─&gt; [<span class="hljs-number">77</span> lines of output]<br></code></pre></td></tr></table></figure></p><p>最后的结果依然是 <figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">  note: This error originates from a subprocess, and is likely not a problem with pip.<br>  ERROR: Failed building wheel for pycocotools<br>Failed to build pycocotools<br><span class="hljs-keyword">ERROR: </span>Could not build wheels for pycocotools, which is required to install pyproject.toml-based projects<br></code></pre></td></tr></table></figure></p><p>尝试通过安装<code>pip install "git+https://github.com/philferriere/cocoapi.git#egg=pycocotools&amp;subdirectory=PythonAPI"</code> 解决</p><p>获得报错 <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">fatal: unable to access <span class="hljs-string">&#x27;https://github.com/philferriere/cocoapi.git/&#x27;</span>: GnuTLS recv error (-<span class="hljs-number">110</span>): The TLS connection was non-properly terminated.<br>  error: subprocess-exited-with-error<br>  <br>  × git clone --filter=blob:none --quiet https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/philferriere/</span>cocoapi.git <span class="hljs-regexp">/tmp/</span>pip-install-a4vtujvc/pycocotools_f76f853260a94fd79f5ac4cef5f3a557 did not run successfully.<br>  │ <span class="hljs-keyword">exit</span> code: <span class="hljs-number">128</span><br>  ╰─&gt; See above <span class="hljs-keyword">for</span> output.<br>  <br>  note: This error originates from a subprocess, and is likely not a problem with pip.<br>error: subprocess-exited-with-error<br><br>× git clone --filter=blob:none --quiet https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/philferriere/</span>cocoapi.git <span class="hljs-regexp">/tmp/</span>pip-install-a4vtujvc/pycocotools_f76f853260a94fd79f5ac4cef5f3a557 did not run successfully.<br>│ <span class="hljs-keyword">exit</span> code: <span class="hljs-number">128</span><br>╰─&gt; See above <span class="hljs-keyword">for</span> output.<br></code></pre></td></tr></table></figure></p><p>运行<code>sudo apt install python3.8-dev</code></p><p>然后<code>git clone https://github.com/cocodataset/cocoapi.git</code> , <code>cd ./cocoapi/PythonAPI</code> ,接下来 <code>make</code></p><p>运行<code>pip install -e .</code> ,成功安装<code>pycocotools</code> .</p><p>再次运行<code>pip install GroundingDINO</code> , 成功。</p><figure><img src="https://proxy.thisis.plus/202306211724652.png" alt="" /><figcaption>image.png</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2023华为鲲鹏畅想日暨西安高新国际会议中心零食午饭测评</title>
    <link href="/2023/06/19/2023%E5%8D%8E%E4%B8%BA%E9%B2%B2%E9%B9%8F%E7%95%85%E6%83%B3%E6%97%A5%E6%9A%A8%E8%A5%BF%E5%AE%89%E9%AB%98%E6%96%B0%E5%9B%BD%E9%99%85%E4%BC%9A%E8%AE%AE%E4%B8%AD%E5%BF%83%E9%9B%B6%E9%A3%9F%E5%8D%88%E9%A5%AD%E6%B5%8B%E8%AF%84/"/>
    <url>/2023/06/19/2023%E5%8D%8E%E4%B8%BA%E9%B2%B2%E9%B9%8F%E7%95%85%E6%83%B3%E6%97%A5%E6%9A%A8%E8%A5%BF%E5%AE%89%E9%AB%98%E6%96%B0%E5%9B%BD%E9%99%85%E4%BC%9A%E8%AE%AE%E4%B8%AD%E5%BF%83%E9%9B%B6%E9%A3%9F%E5%8D%88%E9%A5%AD%E6%B5%8B%E8%AF%84/</url>
    
    <content type="html"><![CDATA[<h1 id="华为鲲鹏畅想日暨西安高新国际会议中心零食午饭测评">2023华为鲲鹏畅想日暨西安高新国际会议中心零食午饭测评</h1><h2 id="鲲鹏活动">鲲鹏活动</h2><p>我是白吃白喝来的你真以为我是来学技术的？</p><h3 id="上午场">上午场</h3><p><img src="https://proxy.thisis.plus/202306190655993.jpg" /></p><p>院士发言，讲了从教多年开设公共课的历程，还有将核心技术掌握在自己手里的重要性，举了上世纪欧洲软件和20年哈工大哈工程被禁用matlab的例子。 <img src="https://proxy.thisis.plus/202306190655529.jpg" /></p><p>然后我就牙疼的受不了看牙去了……</p><h3 id="下午场">下午场</h3><p>下午场有三部分，星享会，鲲鹏训练营还有人才发展论坛。星享会是关于互联网+产业命题赛道和鲲鹏应用创新大赛的分享。鲲鹏训练营没有参与，我猜是用类似华为云的沙盒做实验。人才发展论坛是大佬们发言讲自己做的一些研究和人才培养模式 <img src="https://proxy.thisis.plus/202306190703495.jpg" alt="IMG_20230617_135653.jpg" /></p><figure><img src="https://proxy.thisis.plus/202306190704505.jpg" alt="" /><figcaption>IMG_20230617_173651.jpg</figcaption></figure><figure><img src="https://proxy.thisis.plus/202306190704514.jpg" alt="" /><figcaption>IMG_20230617_165145.jpg</figcaption></figure><h2 id="零食午饭测评">零食午饭测评</h2><p>因为牙疼刚做了根管的缘故没有吃的太全，所以只能聊一聊自己吃了的部分</p><h3 id="午饭">午饭</h3><p><img src="https://proxy.thisis.plus/202306190642829.jpg" /></p><p>左边粥是皮蛋瘦肉粥，绝对好评，好喝还适合我这种牙刚做了手术的人，我喝了三碗。</p><p>右边的甜点里我们最远的那一排左边的是蒸饺，正常。右边的不知道叫什么，夹心，正常水平。</p><p>中间的一排虽然长得不一样，都是千层饼。有一点咸味，有点硬不适合那天的牙。</p><p>离我们最近的一排最左边的小蛋糕，我吃了两个，第一个没啥味道，第二个有苦味。中间的豆沙。最右边的，流心绿豆糕，非常好吃，很软口感很好，很适合我的牙，吃了六个吧。</p><h3 id="零食">零食</h3><p><img src="https://proxy.thisis.plus/202306190642391.jpg" /></p><p>右边的饮料据工作人员说是他们自己调的，气泡莫吉托，挺好喝的，有碳酸饮料的感觉 <img src="https://proxy.thisis.plus/202306190642335.jpg" /></p><p>左边盘子里左上是芒果蛋糕，右上草莓蛋糕。芒果蛋糕整个是芒果和奶油，草莓蛋糕正常。左下不好吃，很硬没啥味道。右下核桃芯还是很好吃的。</p><h2 id="收获">收获</h2><p>一本基于鲲鹏的大数据挖掘de书，两个水杯，一个肩带，一个文化衫</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RoboMaster开源仓库汇总(长期更新)</title>
    <link href="/2023/06/18/RoboMaster%E5%BC%80%E6%BA%90%E4%BB%93%E5%BA%93%E6%B1%87%E6%80%BB(%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0)/"/>
    <url>/2023/06/18/RoboMaster%E5%BC%80%E6%BA%90%E4%BB%93%E5%BA%93%E6%B1%87%E6%80%BB(%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0)/</url>
    
    <content type="html"><![CDATA[<h2 id="视觉">视觉</h2><h3 id="陈君">陈君</h3><p><a href="https://gitlab.com/rm_vision">陈君视觉1</a></p><p><a href="https://github.com/rm-vision-archive">陈君视觉2</a></p><h3 id="沈航">沈航</h3><ol type="1"><li><a href="https://github.com/tup-robomaster/TUP-NN-Train-2">TUP-NN-Train-2:项目结构修改，增加几种新网络结构</a></li><li><a href="https://github.com/tup-robomaster/TUP2023-Sentry-Framework">TUP2023-Sentry-Framework:哨兵框架开源，包括全向感知，决策，导航 提供VIO和LIO方案</a></li><li><a href="https://github.com/tup-robomaster/RM_Radar2023">RM_Radar2023:沈阳航空航天大学2023年雷达程序</a></li><li><a href="https://github.com/tup-robomaster/TRTInferenceForYolo">TRTInferenceForYoloX:YOLOXTensorRT推理</a></li></ol><h3 id="西浦">西浦</h3><p><a href="https://github.com/zRzRzRzRzRzRzR/YOLO-of-RoboMaster-Keypoints-Detection-2023">四点识别模型</a></p><h2 id="工具">工具</h2><p><a href="http://shenyibo.me/RM-labeling-tool/">装甲板数据集制作</a></p><p><a href="https://github.com/tup-robomaster/AutoLabel">AutoLabel:自动标注pipeline，集成角点坐标分布分析,图像去重等工具</a></p><p><a href="https://github.com/ifr-cv/rm_part_visual_tag_identify">RoboMaster视觉标签识别器</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>RoboMaster</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>没有手都可以在腾讯云创建镜像</title>
    <link href="/2023/06/16/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/"/>
    <url>/2023/06/16/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<p>腾讯云是国内顶级的云服务商。在大型项目上环境配置和编译是很多人的噩梦，当然也包括我。腾讯云为我们提供了一种新方式打包云服务器镜像。</p><h2 id="创建">创建</h2><p>首先登陆腾讯云的账号，进入控制台界面</p><figure><img src="https://proxy.thisis.plus/202306162104428.png" alt="" /><figcaption>image.png</figcaption></figure><p>选择实例的的更多选项 <img src="https://proxy.thisis.plus/202306162106168.png" alt="image.png" /></p><p>选择制作镜像 <img src="https://proxy.thisis.plus/202306162107031.png" alt="image.png" /></p><p>在弹出的窗口填入镜像名称，标签和备注即可 <img src="https://proxy.thisis.plus/202306162108164.png" alt="image.png" /></p><p>选择制作镜像后就会进入制作界面，稍等片刻我们就可以看到制作的镜像了 <img src="https://proxy.thisis.plus/202306162111218.png" alt="image.png" /></p><h2 id="应用">应用</h2><p>想要使用创建好的实例也很简单，在左侧选择镜像 <img src="https://proxy.thisis.plus/202306162113093.png" alt="image.png" /></p><p>然后点击创建镜像即可 <img src="https://proxy.thisis.plus/202306162113912.png" alt="image.png" /></p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Arch下PicGo不能从剪切板上传图片</title>
    <link href="/2023/06/13/Arch%E4%B8%8BPicGo%E4%B8%8D%E8%83%BD%E4%BB%8E%E5%89%AA%E5%88%87%E6%9D%BF%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
    <url>/2023/06/13/Arch%E4%B8%8BPicGo%E4%B8%8D%E8%83%BD%E4%BB%8E%E5%89%AA%E5%88%87%E6%9D%BF%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>作为一个天天写博客的，PicGo简直是传图片的神器。最近把电脑升级成了Archlinux,不出意外的出问题了，Arch从剪切板上传图片爆了错</p><figure><img src="https://proxy.thisis.plus/202306162118377.png" alt="" /><figcaption>image.png</figcaption></figure><p>解决方法很简单啦，进入PicGo设置，打开最下面的使用内置剪贴板上传。 <img src="https://proxy.thisis.plus/202306162122805.png" alt="image.png" /></p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LoRA 笔记</title>
    <link href="/2023/06/13/LoRA%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/13/LoRA%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="lora-笔记">LoRA 笔记</h1><p>自然语言处理的一个重要范式包括对一般领域数据的大规模预训练和对特定任务或领域的适应。当我们预训练更大的模型时，重新训练所有模型参数的完整微调变得不那么可行。LoRA<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="LoRA: Low-Rank Adaptation of Large Language Models. (n.d.).">[1]</span></a></sup>冻结预训练模型权重并将可训练的秩分解矩阵注入到 Transformer 架构的每一层中，大大减少了下游任务的可训练参数的数量。与用 Adam 微调的 GPT-3 175B 相比，LoRA 可以将可训练参数的数量减少了 10,000 倍，GPU 内存需求减少了 3 倍。</p><h2 id="什么是low-rank">什么是low-rank</h2><p>首先需要明确一些什么什么是矩阵的秩，rank</p><p>在国内的本科线性代数课程中我们是这样定义矩阵的秩的</p><blockquote><p>设在矩阵<span class="math inline">\(A\)</span> 中有一个有一个不等于<span class="math inline">\(0\)</span> 的<span class="math inline">\(r\)</span> 阶子式<span class="math inline">\(D\)</span> ,且所有<span class="math inline">\(r+1\)</span> 阶子式(如果存在的话)都等于<span class="math inline">\(0\)</span> ，那么<span class="math inline">\(D\)</span> 称为矩阵<span class="math inline">\(A\)</span> 的最高阶非零子式，数<span class="math inline">\(r\)</span> 成为矩阵的秩，记为<span class="math inline">\(R(A)\)</span> 。并规定零矩阵的秩为0。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="_同济大学数学系工程数学-线性代数(第6版)笔记和课后习题(含考研真题)详解_. (2015).">[2]</span></a></sup></p></blockquote><p>怎么求矩阵的秩呢，很简单啦就是把一个矩阵化成RREF(课本上管这个叫行最简行矩阵)然后数一下每一行第一个非零元素所在列为单位向量的个数就可以了。</p><p>好的，发生了什么？好像并没有解释清楚秩到底是什么。</p><p>实际上啊，秩反映了矩阵里列向量线性相关的程度，意思就是你矩阵里的那几个向量能“支”出来几维，假如说我有一个矩阵里面有五个向量，但是他的矩阵秩是3,这就说明五个向量只能撑起一个3维空间，剩下两个向量可以被三个不能被互相表示的向量表示(课本上管这个叫线性相关和线性无关)，用李宏毅的话说就是这里有两个向量在"耍废"。</p><blockquote><p>推荐一下3Blue1Brown的视频https://www.bilibili.com/video/BV1ys411472E/?spm_id_from=333.999.0.0，线性代数讲的很清楚。</p></blockquote><p>该清楚了秩是什么，低秩是什么就很好理解了，就是有个矩阵他的秩很低，小于矩阵里面向量的个数(向量组线性相关/有向量在"耍废")。</p><p>你可能会想问，LoRA作为一个微调大语言模型和图文大模型的方法，关矩阵的秩什么事？在2020年，<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Aghajanyan, A., Gupta, S., &amp; Zettlemoyer, L. (2021). Intrinsic Dimensionality Explains the Effectiveness of Language Model Fine-Tuning. Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers). Presented at the Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers), Online. https://doi.org/10.18653/v1/2021.acl-long.568">[3]</span></a></sup> 指出大模型的训练实际发生在low-rank空间上的,所以说我们只需要构造一个低秩空间下的训练方法就可以了。</p><h2 id="为什么需要lora">为什么需要LoRA</h2><p>LoRA并不是第一个进行微调大模型的，从迁移学习开始有很多的尝试，以语言建模为例，在有效适应方面有两种突出的策略：添加适配器层或优化某种形式的输入层激活。然而，这两种策略都有其局限性，尤其是在大规模和延迟敏感的生产场景中。 ### 添加适配器层(引入推理延迟) 适配层(Adapter) 实际上就是在原本的架构上添加一些层，让他学到新的东西。例如<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="Houlsby, N., Giurgiu, A., Jastrzębski, S., Morrone, B., Laroussilhe, Q., Gesmundo, A., … Gelly, S. (2019). Parameter-Efficient Transfer Learning for NLP. International Conference on Machine Learning.">[4]</span></a></sup> <img src="https://proxy.thisis.plus/202306132022661.png" /> 左侧为每个 Transformer 层添加适配器模块两次：在多头注意力的投影和两个前馈层之后。右侧适配器由一个瓶颈组成，该瓶颈包含相对于原始模型中的注意力层和前馈层的参数很少。适配器还包含跳过连接。在适配器调整期间，绿色层在下游数据上进行训练，这包括适配器、层归一化参数和最终分类层（图中未显示）。</p><p>虽然可以通过修剪层或利用多任务设置来减少整体延迟，但没有直接的方法绕过适配器层中的额外计算。在单个 GPU 上对 GPT-2介质运行推理，我们看到在使用适配器时延迟显着增加，即使瓶颈维度非常小。</p><h3 id="优化某种形式的输入层激活很难进行">优化某种形式的输入层激活(很难进行)</h3><p>作者观察到前缀调整很难优化，并且它的性能在可训练参数中非单调地变化，证实了原始论文中的类似观察结果。更根本的是，保留序列长度的一部分进行适应必然会降低可用于处理下游任务的序列长度，所以作者怀疑与其他方法相比，调整提示的性能较低。</p><h2 id="lora到底怎么工作">LoRA到底怎么工作</h2><p>神经网络包含许多执行矩阵乘法的密集层。这些层中的权重矩阵通常具有满秩。对于预训练的权重矩阵 <span class="math inline">\(W_0 ∈ R^{d×k}\)</span>，我们通过使用低秩分解 <span class="math inline">\(W_0 + ΔW = W_0 + BA\)</span> 表示后者来约束其更新，其中 <span class="math inline">\(B ∈ R^{d×r} , A ∈ R^{r×k}\)</span>，秩<span class="math inline">\(r\)</span> 为 <span class="math inline">\(min(d, k)\)</span>。在训练期间，<span class="math inline">\(W_0\)</span> 被冻结并且不接收梯度更新，而 <span class="math inline">\(A\)</span> 和 <span class="math inline">\(B\)</span> 包含可训练的参数。注意 <span class="math inline">\(W_0\)</span> 和 <span class="math inline">\(ΔW = BA\)</span> 都乘以相同的输入，它们各自的输出向量按坐标求和。对于 <span class="math inline">\(h = W_0x\)</span>，我们修改后的前向传递产生：<span class="math display">\[h=W_0x+\Delta Wx=W_0x+BAx\]</span> 参数初始化时，我们对 A 使用随机高斯初始化，B 使用零，因此 ΔW = BA 在训练开始时为零。所以 <span class="math inline">\(\Delta W = BA\)</span> 在训练开始时为零.用<span class="math inline">\(\frac{\alpha}{r}\)</span> 缩放 <span class="math inline">\(ΔWx\)</span>，其中 <span class="math inline">\(\alpha\)</span> 是 <span class="math inline">\(r\)</span> 中的一个常数。在使用 Adam 进行优化时，如果我们适当地缩放初始化，调整 <span class="math inline">\(\alpha\)</span> 与调整学习率大致相同。因此，我们只需将 <span class="math inline">\(\alpha\)</span> 设置为我们尝试的第一个 r，而不对其进行调整。当我们改变时，这种缩放有助于减少重新调整超参数的需要</p><p>这种微调方式有两个好处</p><ol type="1"><li>完全泛化的微调方式</li><li>不会引入推理延迟</li></ol><p>在推理的时候，只需要把<span class="math inline">\(B\)</span>和<span class="math inline">\(A\)</span> 两个矩阵乘起来然后加回到原先的参数矩阵就完成了参数的更新</p><p><img src="https://proxy.thisis.plus/202306132038132.png" /></p><h2 id="参考文献">参考文献</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>LoRA: Low-Rank Adaptation of Large Language Models. (n.d.). <a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><em>同济大学数学系工程数学-线性代数(第6版)笔记和课后习题(含考研真题)详解</em>. (2015). <a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>Aghajanyan, A., Gupta, S., &amp; Zettlemoyer, L. (2021). Intrinsic Dimensionality Explains the Effectiveness of Language Model Fine-Tuning. Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers). Presented at the Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers), Online. https://doi.org/10.18653/v1/2021.acl-long.568 <a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>Houlsby, N., Giurgiu, A., Jastrzębski, S., Morrone, B., Laroussilhe, Q., Gesmundo, A., … Gelly, S. (2019). Parameter-Efficient Transfer Learning for NLP. International Conference on Machine Learning. <a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>文字生成图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Diffusers去除NSFW限制</title>
    <link href="/2023/06/11/Diffusers%E5%8E%BB%E9%99%A4NSFW%E9%99%90%E5%88%B6/"/>
    <url>/2023/06/11/Diffusers%E5%8E%BB%E9%99%A4NSFW%E9%99%90%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>众所周知，<del>涩涩是文字生成图片技术发展的重大推动力</del> . Huggingface的diffusers封装了大量的算法用于生成图片。但是，很不幸的，diffusers会检测生成的图片是否存在NSFW(<strong>not safe for work</strong>)的内容，<del>这就给我们涩涩带来了不必要的麻烦</del>。所以我将介绍如何去除限制</p><p>该方法来自网友，<a href="https://www.reddit.com/r/StableDiffusion/comments/wxba44/disable_hugging_face_nsfw_filter_in_three_step/">原链接</a></p><p>先给一段示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> StableDiffusionPipeline<br><span class="hljs-keyword">import</span> cv2 <span class="hljs-keyword">as</span> cv<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>pipe = StableDiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>)<br>new_image = pipe(prompt, num_inference_steps=<span class="hljs-number">20</span>).images[<span class="hljs-number">0</span>]<br>plt.save(<span class="hljs-string">&#x27;image.png&#x27;</span>,new_image)<br></code></pre></td></tr></table></figure><p>我们只需要设置<code>StableDiffusionPipeline</code> 这个类的<code>safety_checker</code>函数，更改之后的代码 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> StableDiffusionPipeline<br><span class="hljs-keyword">import</span> cv2 <span class="hljs-keyword">as</span> cv<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dummy</span>(<span class="hljs-params">images, **kwargs</span>): <br><span class="hljs-keyword">return</span> images, <span class="hljs-literal">False</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>pipe = StableDiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>)<br>pipe.safety_checker = dummy<br>new_image = pipe(prompt, num_inference_steps=<span class="hljs-number">20</span>).images[<span class="hljs-number">0</span>]<br>plt.save(<span class="hljs-string">&#x27;image.png&#x27;</span>,new_image)<br></code></pre></td></tr></table></figure></p><p>成功实现<del>涩涩自由</del></p>]]></content>
    
    
    
    <tags>
      
      <tag>文字生成图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>StableDiffusion笔记</title>
    <link href="/2023/05/29/StableDiffusion%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/05/29/StableDiffusion%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>Stable Diffusion 是一个图像生成方法，由 <em><a href="https://stability.ai/">Stability AI</a> and <a href="https://runwayml.com/">Runway</a></em> 在LDM<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Rombach, R., Blattmann, A., Lorenz, D., Esser, P., &amp; Ommer, B. (2022). High-Resolution Image Synthesis with Latent Diffusion Models. 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). Presented at the 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), New Orleans, LA, USA. https://doi.org/10.1109/cvpr52688.2022.01042">[1]</span></a></sup> 的基础上提出。在GitHub有很多他的实现和应用<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="CompVis. (n.d.). _GitHub - CompVis/stable-diffusion: A latent text-to-image diffusion model_. GitHub. Retrieved May 29, 2023, from https://github.com/CompVis/stable-diffusion">[2]</span></a></sup><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Stability-AI. (n.d.). _GitHub - Stability-AI/stablediffusion: High-Resolution image synthesis with latent diffusion models_. GitHub. Retrieved May 29, 2023, from https://github.com/Stability-AI/stablediffusion">[3]</span></a></sup><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="AUTOMATIC1111. (n.d.). _GitHub - AUTOMATIC1111/stable-diffusion-webui: Stable Diffusion web UI_. GitHub. Retrieved May 29, 2023, from https://github.com/automatic1111/stable-diffusion-webui">[4]</span></a></sup> ,其中<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="CompVis. (n.d.). _GitHub - CompVis/stable-diffusion: A latent text-to-image diffusion model_. GitHub. Retrieved May 29, 2023, from https://github.com/CompVis/stable-diffusion">[2]</span></a></sup> 是最早的实现版本，<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Stability-AI. (n.d.). _GitHub - Stability-AI/stablediffusion: High-Resolution image synthesis with latent diffusion models_. GitHub. Retrieved May 29, 2023, from https://github.com/Stability-AI/stablediffusion">[3]</span></a></sup> 是V2版本，由 Stability AI 完成。</p><h2 id="整体结构">整体结构</h2><pre><code class=" mermaid">flowchart TDsubgraph Input-noisyRandom-seed --&gt; latent-Gaussian-noise endsubgraph Input-promptprompt --&gt; TextEncoder --&gt; TextEmbaddingsendlatent-Gaussian-noise --&gt;Unet&#123;Unet-with-MultiAttention&#125;TextEmbaddings--&gt;UnetUnet --&gt; predict-noisy --sampling-steps--&gt;Unetpredict-noisy --&gt; Decoder --&gt; Image </code></pre><p>在一开始，StableDiffusion会通过一个随机数种子生成一张在隐空间下的随机噪声，同时通过一个文本编码器对输入的prompt进行编码，生成一个文本向量。随机噪声和文本向量会一块送入Unet，经过DDPM的步骤得到一张隐空间下的图片，通过一个解码器得到完整的图片。这里的Unet做出了改进，中间加入了交叉注意力机制。</p><h3 id="unet-with-multiattention">Unet-with-MultiAttention</h3><p><img src="https://miro.medium.com/v2/resize:fit:1100/format:webp/1*IRTbG2rYv0IUH8HHAxWRrQ.png" alt="Unet-with-MultiAttention 图源medium.com" /> 图中Switch用于在不同的输入之间调整。</p><ul><li>文本数据通过一个文本编码器(一般是CLIP的文本编码器)将文本转换为向量，投影到Unet上</li><li>图像，语义图，表示等直接送入Unet</li></ul><p>反向扩散过程中输入的文本向量和隐空间下的噪声图片需要经过 <span class="math inline">\(t\)</span>轮的Unet网络，每一轮预测一个噪声，噪声图减去这个噪声，得到的图片继续送入Unet进行下一轮</p><h2 id="参考文献">参考文献</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Rombach, R., Blattmann, A., Lorenz, D., Esser, P., &amp; Ommer, B. (2022). High-Resolution Image Synthesis with Latent Diffusion Models. 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). Presented at the 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), New Orleans, LA, USA. https://doi.org/10.1109/cvpr52688.2022.01042 <a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>CompVis. (n.d.). <em>GitHub - CompVis/stable-diffusion: A latent text-to-image diffusion model</em>. GitHub. Retrieved May 29, 2023, from https://github.com/CompVis/stable-diffusion <a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>Stability-AI. (n.d.). <em>GitHub - Stability-AI/stablediffusion: High-Resolution image synthesis with latent diffusion models</em>. GitHub. Retrieved May 29, 2023, from https://github.com/Stability-AI/stablediffusion <a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>AUTOMATIC1111. (n.d.). <em>GitHub - AUTOMATIC1111/stable-diffusion-webui: Stable Diffusion web UI</em>. GitHub. Retrieved May 29, 2023, from https://github.com/automatic1111/stable-diffusion-webui <a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>Steins. (2023, January 2). Stable diffusion clearly explained! - Steins. <em>Medium</em>. https://medium.com/<span class="citation" data-cites="steinsfu/stable-diffusion-clearly-explained-ed008044e07e"><span class="citation" data-cites="steinsfu/stable-diffusion-clearly-explained-ed008044e07e">@steinsfu/stable-diffusion-clearly-explained-ed008044e07e</span></span> <a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文字生成图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>huggingface 和相关库</title>
    <link href="/2023/05/09/huggingface%E5%92%8C%E7%9B%B8%E5%85%B3%E5%BA%93/"/>
    <url>/2023/05/09/huggingface%E5%92%8C%E7%9B%B8%E5%85%B3%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="huggingface-和相关库">huggingface 和相关库</h1><h2 id="huggingface">huggingface</h2><p><a href="https://huggingface.co/">Hugging Face</a>是一个专注于自然语言处理（NLP）的开源平台，它旨在让NLP变得更加易用和普及。Hugging Face推出了多个库，例如Transformers，Datasets，Tokenizers和Accelerate，它们分别提供了预训练的模型，大规模的数据集，高效的分词器和分布式训练的工具。Hugging Face还拥有一个活跃的社区，其中有数千名研究人员，开发者和爱好者共同交流和贡献NLP的最新进展。 <img src="https://proxy.thisis.plus/202305092233241.png" alt="image.png" /></p><p>Hugging Face的名字来源于一个可爱的表情符号，它代表了平台的愿景：让人类和机器之间的交流更加自然和亲密。Hugging Face的核心产品是Transformers库，它包含了超过10000个预训练的模型，涵盖了各种NLP任务，如文本分类，问答，文本生成，情感分析等。Transformers库支持多种深度学习框架，如PyTorch，TensorFlow，JAX和Flax，并且可以轻松地在不同的设备上运行，如CPU，GPU和TPU。Hugging Face还提供了一个在线平台，Spaces，它可以让用户快速地部署和分享他们的模型和应用。 <img src="https://proxy.thisis.plus/202305092235498.png" alt="image.png" /></p><p>近年来，Hugging Face托管的模型已经不局限于NLP领域，而是涉及到了更多的领域，如计算机视觉（CV），语音识别（ASR），音乐生成（MG）等。这些模型都可以在Hugging Face的网站上找到，并且可以通过Transformers库或者其他的库来使用。Hugging Face还提供了一个数据集库，叫做Datasets，它包含了超过1000个数据集，覆盖了各种领域和语言。Datasets库可以帮助用户快速地加载，处理和缓存数据，以及进行数据分析和可视化。</p><h2 id="accelerate">Accelerate</h2><p>Accelerate 是一个可以让训练变得更加简单的库，它可以通过几行代码来在分布式设备上运行相同的pytorch代码</p><p>可以通过pypi 和 conda安装 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install accelerate<br>conda install -c conda-forge accelerate<br></code></pre></td></tr></table></figure></p><p>你可能会遇到这种报错 <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-symbol">WARNING: </span>The scripts accelerate, accelerate-config and accelerate-launch are installed in <span class="hljs-emphasis">&#x27;/home/ubuntu/.local/bin&#x27;</span> which is not on PATH.  <br>Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.  <br><span class="hljs-symbol">WARNING: </span>The script transformers-cli is installed in <span class="hljs-emphasis">&#x27;/home/ubuntu/.local/bin&#x27;</span> which is not on PATH.  <br>Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.  <br><span class="hljs-symbol">WARNING: </span>The script ftfy is installed in <span class="hljs-emphasis">&#x27;/home/ubuntu/.local/bin&#x27;</span> which is not on PATH.  <br>Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.  <br><span class="hljs-symbol">WARNING: </span>The script tensorboard is installed in <span class="hljs-emphasis">&#x27;/home/ubuntu/.local/bin&#x27;</span> which is not on PATH.  <br>Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.  <br><span class="hljs-symbol">WARNING: </span>The script datasets-cli is installed in <span class="hljs-emphasis">&#x27;/home/ubuntu/.local/bin&#x27;</span> which is not on PATH.  <br>Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.<br></code></pre></td></tr></table></figure></p><p>这里的依赖已经安装成功了，只是被安装到了未被添加到PATH的目录，接下来运行的时候只需要指明目录即可。例如下面我们要使用accelerate，正常的用法是 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">accelerate 你要执行的东西<br></code></pre></td></tr></table></figure> 我们只需要改成 <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/home/u</span>buntu<span class="hljs-regexp">/.local/</span>bin/accelerate 你要执行的东西<br></code></pre></td></tr></table></figure></p><p>通过<code>accelerate config</code> 命令可以配置当前文件夹启用。(如果啥都不知道就全部选No)</p><h2 id="transformers">Transformers</h2><p><a href="https://huggingface.co/docs/transformers/index">Transformers</a> 收集了所有的SOTA的NLP研究方法，并提供了对应的预训练模型和接口。Transformers 支持 PyTorch、TensorFlow 和 JAX 之间的框架互操作性。这提供了在模型生命周期的每个阶段使用不同框架的灵活性；在一个框架中用三行代码训练一个模型，然后将其加载到另一个框架中进行推理。模型还可以导出为 ONNX 和 TorchScript 等格式，以便在生产环境中部署。</p><p>安装非常简单 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install <span class="hljs-string">&#x27;transformers[torch]&#x27;</span><br></code></pre></td></tr></table></figure> 这回安装torch对应的api，当然也可以安装完整版 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install <span class="hljs-string">&#x27;transformers&#x27;</span> <br></code></pre></td></tr></table></figure></p><p>21年冬天在家上网课的时候，我看到了这样的一个教程<a href="https://zhuanlan.zhihu.com/p/421642560">这篇文章是我用AI生成出来的</a> ,他就是使用了transformers 库构建了一个生成式语言模型。</p><h2 id="diffusers">Diffusers</h2><p><a href="https://huggingface.co/docs/diffusers/index">Diffusers</a> 收集了所有SOTA的扩散模型，用于生成图像、音频，甚至分子的 3D 结构。diffusers提供了扩散模型的完整pipeline ，包括DDPM，DDIM，stable_diffusion_2，VAE，controlnet等等，可以使用简单的几行代码完成推理。</p><p>安装和上面一样 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install diffusers[<span class="hljs-string">&quot;torch&quot;</span>]<br></code></pre></td></tr></table></figure> 或者 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install diffusers <br></code></pre></td></tr></table></figure></p><h3 id="pipeline">pipeline</h3><p>pipeline 是diffusers 甚至huggingface各个库的一个重要概念，他封装了各个模型加载权重，构建网络结构，推理和训练的全部过程。</p><p>这里以stable diffusion 1.5为例，首先创建pipeline，并指明stable diffusion 的版本 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> DiffusionPipeline<br><br>model_id = <span class="hljs-string">&quot;runwayml/stable-diffusion-v1-5&quot;</span><br>pipeline = DiffusionPipeline.from_pretrained(model_id)<br></code></pre></td></tr></table></figure></p><p>接下来给出提示(prompt) <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">prompt = <span class="hljs-string">&quot;portrait photo of a old warrior chief&quot;</span><br></code></pre></td></tr></table></figure></p><p>为了加速推理，我们可以把数据放到gpu上 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pipeline = pipeline.to(<span class="hljs-string">&quot;cuda&quot;</span>)<br></code></pre></td></tr></table></figure></p><p>设置生成器，并生成图像 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">generator = torch.Generator(<span class="hljs-string">&quot;cuda&quot;</span>).manual_seed(<span class="hljs-number">0</span>)<br>image = pipeline(prompt, generator=generator).images[<span class="hljs-number">0</span>]<br>image<br></code></pre></td></tr></table></figure></p><p>当然，huggingface推荐我们在float16上做推理 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br>pipeline = DiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)<br>pipeline = pipeline.to(<span class="hljs-string">&quot;cuda&quot;</span>)<br>generator = torch.Generator(<span class="hljs-string">&quot;cuda&quot;</span>).manual_seed(<span class="hljs-number">0</span>)<br>image = pipeline(prompt, generator=generator).images[<span class="hljs-number">0</span>]<br>image<br></code></pre></td></tr></table></figure></p><h3 id="lora">LoRA</h3><p><a href="https://arxiv.org/abs/2106.09685">Low-Rank Adaptation of Large Language Models (LoRA)</a>是一种训练方法，可以加速大型模型的训练，同时消耗更少的内存，最有用的例子莫过于生成人脸了。Diffusers 现在支持使用 LoRA 进行<a href="https://github.com/huggingface/diffusers/tree/main/examples/text_to_image#training-with-lora">文本到图像生成</a>和<a href="https://github.com/huggingface/diffusers/tree/main/examples/dreambooth#training-with-low-rank-adaptation-of-large-language-models-lora">DreamBooth</a>微调。</p><p><a href="https://arxiv.org/abs/2208.12242">DreamBooth</a>是Google提出的微调技术，用于个性化文本到图像模型（如 Stable Diffusion），可以以在给定几张主题图像的情况下生成不同背景下主题的逼真图像。</p><p>在<a href="https://github.com/huggingface/diffusers/blob/main/examples/text_to_image/train_text_to_image_lora.py">这里</a> 你可以找到完整的代码，在<a href="https://drive.google.com/drive/folders/1BO_dyz-p65qhBRRMRA4TbZ8qW4rB99JZ">Google Drive</a> 下载完整的图像用于训练</p><p>先设置基本信息，分别是模型名，示例图片和模型输出文件夹 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> MODEL_NAME=<span class="hljs-string">&quot;runwayml/stable-diffusion-v1-5&quot;</span><br><span class="hljs-built_in">export</span> INSTANCE_DIR=<span class="hljs-string">&quot;path-to-instance-images&quot;</span><br><span class="hljs-built_in">export</span> OUTPUT_DIR=<span class="hljs-string">&quot;path-to-save-model&quot;</span><br></code></pre></td></tr></table></figure></p><p>接下来运行代码 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">accelerate launch train_dreambooth_lora.py \<br>  --pretrained_model_name_or_path=<span class="hljs-variable">$MODEL_NAME</span>  \<br>  --instance_data_dir=<span class="hljs-variable">$INSTANCE_DIR</span> \<br>  --output_dir=<span class="hljs-variable">$OUTPUT_DIR</span> \<br>  --instance_prompt=<span class="hljs-string">&quot;a photo of sks dog&quot;</span> \<br>  --resolution=512 \<br>  --train_batch_size=1 \<br>  --gradient_accumulation_steps=1 \<br>  --checkpointing_steps=100 \<br>  --learning_rate=1e-4 \<br>  --report_to=<span class="hljs-string">&quot;wandb&quot;</span> \<br>  --lr_scheduler=<span class="hljs-string">&quot;constant&quot;</span> \<br>  --lr_warmup_steps=0 \<br>  --max_train_steps=500 \<br>  --validation_prompt=<span class="hljs-string">&quot;A photo of sks dog in a bucket&quot;</span> \<br>  --validation_epochs=50 \<br>  --seed=<span class="hljs-string">&quot;0&quot;</span> \<br>  --push_to_hub<br></code></pre></td></tr></table></figure></p><p>推理也是使用起来很简单的 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> StableDiffusionPipeline<br><br>pipe.unet.load_attn_procs(lora_model_path)<br>pipe.to(<span class="hljs-string">&quot;cuda&quot;</span>)<br><br>image = pipe(<span class="hljs-string">&quot;A picture of a sks dog in a bucket.&quot;</span>, num_inference_steps=<span class="hljs-number">25</span>, guidance_scale=<span class="hljs-number">7.5</span>).images[<span class="hljs-number">0</span>]<br>image.save(<span class="hljs-string">&quot;bucket-dog.png&quot;</span>)<br></code></pre></td></tr></table></figure></p><h3 id="controlnet">[[ControlNet]]</h3><p>可以看之前的文章<a href="https://studyinglover.com/2023/04/27/ControlNet%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E6%95%B0%E6%8D%AE%E9%9B%86/">ControlNet训练自己数据集</a></p><h2 id="gradio">Gradio</h2><p>gradio 是一个可以快速构建交互式网页的工具，Webui就是用它做出来的，使用他的核心代码就是 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">demo = gradio.Interface(fn, inputs, outputs, ···)<br>demo.launch()<br></code></pre></td></tr></table></figure> 传入一个函数和参数，获取返回值</p><p>剩下的就是你写好fn，设计一个好看的界面，然后launch就可以了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>文字生成图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Multidiffusion代码分析</title>
    <link href="/2023/05/09/multidiffusion%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2023/05/09/multidiffusion%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="multidiffusion代码分析">Multidiffusion代码分析</h1><h2 id="前言">前言</h2><p>当我们使用计算机生成图像时，经常会遇到一些困难，例如如何生成高质量、高分辨率的图像，如何控制图像的风格和内容等。近年来，深度学习技术在图像生成领域取得了很大的进展，其中一种流行的方法是使用变分自编码器（VAE）和生成对抗网络（GAN）等模型。然而，这些方法通常需要大量的训练数据和计算资源，而且生成的图像可能会出现一些问题，例如模糊、失真和不连续等。</p><p>为了解决这些问题，一些研究人员提出了一种新的合成全景图的方法，称为MultiDiffusion。该方法使用了一种多步推理的策略，将全景图像的生成过程分解成多个步骤，并在每个步骤中对潜变量向量进行微调，从而生成高质量、高分辨率的全景图像。MultiDiffusion方法不需要大量的训练数据和计算资源，而且能够生成具有良好视觉效果的全景图像。本文将介绍MultiDiffusion方法的实现细节，并提供相应的代码和解释。(chatgpt写的，大家凑活着看)</p><p><a href="https://multidiffusion.github.io/">官方主页</a> <a href="https://github.com/omerbt/MultiDiffusion">代码</a> <a href="https://huggingface.co/spaces/weizmannscience/MultiDiffusion">在线体验</a></p><h2 id="分析">分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> CLIPTextModel, CLIPTokenizer, logging<br><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> AutoencoderKL, UNet2DConditionModel, DDIMScheduler<br><span class="hljs-comment"># suppress partial model loading warning</span><br>logging.set_verbosity_error()<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torchvision.transforms <span class="hljs-keyword">as</span> T<br><span class="hljs-keyword">import</span> argparse<br></code></pre></td></tr></table></figure><p>这里导入了所有的库，包括huggingface推出的transformers 和 diffusers。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">seed_everything</span>(<span class="hljs-params">seed</span>):<br>    torch.manual_seed(seed)<br>    torch.cuda.manual_seed(seed)<br>    <span class="hljs-comment"># torch.backends.cudnn.deterministic = True</span><br>    <span class="hljs-comment"># torch.backends.cudnn.benchmark = True</span><br></code></pre></td></tr></table></figure><p>常规操作，设置随机数，实际上还有另一种写法<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="关注 R. 却没能成为自己​. (n.d.). _pytorch如何确保 可重复性/每次训练结果相同(固定了随机种子，为什么还不行)？_. 知乎. Retrieved May 9, 2023, from http://zhihu.com/question/345043149/answer/2940838756">[1]</span></a></sup> . 这里是设置了torch 在CPU 和 GPU 的随机数 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">seed_torch</span>(<span class="hljs-params">seed=<span class="hljs-number">1029</span></span>):<br>    random.seed(seed)   <span class="hljs-comment"># Python的随机性</span><br>    os.environ[<span class="hljs-string">&#x27;PYTHONHASHSEED&#x27;</span>] = <span class="hljs-built_in">str</span>(seed)    <span class="hljs-comment"># 设置Python哈希种子，为了禁止hash随机化，使得实验可复现</span><br>    np.random.seed(seed)   <span class="hljs-comment"># numpy的随机性</span><br>    torch.manual_seed(seed)   <span class="hljs-comment"># torch的CPU随机性，为CPU设置随机种子</span><br>    torch.cuda.manual_seed(seed)   <span class="hljs-comment"># torch的GPU随机性，为当前GPU设置随机种子</span><br>    torch.cuda.manual_seed_all(seed)  <span class="hljs-comment"># if you are using multi-GPU.   torch的GPU随机性，为所有GPU设置随机种子</span><br>    torch.backends.cudnn.benchmark = <span class="hljs-literal">False</span>   <span class="hljs-comment"># if benchmark=True, deterministic will be False</span><br>    torch.backends.cudnn.deterministic = <span class="hljs-literal">True</span>   <span class="hljs-comment"># 选择确定性算法</span><br></code></pre></td></tr></table></figure> 事实上，涉及到一些类似upsample 的层，因为原子加操作带来的浮点误差，永远也对不齐。 <code>a + b） + c != a + (b + c)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_views</span>(<span class="hljs-params">panorama_height, panorama_width, window_size=<span class="hljs-number">64</span>, stride=<span class="hljs-number">8</span></span>):<br>    panorama_height /= <span class="hljs-number">8</span><br>    panorama_width /= <span class="hljs-number">8</span><br>    num_blocks_height = (panorama_height - window_size) // stride + <span class="hljs-number">1</span><br>    num_blocks_width = (panorama_width - window_size) // stride + <span class="hljs-number">1</span><br>    total_num_blocks = <span class="hljs-built_in">int</span>(num_blocks_height * num_blocks_width)<br>    views = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(total_num_blocks):<br>        h_start = <span class="hljs-built_in">int</span>((i // num_blocks_width) * stride)<br>        h_end = h_start + window_size<br>        w_start = <span class="hljs-built_in">int</span>((i % num_blocks_width) * stride)<br>        w_end = w_start + window_size<br>        views.append((h_start, h_end, w_start, w_end))<br>    <span class="hljs-keyword">return</span> views<br></code></pre></td></tr></table></figure><p>这段代码的作用是将一个全景图像分成多个小块，每个块的大小为<span class="math inline">\(window_{size} * window_{size}\)</span>，步长为<span class="math inline">\(stride\)</span>，返回每个小块的位置信息。</p><p>下面类定义了整个multidiffusion的所有操作 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-variable language_">self</span>.device = device<br><span class="hljs-variable language_">self</span>.sd_version = sd_version<br></code></pre></td></tr></table></figure> 定义了设备(CPU/GPU)和stable diffusion的版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[INFO] loading stable diffusion...&#x27;</span>)<br><br><span class="hljs-keyword">if</span> hf_key <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[INFO] using hugging face custom model key: <span class="hljs-subst">&#123;hf_key&#125;</span>&#x27;</span>)<br>model_key = hf_key<br><span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.sd_version == <span class="hljs-string">&#x27;2.1&#x27;</span>:<br>model_key = <span class="hljs-string">&quot;stabilityai/stable-diffusion-2-1-base&quot;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.sd_version == <span class="hljs-string">&#x27;2.0&#x27;</span>:<br>model_key = <span class="hljs-string">&quot;stabilityai/stable-diffusion-2-base&quot;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.sd_version == <span class="hljs-string">&#x27;1.5&#x27;</span>:<br>model_key = <span class="hljs-string">&quot;runwayml/stable-diffusion-v1-5&quot;</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&#x27;Stable-diffusion version <span class="hljs-subst">&#123;self.sd_version&#125;</span> not supported.&#x27;</span>)<br></code></pre></td></tr></table></figure><p>加载了stable diffusion的版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Create model</span><br><span class="hljs-variable language_">self</span>.vae = AutoencoderKL.from_pretrained(model_key, subfolder=<span class="hljs-string">&quot;vae&quot;</span>).to(<span class="hljs-variable language_">self</span>.device)<br><span class="hljs-variable language_">self</span>.tokenizer = CLIPTokenizer.from_pretrained(model_key, subfolder=<span class="hljs-string">&quot;tokenizer&quot;</span>)<br><span class="hljs-variable language_">self</span>.text_encoder = CLIPTextModel.from_pretrained(model_key, subfolder=<span class="hljs-string">&quot;text_encoder&quot;</span>).to(<span class="hljs-variable language_">self</span>.device)<br><span class="hljs-variable language_">self</span>.unet = UNet2DConditionModel.from_pretrained(model_key, subfolder=<span class="hljs-string">&quot;unet&quot;</span>).to(<span class="hljs-variable language_">self</span>.device)<br><span class="hljs-variable language_">self</span>.scheduler = DDIMScheduler.from_pretrained(model_key, subfolder=<span class="hljs-string">&quot;scheduler&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[INFO] loaded stable diffusion!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这里是从预训练模型加载并创建模型，分别加载了VAE，tokenizer，text_encoder</p><table><thead><tr class="header"><th>模型</th><th>内容</th></tr></thead><tbody><tr class="odd"><td>VAE</td><td>变分自动编码器</td></tr><tr class="even"><td>tokenizer</td><td>分词器,负责将一句话分割成一个一个词，这里是CLIPTokenizer</td></tr><tr class="odd"><td>text_encoder</td><td>文本编码器</td></tr><tr class="even"><td>UNet2DConditionModel</td><td>Unet，负责重建和预测</td></tr><tr class="odd"><td>DDIMScheduler</td><td>DDIM采样器</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_text_embeds</span>(<span class="hljs-params">self, prompt, negative_prompt</span>):<br><span class="hljs-comment"># prompt, negative_prompt: [str]</span><br><span class="hljs-comment"># Tokenize text and get embeddings</span><br>text_input = <span class="hljs-variable language_">self</span>.tokenizer(prompt, padding=<span class="hljs-string">&#x27;max_length&#x27;</span>, max_length=<span class="hljs-variable language_">self</span>.tokenizer.model_max_length,<br>truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)<br>text_embeddings = <span class="hljs-variable language_">self</span>.text_encoder(text_input.input_ids.to(<span class="hljs-variable language_">self</span>.device))[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># Do the same for unconditional embeddings</span><br>uncond_input = <span class="hljs-variable language_">self</span>.tokenizer(negative_prompt, padding=<span class="hljs-string">&#x27;max_length&#x27;</span>, max_length=<span class="hljs-variable language_">self</span>.tokenizer.model_max_length, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)<br>uncond_embeddings = <span class="hljs-variable language_">self</span>.text_encoder(uncond_input.input_ids.to(<span class="hljs-variable language_">self</span>.device))[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># Cat for final embeddings</span><br>text_embeddings = torch.cat([uncond_embeddings, text_embeddings])<br><span class="hljs-keyword">return</span> text_embeddings<br></code></pre></td></tr></table></figure><p>这里是将提示(prompt) 转换成了text_embeddings、</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_latents</span>(<span class="hljs-params">self, latents</span>):<br>        latents = <span class="hljs-number">1</span> / <span class="hljs-number">0.18215</span> * latents<br>        imgs = <span class="hljs-variable language_">self</span>.vae.decode(latents).sample<br>        imgs = (imgs / <span class="hljs-number">2</span> + <span class="hljs-number">0.5</span>).clamp(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> imgs<br></code></pre></td></tr></table></figure><p>这段代码作用是将一个向量从latent space 解码成一个图像。</p><p>它接收一个潜变量向量集合作为输入，并使用变分自编码器（VAE）将其解码成图像。他将输入的潜变量向量集合除以0.18215进行缩放(魔数，不知原因)，然后调用VAE的decode方法来生成一组图像同时使用sample方法产生一些随机性，从而增加输出图像的多样性。最后缩放到<span class="math inline">\([0,1]\)</span> 范围内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">text2panorama</span>(<span class="hljs-params">self, prompts, negative_prompts=<span class="hljs-string">&#x27;&#x27;</span>, height=<span class="hljs-number">512</span>, width=<span class="hljs-number">2048</span>, num_inference_steps=<span class="hljs-number">50</span>, guidance_scale=<span class="hljs-number">7.5</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(prompts, <span class="hljs-built_in">str</span>):<br>            prompts = [prompts]<br>  <br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(negative_prompts, <span class="hljs-built_in">str</span>):<br>            negative_prompts = [negative_prompts]<br>  <br>        <span class="hljs-comment"># Prompts -&gt; text embeds</span><br>        text_embeds = <span class="hljs-variable language_">self</span>.get_text_embeds(prompts, negative_prompts)  <span class="hljs-comment"># [2, 77, 768]</span><br>  <br>        <span class="hljs-comment"># Define panorama grid and get views</span><br>        latent = torch.randn((<span class="hljs-number">1</span>, <span class="hljs-variable language_">self</span>.unet.in_channels, height // <span class="hljs-number">8</span>, width // <span class="hljs-number">8</span>), device=<span class="hljs-variable language_">self</span>.device)<br>        views = get_views(height, width)<br>        count = torch.zeros_like(latent)<br>        value = torch.zeros_like(latent)<br>  <br>        <span class="hljs-variable language_">self</span>.scheduler.set_timesteps(num_inference_steps)<br>  <br>        <span class="hljs-keyword">with</span> torch.autocast(<span class="hljs-string">&#x27;cuda&#x27;</span>):<br>            <span class="hljs-keyword">for</span> i, t <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-variable language_">self</span>.scheduler.timesteps):<br>                count.zero_()<br>                value.zero_()<br>  <br>                <span class="hljs-keyword">for</span> h_start, h_end, w_start, w_end <span class="hljs-keyword">in</span> views:<br>                    <span class="hljs-comment"># TODO we can support batches, and pass multiple views at once to the unet</span><br>                    latent_view = latent[:, :, h_start:h_end, w_start:w_end]<br>  <br>                    <span class="hljs-comment"># expand the latents if we are doing classifier-free guidance to avoid doing two forward passes.</span><br>                    latent_model_input = torch.cat([latent_view] * <span class="hljs-number">2</span>)<br>  <br>                    <span class="hljs-comment"># predict the noise residual</span><br>                    noise_pred = <span class="hljs-variable language_">self</span>.unet(latent_model_input, t, encoder_hidden_states=text_embeds)[<span class="hljs-string">&#x27;sample&#x27;</span>]<br>  <br>                    <span class="hljs-comment"># perform guidance</span><br>                    noise_pred_uncond, noise_pred_cond = noise_pred.chunk(<span class="hljs-number">2</span>)<br>                    noise_pred = noise_pred_uncond + guidance_scale * (noise_pred_cond - noise_pred_uncond)<br>  <br>                    <span class="hljs-comment"># compute the denoising step with the reference model</span><br>                    latents_view_denoised = <span class="hljs-variable language_">self</span>.scheduler.step(noise_pred, t, latent_view)[<span class="hljs-string">&#x27;prev_sample&#x27;</span>]<br>                    value[:, :, h_start:h_end, w_start:w_end] += latents_view_denoised<br>                    count[:, :, h_start:h_end, w_start:w_end] += <span class="hljs-number">1</span><br>  <br>                <span class="hljs-comment"># take the MultiDiffusion step</span><br>                latent = torch.where(count &gt; <span class="hljs-number">0</span>, value / count, value)<br>  <br>        <span class="hljs-comment"># Img latents -&gt; imgs</span><br>        imgs = <span class="hljs-variable language_">self</span>.decode_latents(latent)  <span class="hljs-comment"># [1, 3, 512, 512]</span><br>        img = T.ToPILImage()(imgs[<span class="hljs-number">0</span>].cpu())<br>        <span class="hljs-keyword">return</span> img<br></code></pre></td></tr></table></figure><p>作用是根据给定的文本提示(prompts)，将其合成成全景图像。它接收一组提示(prompt)作为输入，将其转换为列表类型。然后，定义全景图像的网格，并获取一个一个图像。接下来，使用随机噪声向量作为输入，通过多步推理生成全景图像的潜变量向量。在推理过程中，使用UNet模型对潜变量向量进行多步推理，并根据提示进行引导，生成不同的全景图像，最后横向拼接所有图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    parser = argparse.ArgumentParser()<br>    parser.add_argument(<span class="hljs-string">&#x27;--prompt&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;a photo of the dolomites&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--negative&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--sd_version&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;2.0&#x27;</span>, choices=[<span class="hljs-string">&#x27;1.5&#x27;</span>, <span class="hljs-string">&#x27;2.0&#x27;</span>],                       <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;stable diffusion version&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--H&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, default=<span class="hljs-number">512</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--W&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, default=<span class="hljs-number">4096</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--seed&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, default=<span class="hljs-number">0</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--steps&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, default=<span class="hljs-number">50</span>)<br>    opt = parser.parse_args()<br>    seed_everything(opt.seed)<br>  <br>    device = torch.device(<span class="hljs-string">&#x27;cuda&#x27;</span>)<br>  <br>    sd = MultiDiffusion(device, opt.sd_version)<br><br>    img = sd.text2panorama(opt.prompt, opt.negative, opt.H, opt.W, opt.steps)<br>  <br>    <span class="hljs-comment"># save image</span><br>    img.save(<span class="hljs-string">&#x27;out.png&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这个是从命令行启动的方式，按照argparse的使用方法使用</p><table><thead><tr class="header"><th>参数</th><th>含义</th></tr></thead><tbody><tr class="odd"><td>prompt</td><td>提示</td></tr><tr class="even"><td>negative</td><td>反面提示</td></tr><tr class="odd"><td>sd_version</td><td>stable diffusion的版本</td></tr><tr class="even"><td>H</td><td>图像的高度</td></tr><tr class="odd"><td>W</td><td>图像的宽度</td></tr><tr class="even"><td>seed</td><td>随机数种子</td></tr><tr class="odd"><td>steps</td><td>采样步数</td></tr></tbody></table><p>最后的结果会保存为out.png</p><h2 id="参考文献">参考文献</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>关注 R. 却没能成为自己​. (n.d.). <em>pytorch如何确保 可重复性/每次训练结果相同(固定了随机种子，为什么还不行)？</em>. 知乎. Retrieved May 9, 2023, from http://zhihu.com/question/345043149/answer/2940838756 <a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>文字生成图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MXnet-arcface数据集准备</title>
    <link href="/2023/05/08/MXnet-arcface%E6%95%B0%E6%8D%AE%E9%9B%86%E5%87%86%E5%A4%87/"/>
    <url>/2023/05/08/MXnet-arcface%E6%95%B0%E6%8D%AE%E9%9B%86%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<p>众所周知，mxnet是一个沐神主导开发的一个深度学习框架，之前听李沐的讲论文时也听他说过很多次，但是已知没有机会使用，最近接触了一个项目，有机会感受了一些mxnet，但是也踩了很多坑。所有需要的脚本文件可以在<a href="https://github.com/StudyingLover/menet-Arcface-tools">https://github.com/StudyingLover/menet-Arcface-tools</a>下载</p><figure><img src="https://proxy.thisis.plus/202305082129080.png" alt="" /><figcaption>image.png</figcaption></figure><p>mxnet 的数据与别处的是不同的，他的训练集是两个文件，分别以<code>.idx</code> 和 <code>.rec</code> 结尾， 测试集是以<code>.bin</code> 结尾的一个二进制文件。</p><h3 id="创建lstidxrec">创建lst,idx,rec</h3><p>我们需要按照特定方式放置图片,首先创建一个大的文件夹，里面创建一个个子文件夹，每个文件夹放置相同类别的图片 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs stylus">/image_folder<br>├── <span class="hljs-number">0</span>_0_0000000<br>│   ├── <span class="hljs-number">0</span>_0<span class="hljs-selector-class">.jpg</span><br>│   ├── <span class="hljs-number">0</span>_1<span class="hljs-selector-class">.jpg</span><br>│   ├── <span class="hljs-number">0</span>_2<span class="hljs-selector-class">.jpg</span><br>│   ├── <span class="hljs-number">0</span>_3<span class="hljs-selector-class">.jpg</span><br>│   └── <span class="hljs-number">0</span>_4<span class="hljs-selector-class">.jpg</span><br>├── <span class="hljs-number">0</span>_0_0000001<br>│   ├── <span class="hljs-number">0</span>_5<span class="hljs-selector-class">.jpg</span><br>│   ├── <span class="hljs-number">0</span>_6<span class="hljs-selector-class">.jpg</span><br>│   ├── <span class="hljs-number">0</span>_7<span class="hljs-selector-class">.jpg</span><br>│   ├── <span class="hljs-number">0</span>_8<span class="hljs-selector-class">.jpg</span><br>│   └── <span class="hljs-number">0</span>_9<span class="hljs-selector-class">.jpg</span><br>├── <span class="hljs-number">0</span>_0_0000002<br>│   ├── <span class="hljs-number">0</span>_10<span class="hljs-selector-class">.jpg</span><br>│   ├── <span class="hljs-number">0</span>_11<span class="hljs-selector-class">.jpg</span><br>│   ├── <span class="hljs-number">0</span>_12<span class="hljs-selector-class">.jpg</span><br>│   ├── <span class="hljs-number">0</span>_13<span class="hljs-selector-class">.jpg</span><br>│   ├── <span class="hljs-number">0</span>_14<span class="hljs-selector-class">.jpg</span><br>│   ├── <span class="hljs-number">0</span>_15<span class="hljs-selector-class">.jpg</span><br>│   ├── <span class="hljs-number">0</span>_16<span class="hljs-selector-class">.jpg</span><br>│   └── <span class="hljs-number">0</span>_17<span class="hljs-selector-class">.jpg</span><br>├── <span class="hljs-number">0</span>_0_0000003<br>│   ├── <span class="hljs-number">0</span>_18<span class="hljs-selector-class">.jpg</span><br>│   ├── <span class="hljs-number">0</span>_19<span class="hljs-selector-class">.jpg</span><br>│   └── <span class="hljs-number">0</span>_20<span class="hljs-selector-class">.jpg</span><br>├── <span class="hljs-number">0</span>_0_0000004<br><br></code></pre></td></tr></table></figure></p><p>接下来先生成一个<code>.lst</code> 文件，这个文件包含了所有的文件,训练集和测试集按照8：2划分 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m mxnet.tools.im2rec --list --recursive train 图片文件夹 –test-ratio 0.8<br></code></pre></td></tr></table></figure></p><p>这段代码会生成两个文件夹<code>train_train.lst</code> 和<code>train_test.lst</code></p><h3 id="生成训练集文件">生成训练集文件</h3><p>接下来生成训练集文件 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m mxnet.tools.im2rec train_train.lst --quality 100 图片文件夹<br></code></pre></td></tr></table></figure></p><p>需要给生成的文件改个名字 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> train_train.idx train.idx<br><span class="hljs-built_in">mv</span> train_train.rec train.rec<br></code></pre></td></tr></table></figure></p><p>下面创建property配置文件 <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">训练集图片数量 图片大小 图片大小<br></code></pre></td></tr></table></figure></p><p>例如 <figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10000 </span><span class="hljs-number">112</span> <span class="hljs-number">112</span><br></code></pre></td></tr></table></figure></p><h3 id="创建pair文件">创建pair文件</h3><p>这一步多少有点奇怪，pair文件里面的结构是 <figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">im<span class="hljs-name">g1</span>_path im<span class="hljs-name">g2</span>_path <span class="hljs-number">0</span><br>im<span class="hljs-name">g3</span>_path im<span class="hljs-name">g4</span>_path <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure> 生成方式也很简单啦，运行 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 generate_image_pairs.py --data-dir 图片文件夹路径 --outputtxt train.txt --num-samepairs 3000<br></code></pre></td></tr></table></figure> <code>num-samepairs</code> 是个魔数，看心情写吧，这里我为了大量生成，我又写了个脚本，重复执行 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python repeat_cmd.py<br>python detele_empty.py<br><span class="hljs-built_in">cp</span> train.txt 图片文件夹<br></code></pre></td></tr></table></figure></p><h3 id="生成验证集bin">生成验证集bin</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python lfw2pack.py --data-dir 图片文件夹 --output test.bin --num-samepairs 300<br></code></pre></td></tr></table></figure><p>ok就这样，我们生成了需要的<code>train.idx</code> <code>train.rec</code>,<code>test.bin</code></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ControlNet训练和微调自己数据集</title>
    <link href="/2023/04/27/ControlNet%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <url>/2023/04/27/ControlNet%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="controlnet-训练自己数据集">ControlNet 训练自己数据集</h1><p>训练和微调在这里是一件事情，我们下面就统一用训练这个词。</p><blockquote><p>2024.1.20 更新 controlnet 发布快一年了，diffusers 已经有了很完整的生态，建议直接使用第二种方式 diffusers 进行训练+推理</p></blockquote><h2 id="从官方仓库训练">从官方仓库训练</h2><p>官方教程 https://github.com/lllyasviel/ControlNet/blob/main/docs/train.md</p><h3 id="环境配置">环境配置</h3><p>先看一下有没有显卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvidia-smi<br></code></pre></td></tr></table></figure><p>首先下载整个仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/lllyasviel/ControlNet.git<br></code></pre></td></tr></table></figure><p>然后创建 conda 虚拟环境(选做，只要你能配好环境)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> create -f environment.yaml<br>conda activate control<br></code></pre></td></tr></table></figure><p>接下来需要下载 stable diffusion 和训练集，因为我们是对 stable diffusion 模型做微调。</p><p>下载 sd1.5 到，models 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ./models<br>wget https://huggingface.co/runwayml/stable-diffusion-v1-5/resolve/main/v1-5-pruned.ckpt<br></code></pre></td></tr></table></figure><p>下载训练数据集到 training 文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> training<br><span class="hljs-built_in">cd</span> ./training<br>wget https://huggingface.co/lllyasviel/ControlNet/resolve/main/training/fill50k.zip<br></code></pre></td></tr></table></figure><p>解压数据集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unzip fill50k.zip<br></code></pre></td></tr></table></figure><p>当然这个数据集非常大，我们也可以选择小一点的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/diffusers/controlnet_training/conditioning_image_1.png<br><br>wget https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/diffusers/controlnet_training/conditioning_image_2.png<br></code></pre></td></tr></table></figure><p>然后将 conditioning_image_1.png 改名 0.png 放到./source 目录下,conditioning_image_2.png 改名放到./target 目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> conditioning_image_1.png 0.png<br><span class="hljs-built_in">mv</span> 0.png ./source<br><br><span class="hljs-built_in">mv</span> conditioning_image_2.png 0.png<br><span class="hljs-built_in">mv</span> 0.png ./target<br></code></pre></td></tr></table></figure><p>然后创建一个<code>prompt.json</code> 的文件写入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;source/0.png&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;target/0.png&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;prompt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pale golden rod circle with old lace background&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>无论是哪种方式，最后的文件结构是这样的<img src="https://proxy.thisis.plus/20230427191856.png" alt="image.png" /></p><h3 id="训练">训练</h3><p>首先调一下<code>tutorial_train.py</code> 里的 batch_size，训练过程中如果出现 out of memory 的情况可以调小。</p><p>接下来运行 tutorial_train.py，闭上眼睛等待训练完成即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python tutorial_train.py<br></code></pre></td></tr></table></figure><p>如果是完整数据集，大概 6 个小时一个 epoch，如果是单张图片会很快。</p><p>当然，为了不要出现网不好 ssh 断掉导致训练终端，我们可以使用 screne</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">screen -S train<br>conda activate control<br>python tutorial_train.py<br></code></pre></td></tr></table></figure><p>训练出的结果可以在<code>image_log</code> 中看到</p><figure><img src="https://proxy.thisis.plus/20230427191937.png" alt="" /><figcaption>image.png</figcaption></figure><h3 id="推理">推理</h3><p>原作者没有给出怎么推理代码的方式，但是有人给出了一个脚本 <a href="https://github.com/huggingface/diffusers/blob/main/scripts/convert_original_controlnet_to_diffusers.py">GitHub</a> 将你训练出来的模型转换成 diffusers，接着你就可以中下面 diffusers 的方式推理模型了。</p><h3 id="踩坑解决">踩坑解决</h3><h4 id="out-of-memoryoom">out of memory(oom)</h4><p>首先开启<code>save_memory</code>模式，将<code>config.py</code> 中 False 改为 True</p><p>同时调低 batch_size</p><h4 id="no-operator-found-for-memory_efficient_attention_backward">No operator found for <code>memory_efficient_attention_backward</code></h4><p>卸载  xformers</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip uninstall  xformers<br></code></pre></td></tr></table></figure><h4 id="typeerror-on_train_batch_start-missing-1-required-positional-argument-dataloader_idx">TypeError: on_train_batch_start() missing 1 required positional argument: 'dataloader_idx'</h4><p>这个比较坑，是论文代码有问题，改一下源码就好</p><ol type="1"><li>ControlNet/ldm/models/diffusion/ddpm.py 文件 591 行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_train_batch_start</span>(<span class="hljs-params">self, batch, batch_idx, dataloader_idx</span>):<br></code></pre></td></tr></table></figure><p>删除 dataloader_idx,改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_train_batch_start</span>(<span class="hljs-params">self, batch, batch_idx</span>):<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>ControlNet/cldm/logger.py 文件 74 行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_train_batch_end</span>(<span class="hljs-params">self, trainer, pl_module, outputs, batch, batch_idx, dataloader_idx</span>):<br></code></pre></td></tr></table></figure><p>删除 dataloader_idx，改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_train_batch_end</span>(<span class="hljs-params">self, trainer, pl_module, outputs, batch, batch_idx</span>):<br></code></pre></td></tr></table></figure><h2 id="diffusers-训练">Diffusers 训练</h2><p><a href="https://github.com/huggingface/diffusers">Diffusers</a> 是一个 huggingface 推出的扩散模型的封装库,同时也对 ControlNet 做了封装，https://github.com/huggingface/diffusers/tree/main/examples/controlnet</p><h3 id="训练-1">训练</h3><p>代码跑起来其实也非常简单，首先下载 diffusers 整个仓库,然后安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/huggingface/diffusers<br><span class="hljs-built_in">cd</span> diffusers<br>pip install -r requirements.txt<br></code></pre></td></tr></table></figure><p>你可能会发现这样的报错 <img src="https://proxy.thisis.plus/202304272229714.png" alt="image.png" /></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-symbol">WARNING: </span>The scripts accelerate, accelerate-config and accelerate-launch are installed in <span class="hljs-emphasis">&#x27;/home/ubuntu/.local/bin&#x27;</span> which is not on PATH.<br>Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.<br><span class="hljs-symbol">WARNING: </span>The script transformers-cli is installed in <span class="hljs-emphasis">&#x27;/home/ubuntu/.local/bin&#x27;</span> which is not on PATH.<br>Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.<br><span class="hljs-symbol">WARNING: </span>The script ftfy is installed in <span class="hljs-emphasis">&#x27;/home/ubuntu/.local/bin&#x27;</span> which is not on PATH.<br>Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.<br><span class="hljs-symbol">WARNING: </span>The script tensorboard is installed in <span class="hljs-emphasis">&#x27;/home/ubuntu/.local/bin&#x27;</span> which is not on PATH.<br>Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.<br><span class="hljs-symbol">WARNING: </span>The script datasets-cli is installed in <span class="hljs-emphasis">&#x27;/home/ubuntu/.local/bin&#x27;</span> which is not on PATH.<br>Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.<br></code></pre></td></tr></table></figure><p>别慌，依赖已经下载成功了，只是下载到了一个不在 PATH 的路径，接下来如果要使用这些被提到的库就需要指明路径，例如下面我们要使用 accelerate，正常的用法是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">accelerate 你要执行的东西<br></code></pre></td></tr></table></figure><p>我们只需要改成</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/home/u</span>buntu<span class="hljs-regexp">/.local/</span>bin/accelerate 你要执行的东西<br></code></pre></td></tr></table></figure><p>接下来运行 tutorial_train</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">accelerate config<br></code></pre></td></tr></table></figure><p>全部选 NO 就好，如果你有多卡什么的可以参考<a href="https://huggingface.co/docs/accelerate/index">官方文档</a></p><p>我们需要测试数据集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/diffusers/controlnet_training/conditioning_image_1.png<br><br>wget https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/diffusers/controlnet_training/conditioning_image_2.png<br></code></pre></td></tr></table></figure><p>接着运行，设置基础模型和模型输出目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> OUTPUT_DIR=<span class="hljs-string">&quot;./out_models&quot;</span><br><span class="hljs-built_in">export</span> MODEL_DIR=<span class="hljs-string">&quot;runwayml/stable-diffusion-v1-5&quot;</span><br></code></pre></td></tr></table></figure><p>运行代码，这里 epoch=1，steps=1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/home/ubuntu/.local/bin/accelerate launch train_controlnet.py   --pretrained_model_name_or_path=<span class="hljs-variable">$MODEL_DIR</span>  --output_dir=<span class="hljs-variable">$OUTPUT_DIR</span>   --dataset_name=fusing/fill50k   --resolution=512   --learning_rate=1e-5   --validation_image <span class="hljs-string">&quot;./conditioning_image_1.png&quot;</span> <span class="hljs-string">&quot;./conditioning_image_2.png&quot;</span>   --validation_prompt <span class="hljs-string">&quot;red circle with blue background&quot;</span> <span class="hljs-string">&quot;cyan circle with brown floral background&quot;</span>   --train_batch_size=4 --num_train_epochs=1 --max_train_steps=1<br></code></pre></td></tr></table></figure><h3 id="推理-1">推理</h3><p>新建一个文件<code>inference.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> StableDiffusionControlNetPipeline, ControlNetModel, UniPCMultistepScheduler<br><span class="hljs-keyword">from</span> diffusers.utils <span class="hljs-keyword">import</span> load_image<br><span class="hljs-keyword">import</span> torch<br><br>base_model_path = <span class="hljs-string">&quot;path to model&quot;</span><br>controlnet_path = <span class="hljs-string">&quot;path to controlnet&quot;</span><br><br>controlnet = ControlNetModel.from_pretrained(controlnet_path, torch_dtype=torch.float16)<br>pipe = StableDiffusionControlNetPipeline.from_pretrained(<br>    base_model_path, controlnet=controlnet, torch_dtype=torch.float16<br>)<br><br><span class="hljs-comment"># speed up diffusion process with faster scheduler and memory optimization</span><br>pipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)<br><span class="hljs-comment"># remove following line if xformers is not installed</span><br>pipe.enable_xformers_memory_efficient_attention()<br><br>pipe.enable_model_cpu_offload()<br><br>control_image = load_image(<span class="hljs-string">&quot;./conditioning_image_1.png&quot;</span>)<br>prompt = <span class="hljs-string">&quot;pale golden rod circle with old lace background&quot;</span><br><br><span class="hljs-comment"># generate image</span><br>generator = torch.manual_seed(<span class="hljs-number">0</span>)<br>image = pipe(<br>     prompt, num_inference_steps=<span class="hljs-number">20</span>, generator=generator, image=control_image<br>).images[<span class="hljs-number">0</span>]<br><br>image.save(<span class="hljs-string">&quot;./output.png&quot;</span>)<br></code></pre></td></tr></table></figure><p>这里的 base_model_path 和 controlnet_path 改成之前设置的 MODEL_DIR 和 OUTPUT_DIR(注意顺序)</p><p>接下来运行就可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python inference.py<br></code></pre></td></tr></table></figure><p>结果会被保存到<code>output.png</code></p><h3 id="踩坑解决-1">踩坑解决</h3><h4 id="warning-the-scripts-accelerate-accelerate-config-and-accelerate-launch-are-installed-in-homeubuntu.localbin-which-is-not-on-path.consider-adding-this-directory-to-path-or-if-you-prefer-to-suppress-this-warning-use---no-warn-script-location.">WARNING: The scripts accelerate, accelerate-config and accelerate-launch are installed in '/home/ubuntu/.local/bin' which is not on PATH.Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-symbol">WARNING: </span>The scripts accelerate, accelerate-config and accelerate-launch are installed in <span class="hljs-emphasis">&#x27;/home/ubuntu/.local/bin&#x27;</span> which is not on PATH.<br>Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.<br><span class="hljs-symbol">WARNING: </span>The script transformers-cli is installed in <span class="hljs-emphasis">&#x27;/home/ubuntu/.local/bin&#x27;</span> which is not on PATH.<br>Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.<br><span class="hljs-symbol">WARNING: </span>The script ftfy is installed in <span class="hljs-emphasis">&#x27;/home/ubuntu/.local/bin&#x27;</span> which is not on PATH.<br>Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.<br><span class="hljs-symbol">WARNING: </span>The script tensorboard is installed in <span class="hljs-emphasis">&#x27;/home/ubuntu/.local/bin&#x27;</span> which is not on PATH.<br>Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.<br><span class="hljs-symbol">WARNING: </span>The script datasets-cli is installed in <span class="hljs-emphasis">&#x27;/home/ubuntu/.local/bin&#x27;</span> which is not on PATH.<br>Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.<br></code></pre></td></tr></table></figure><p>类似的问题，这里的依赖已经安装成功了，只是被安装到了未被添加到 PATH 的目录，接下来运行的时候只需要指明目录即可。例如下面我们要使用 accelerate，正常的用法是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">accelerate 你要执行的东西<br></code></pre></td></tr></table></figure><p>我们只需要改成</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/home/u</span>buntu<span class="hljs-regexp">/.local/</span>bin/accelerate 你要执行的东西<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>文字生成图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>I3D笔记</title>
    <link href="/2023/04/23/I3D%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/04/23/I3D%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="i3d笔记">I3D笔记</h1><p>I3D是一个视频理解模型，采用双流网络的架构，他的核心贡献是提出了如何对2d网络进行膨胀操作，同时提出了一个新的数据集 Kinetics</p><h2 id="工作回顾">工作回顾</h2><figure><img src="https://proxy.thisis.plus/20230423215707.png" alt="" /><figcaption>image.png</figcaption></figure><p>在以前，视频理解有三种做法 1. LSTM 2. 3D ConvNets 3. Two-Stream Networks（双流网络）</p><h2 id="two-stream-inflated-3d-convnets">Two-Stream Inflated 3D ConvNets</h2><p>这篇文章提出的模型被称为 Two-Stream Inflated 3D ConvNets</p><p>Inflate 是模型的核心操作，含义是将一个2d模型"膨胀"成3d模型，做法很简单，就是把一个<span class="math inline">\(N*N\)</span> 的层变成<span class="math inline">\(N*N*N\)</span> ,同时也将参数复制了<span class="math inline">\(N\)</span> 遍。</p><h2 id="kinetics">Kinetics</h2><p>在视频领域，在一个足够大的数据集上训练一个动作分类网络，当应用于不同的时间任务或数据集时，是否会有类似的性能提升是一个悬而未决的问题。构建视频数据集的挑战意味着大多数流行的动作识别基准。</p><p>Kinetics 有400个人体动作类，每个类有400多个例子，每个都来自一个独特的 YouTube 视频</p><h3 id="整体架构">整体架构</h3><p>作者选择了 Inception-v1 构建整个神经网络(作者当时不适用Inception-v1是因为当时认为Inception在视频理解更合适，但架不住ResNet 太棒了，作者在18年也换成了ResNet) <img src="https://proxy.thisis.plus/20230423220521.png" alt="image.png" /></p><p>图中的Inc. 就是经典的Inception-v1 块了，只是做了Inflating 操作</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>clip_interrogator教程</title>
    <link href="/2023/04/22/clip_interrogator%E6%95%99%E7%A8%8B/"/>
    <url>/2023/04/22/clip_interrogator%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="clip_interrogator教程">clip_interrogator教程</h1><p>文字生成图片是近年来多模态和大模型研究的热门方向，openai提出的CLIP提供了一个方法建立起了图片和文字的联系，但是只能做到给定一张图片选择给定文本语义最相近的那一个，实际项目开发中我们总是需要从一张图片获取描述，感谢社区的活力，clip-interrogator应运而生。</p><p>受限于clip-interrogator 等于没有的文档，就有了这篇文章来写一些怎么使用clip-interrogator。</p><p>clip-interrogator项目地址<a href="https://github.com/pharmapsychotic/clip-interrogator">GitHub</a></p><p>在线体验<a href="https://huggingface.co/spaces/pharma/CLIP-Interrogator">huggingface-clip-interrogator</a> <a href="https://huggingface.co/spaces/fffiloni/CLIP-Interrogator-2">huggingface-clip-interrogator2</a></p><h2 id="clip-interrogator原理">clip-interrogator原理</h2><p>首先，clip-interrogator会使用BILP生成一段对图片的自然语言描述。</p><p>接下来会根据四种模式，从data文件夹下的txt文件中组合出文字生成图片常用的prompt,通过CLIP进行编码，然后将图片也用CLIP进行编码，计算出相似度最大的一组prompt,和BILP生成的prompt拼接到一起，就得到了一组prompt。</p><h2 id="安装">安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install clip-interrogator==0.5.4<br></code></pre></td></tr></table></figure><p>如果需要BLIP2最新的WIP支持，运行 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install clip-interrogator==0.6.0<br></code></pre></td></tr></table></figure></p><h2 id="使用">使用</h2><h3 id="快速开始">快速开始</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> clip_interrogator <span class="hljs-keyword">import</span> Config, Interrogator<br>image = Image.<span class="hljs-built_in">open</span>(image_path).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>ci = Interrogator(Config(clip_model_name=<span class="hljs-string">&quot;ViT-L-14/openai&quot;</span>))<br><span class="hljs-built_in">print</span>(ci.interrogate(image))<br></code></pre></td></tr></table></figure><p>将<code>image_path</code> 换成自己图片的路径即可</p><h3 id="模型">模型</h3><h4 id="blip">BLIP</h4><p>BLIP可以传入两种选项，<code>large</code> 和 <code>base</code>，默认使用<code>large</code></p><p>base用法是 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> clip_interrogator <span class="hljs-keyword">import</span> Config, Interrogator<br>image = Image.<span class="hljs-built_in">open</span>(image_path).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>ci = Interrogator(Config(caption_model_name=<span class="hljs-string">&#x27;blip-base&#x27;</span>,clip_model_name=<span class="hljs-string">&quot;RN50-quickgelu/openai&quot;</span>))<br><span class="hljs-built_in">print</span>(ci.interrogate_fast(image))<br></code></pre></td></tr></table></figure></p><h4 id="clip">CLIP</h4><p>这里使用的模型的是openai的ViT-L-14。</p><p>我们也可以更改模型，文档在这完全没说清可以用什么，我做了试错</p><p>报错显示可用的模型有<code>'coca_base', 'coca_roberta-ViT-B-32', 'coca_ViT-B-32', 'coca_ViT-L-14', 'convnext_base', 'convnext_base_w', 'convnext_base_w_320', 'convnext_large', 'convnext_large_d', 'convnext_large_d_320', 'convnext_small', 'convnext_tiny', 'convnext_xlarge', 'convnext_xxlarge', 'convnext_xxlarge_320', 'mt5-base-ViT-B-32', 'mt5-xl-ViT-H-14', 'RN50', 'RN50-quickgelu', 'RN50x4', 'RN50x16', 'RN50x64', 'RN101', 'RN101-quickgelu', 'roberta-ViT-B-32', 'swin_base_patch4_window7_224', 'ViT-B-16', 'ViT-B-16-plus', 'ViT-B-16-plus-240', 'ViT-B-32', 'ViT-B-32-plus-256', 'ViT-B-32-quickgelu', 'ViT-bigG-14', 'ViT-e-14', 'ViT-g-14', 'ViT-H-14', 'ViT-H-16', 'ViT-L-14', 'ViT-L-14-280', 'ViT-L-14-336', 'ViT-L-16', 'ViT-L-16-320', 'ViT-M-16', 'ViT-M-16-alt', 'ViT-M-32', 'ViT-M-32-alt', 'ViT-S-16', 'ViT-S-16-alt', 'ViT-S-32', 'ViT-S-32-alt', 'vit_medium_patch16_gap_256', 'vit_relpos_medium_patch16_cls_224', 'xlm-roberta-base-ViT-B-32', 'xlm-roberta-large-ViT-H-14'</code></p><blockquote><p>这里其实是我一直没搞懂的一个地方，经过很多次试错,<code>/</code> 前面被称为model，但是很多模型是用不了的，<code>/</code> 后面被称作 tag (通过读源码猜测是预训练模型来源) ，是可以写不同的内容，例如<code>openai</code> ，有的时候还需要不填，但是究竟可以怎么组合一直没找到，下面做了一个总结,</p></blockquote><table><thead><tr class="header"><th>模型</th><th>tag</th></tr></thead><tbody><tr class="odd"><td>coca_base</td><td>不传</td></tr><tr class="even"><td>RN50</td><td>'openai', 'yfcc15m', 'cc12m'</td></tr><tr class="odd"><td>RN50-quickgelu</td><td>'openai', 'yfcc15m', 'cc12m'</td></tr><tr class="even"><td>RN101</td><td>'openai', 'yfcc15m'</td></tr><tr class="odd"><td>RN101-quickgelu</td><td>'openai', 'yfcc15m'</td></tr><tr class="even"><td>RN50x4</td><td>'openai'</td></tr><tr class="odd"><td>RN50x16</td><td>'openai'</td></tr><tr class="even"><td>RN50x64</td><td>'openai'</td></tr><tr class="odd"><td>ViT-B-32</td><td>'openai', 'laion400m_e31', 'laion400m_e32', 'laion2b_e16', 'laion2b_s34b_b79k'</td></tr><tr class="even"><td>ViT-B-32-quickgelu</td><td>'openai', 'laion400m_e31', 'laion400m_e32'</td></tr><tr class="odd"><td>ViT-B-16</td><td>'openai', 'laion400m_e31', 'laion400m_e32', 'laion2b_s34b_b88k'</td></tr><tr class="even"><td>ViT-L-14-336</td><td>'openai'</td></tr><tr class="odd"><td>ViT-S-32-alt</td><td>不传</td></tr><tr class="even"><td>ViT-S-32</td><td>不传</td></tr><tr class="odd"><td>ViT-S-16-alt</td><td>不传</td></tr><tr class="even"><td>ViT-S-16</td><td>不传</td></tr><tr class="odd"><td>ViT-M-32-alt</td><td>不传</td></tr><tr class="even"><td>ViT-M-32</td><td>不传</td></tr><tr class="odd"><td>ViT-M-16-alt</td><td>不传</td></tr><tr class="even"><td>ViT-M-16</td><td>不传</td></tr><tr class="odd"><td>xlm-roberta-base-ViT-B-32</td><td>'laion5b_s13b_b90k'</td></tr><tr class="even"><td>xlm-roberta-large-ViT-H-14</td><td>'frozen_laion5b_s13b_b90k'</td></tr></tbody></table><blockquote><p>不传的意思是不写<code>/</code> 后面的部分不是只写模型名字，正确的用法例如<code>coca_base/</code></p></blockquote><p>例如使用<code>RN50-quickgelu/openai</code> 的用法就是<code>ci = Interrogator(Config(clip_model_name="RN50-quickgelu/openai"))</code></p><blockquote><p>文档中有这么一句ViT-L for Stable Diffusion 1, and ViT-H for Stable Diffusion 2，意思是 ViT-L 是给 Stable Diffusion 1 用的，ViT-H是给 Stable Diffusion 2 用的</p></blockquote><h3 id="模式">模式</h3><p>模式有<code>best</code> ， <code>classic</code>， <code>fast</code>和<code>negative</code> 三种，开发者在这里的设计很奇怪，不同模式的使用不是传不同的参数而是使用不同的方法。<code>best</code> 模式就是上面的用法，<code>fast</code> 模式的用法是 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> clip_interrogator <span class="hljs-keyword">import</span> Config, Interrogator<br>image = Image.<span class="hljs-built_in">open</span>(image_path).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>ci = Interrogator(Config(clip_model_name=<span class="hljs-string">&quot;RN50-quickgelu/openai&quot;</span>))<br><span class="hljs-built_in">print</span>(ci.interrogate_fast(image))<br></code></pre></td></tr></table></figure></p><p><code>classic</code> 模式用法 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> clip_interrogator <span class="hljs-keyword">import</span> Config, Interrogator<br>image = Image.<span class="hljs-built_in">open</span>(image_path).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>ci = Interrogator(Config(clip_model_name=<span class="hljs-string">&quot;RN50-quickgelu/openai&quot;</span>))<br><span class="hljs-built_in">print</span>(ci.interrogate_classic(image))<br></code></pre></td></tr></table></figure></p><p><code>negative</code> 模式用法 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> clip_interrogator <span class="hljs-keyword">import</span> Config, Interrogator<br>image = Image.<span class="hljs-built_in">open</span>(image_path).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>ci = Interrogator(Config(clip_model_name=<span class="hljs-string">&quot;RN50-quickgelu/openai&quot;</span>))<br><span class="hljs-built_in">print</span>(ci.interrogate_negative(image))<br></code></pre></td></tr></table></figure></p><h3 id="quiet">quiet</h3><p><code>quiet</code> 选项的作用是不输出中间过程，使用方法是直接写进Config 即可 ，例如 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> clip_interrogator <span class="hljs-keyword">import</span> Config, Interrogator<br>image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/content/test.png&#x27;</span>).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>ci = Interrogator(Config(clip_model_name=<span class="hljs-string">&quot;RN50-quickgelu/openai&quot;</span>,quiet=<span class="hljs-literal">True</span>))<br><span class="hljs-built_in">print</span>(ci.interrogate_fast(image))<br></code></pre></td></tr></table></figure></p><p>使用前，会有各种进度条 <img src="https://proxy.thisis.plus/20230422221658.png" alt="image.png" /></p><p>使用后，所有过程中的输出会被隐藏 <img src="https://proxy.thisis.plus/20230422221818.png" alt="image.png" /></p><h2 id="自定义词库">自定义词库</h2><p>如果你安装的是0.6.0，那么可以使用自定义词库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> clip_interrogator <span class="hljs-keyword">import</span> Config, Interrogator, LabelTable, load_list<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>ci = Interrogator(Config(blip_model_type=<span class="hljs-literal">None</span>))<br>image = Image.<span class="hljs-built_in">open</span>(image_path).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>table = LabelTable(load_list(<span class="hljs-string">&#x27;terms.txt&#x27;</span>), <span class="hljs-string">&#x27;terms&#x27;</span>, ci)<br>best_match = table.rank(ci.image_to_features(image), top_count=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(best_match)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>文字生成图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ControlNet代码改造计划</title>
    <link href="/2023/04/21/ControlNet%E4%BB%A3%E7%A0%81%E6%94%B9%E9%80%A0/"/>
    <url>/2023/04/21/ControlNet%E4%BB%A3%E7%A0%81%E6%94%B9%E9%80%A0/</url>
    
    <content type="html"><![CDATA[<p>虽然现在webui已经支持了ControlNet，但是如果我们需要单独抽出来ControlNet做一些项目就需要对ControlNet进行改造。同时我也想加入一些开源的工具让ControlNet更加有趣，例如<a href="https://github.com/pharmapsychotic/clip-interrogator">clip_interrogator</a>.</p><p>关于什么是Canny，Hough，可以看北邮鲁鹏老师的课程<a href="https://www.bilibili.com/video/BV1nz4y197Qv/?spm_id_from=333.999.0.0&amp;vd_source=e8f062c423dc7ce759a573dd732735a0">计算机视觉（本科）北京邮电大学 鲁鹏</a></p><p>如果你想在webui使用ControlNet，可以看我之前的<a href="https://studyinglover.com/2023/03/20/%E9%80%9A%E8%BF%87colab%E4%BD%93%E9%AA%8CControlNet/">文章</a> ，或者直接查看<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">webui</a></p><p>项目开源在<a href="https://github.com/StudyingLover/cmd_ControlNet">GitHub</a></p><p>我的博客<a href="https://studyinglover.com/2023/04/21/ControlNet%E4%BB%A3%E7%A0%81%E6%94%B9%E9%80%A0/">https://studyinglover.com</a></p><h2 id="下载源码和模型">下载源码和模型</h2><p>ControlNet项目主页</p><p><a href="https://github.com/lllyasviel/ControlNet">github</a> , <a href="https://huggingface.co/lllyasviel/ControlNet">huggingface</a></p><p>先下载源码 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/lllyasviel/ControlNet.git <br></code></pre></td></tr></table></figure></p><p>接下来下载需要的模型，进入huggingface 页面，选择<code>files and versions</code> <img src="https://proxy.thisis.plus/20230421105906.png" alt="image.png" /></p><p>先下载所有的annotator,进入<code>annotator/ckpts</code>文件夹,可以看到我们需要的ckpts文件，进入一个，右键download，选择复制下载链接 <img src="https://proxy.thisis.plus/20230421110144.png" alt="image.png" /></p><p>执行命令，就会将模型下载下来 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget 复制的链接<br></code></pre></td></tr></table></figure></p><p>我这里整理了ckpt文件所有的下载的链接和命令,<code>/root/ControlNet/annotator/ckpts/</code> 是我的路径，换成你自己的就行 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /root/ControlNet/annotator/ckpts/<br><br>wget https://huggingface.co/lllyasviel/ControlNet/resolve/main/annotator/ckpts/body_pose_model.pth<br><br>wget https://huggingface.co/lllyasviel/ControlNet/resolve/main/annotator/ckpts/dpt_hybrid-midas-501f0c75.pt<br><br>wget https://huggingface.co/lllyasviel/ControlNet/resolve/main/annotator/ckpts/hand_pose_model.depth <br><br>wget https://huggingface.co/lllyasviel/ControlNet/resolve/main/annotator/ckpts/mlsd_large_512_fp32.depth <br><br>wget https://huggingface.co/lllyasviel/ControlNet/resolve/main/annotator/ckpts/mlsd_tiny_512_fp32.depth <br><br>wget https://huggingface.co/lllyasviel/ControlNet/resolve/main/annotator/ckpts/network-bsds500.depth <br><br>wget https://huggingface.co/lllyasviel/ControlNet/resolve/main/annotator/ckpts/upernet_global_small.pth<br></code></pre></td></tr></table></figure></p><p>接下来下载模型，假如我们需要canny2image，那我就需要下载<code>control_sd15_canny.pth</code> 这个文件，类似上面的方法，命令是 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://huggingface.co/lllyasviel/ControlNet/resolve/main/models/control_sd15_canny.pth<br></code></pre></td></tr></table></figure></p><blockquote><p>其实我们可以对比网址链接和下载链接</p><p>网址链接：https://huggingface.co/lllyasviel/ControlNet/blob/main/models/control_sd15_canny.pth</p><p>下载链接：https://huggingface.co/lllyasviel/ControlNet/resolve/main/models/control_sd15_canny.pth</p><p>我们只需要把网址链接的blob换成resolve就可以了。</p></blockquote><h2 id="改造">改造</h2><p>我们依然以camny2image为例，打开<code>gradio_canny2image,py</code> 文件，可以看到这个文件大概是这个样子 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> 各种依赖<br><br>apply_canny = CannyDetector()<span class="hljs-comment"># 创建了一个canny算子，用来将图片转换成canny图</span><br><br>model = create_model(<span class="hljs-string">&#x27;./models/cldm_v15.yaml&#x27;</span>).cpu()<br>model.load_state_dict(load_state_dict(<span class="hljs-string">&#x27;./models/control_sd15_canny.pth&#x27;</span>, location=<span class="hljs-string">&#x27;cuda&#x27;</span>))<br>model = model.cuda()<br>ddim_sampler = DDIMSampler(model)<span class="hljs-comment"># 加载了模型</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process</span>(<span class="hljs-params">input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, ddim_steps, guess_mode, strength, scale, seed, eta, low_threshold, high_threshold</span>):<br>    <span class="hljs-comment"># 一堆操作</span><br>    <span class="hljs-keyword">return</span> [<span class="hljs-number">255</span> - detected_map] + results<span class="hljs-comment"># 返回了canny图和生成的图片</span><br><br>block = gr.Blocks().queue()<span class="hljs-comment"># 创建一个gradio应用</span><br><span class="hljs-keyword">with</span> block:<br><span class="hljs-comment"># 又是一通操作，创建了各种gradio页面</span><br><br>block.launch(server_name=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>)<span class="hljs-comment"># 启动了gradio应用</span><br></code></pre></td></tr></table></figure></p><p>这样子我们只需要<code>process</code> 这个函数就可以了，那我们就可以把代码改成这样 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> share <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> config<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> einops<br><span class="hljs-keyword">import</span> gradio <span class="hljs-keyword">as</span> gr<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">from</span> pytorch_lightning <span class="hljs-keyword">import</span> seed_everything<br><span class="hljs-keyword">from</span> annotator.util <span class="hljs-keyword">import</span> resize_image, HWC3<br><span class="hljs-keyword">from</span> annotator.canny <span class="hljs-keyword">import</span> CannyDetector<br><span class="hljs-keyword">from</span> cldm.model <span class="hljs-keyword">import</span> create_model, load_state_dict<br><span class="hljs-keyword">from</span> cldm.ddim_hacked <span class="hljs-keyword">import</span> DDIMSampler<br><br>apply_canny = CannyDetector()<br>  <br>model = create_model(<span class="hljs-string">&#x27;./models/cldm_v15.yaml&#x27;</span>).cpu()<br><br>model.load_state_dict(load_state_dict(<span class="hljs-string">&#x27;./models/control_sd15_canny.pth&#x27;</span>, location=<span class="hljs-string">&#x27;cuda&#x27;</span>))<br>model = model.cuda()<br>ddim_sampler = DDIMSampler(model)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process</span>(<span class="hljs-params">input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, ddim_steps, guess_mode, strength, scale, seed, eta, low_threshold, high_threshold</span>):<br><span class="hljs-comment"># 这块直接复制源码process函数</span><br>    <span class="hljs-keyword">return</span> [<span class="hljs-number">255</span> - detected_map] + results<br><br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;__main__&#x27;</span> == __name__:<br>    parser = argparse.ArgumentParser()<br>    parser.add_argument(<span class="hljs-string">&#x27;--image_path&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;test.png&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;original image path&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--prompt&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;1people&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;prompt&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--a_prompt&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;best quality, extremely detailed&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;added prompt&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--n_prompt&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;longbody, lowres, bad anatomy, bad hands, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;negative prompt&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--num_samples&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, default=<span class="hljs-number">1</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;number of samples&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--image_resolution&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, default=<span class="hljs-number">512</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;image resolution&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--ddim_steps&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, default=<span class="hljs-number">30</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;ddim steps&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--is_saved&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">bool</span>, default=<span class="hljs-literal">True</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;is saved?&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--is_show&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">bool</span>, default=<span class="hljs-literal">False</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;is show?&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--guess_mode&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">bool</span>, default=<span class="hljs-literal">False</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;guess mode&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--strength&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">float</span>, default=<span class="hljs-number">1.0</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;strength&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--scale&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">float</span>, default=<span class="hljs-number">9.0</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;scale&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--seed&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, default=-<span class="hljs-number">1</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;seed&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--eta&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">float</span>, default=<span class="hljs-number">0.0</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;eta&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--low_threshold&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, default=<span class="hljs-number">100</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;low threshold&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--high_threshold&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, default=<span class="hljs-number">200</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;high threshold&#x27;</span>)<br>  <br><br>    opt = parser.parse_args()<br>    <br>    img=cv2.imread(opt.image_path)<br>    out=process(img, opt.prompt, opt.a_prompt, opt.n_prompt, opt.num_samples, opt.image_resolution, opt.ddim_steps, opt.guess_mode, opt.strength, opt.scale, opt.seed, opt.eta, opt.low_threshold, opt.high_threshold)<br><br>    <span class="hljs-keyword">if</span>(opt.is_show):<br>        cv2.imshow(<span class="hljs-string">&#x27;out&#x27;</span>,out[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">if</span>(opt.is_saved):<br>        cv2.imwrite(<span class="hljs-string">&#x27;out.png&#x27;</span>,out[<span class="hljs-number">1</span>])<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;saved to out.png&#x27;</span>)<br></code></pre></td></tr></table></figure></p><p>用法就是parser的用法，例如 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python cmd_canny2image.py --image_path ./test_imgs/main.png --prompt bule_hair,color_clothes <br></code></pre></td></tr></table></figure> 输出的图片会被保存到当前目录下的out.png文件</p><h2 id="clip_interrogator">clip_interrogator</h2><p>你可以在<a href="https://huggingface.co/spaces/fffiloni/CLIP-Interrogator-2">huggingface</a> 直接体验，这里是代码调用相应接口。</p><p><a href="https://studyinglover.com/2023/04/22/clip_interrogator教程/">clip_interrogator教程</a></p><p>先下载 clip_interrogator <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install clip-interrogator==0.5.4<br></code></pre></td></tr></table></figure></p><p>接下来调用 clip_interrogator <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> clip_interrogator <span class="hljs-keyword">import</span> Config, Interrogator<br><span class="hljs-keyword">import</span> cv2 <span class="hljs-keyword">as</span> cv<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>img=cv.imread(<span class="hljs-string">&#x27;/content/src/test.png&#x27;</span>)<br>img = cv.cvtColor(img,cv.COLOR_BGR2RGB)<br>img = Image.fromarray(img)<br><br>ci = Interrogator(Config(clip_model_name=<span class="hljs-string">&quot;ViT-L-14/openai&quot;</span>))<br><br>describe=ci.interrogate(img)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>+describe)<br></code></pre></td></tr></table></figure></p><p>我们将他封装成函数 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">app</span>(<span class="hljs-params">numpy_img</span>):<br>    img = cv.cvtColor(numpy_img,cv.COLOR_BGR2RGB)<br>    img = Image.fromarray(img)<br>    ci = Interrogator(Config(clip_model_name=<span class="hljs-string">&quot;ViT-L-14/openai&quot;</span>))<br>    describe=ci.interrogate(img)<br>    <span class="hljs-keyword">return</span> describe<br></code></pre></td></tr></table></figure></p><p>在 <a href="https://colab.research.google.com/github/StudyingLover/cmd_ControlNet/blob/master/fix_ControlNet_and_CLIPinterrogator.ipynb"><img src="https://proxy.thisis.plus/colab-badge.svg" alt="Open In Colab" /></a> 可以体验 ControlNet和CLIPinterrogator 混合使用，两张图片都从url引入，一张图获取prompt，ptompt和另一张图一起输入输入canny2image，生成的图片展示在输出框底部</p>]]></content>
    
    
    
    <tags>
      
      <tag>文字生成图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文字生成图片综述</title>
    <link href="/2023/04/20/%E6%96%87%E5%AD%97%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87%E7%BB%BC%E8%BF%B0/"/>
    <url>/2023/04/20/%E6%96%87%E5%AD%97%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87%E7%BB%BC%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 style="text-align: center">文字生成图片综述</h1><h2 id="背景">背景</h2><p>根据文字生成图像，是近几年大模型领域和多模态比较热门的研究。以 NovelAI，waifu 等为代表的二次元模型极大地拓展了 stable diffusion <sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="Rombach, R., Blattmann, A., Lorenz, D., Esser, P., &amp; Ommer, B. (2022). High-Resolution Image Synthesis with Latent Diffusion Models. 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). Presented at the 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), New Orleans, LA, USA. https://doi.org/10.1109/cvpr52688.2022.01042">[5]</span></a></sup><sup id="fnref:24" class="footnote-ref"><a href="#fn:24" rel="footnote"><span class="hint--top hint--rounded" aria-label="Heathen. github.com/automatic1111/stable-diffusion-webui/discussions/2670, hypernetwork style training, a tiny guide, 2022.">[24]</span></a></sup>模型和生态的想象空间。例如原本做 AIGC 生成小说的 NovelAI 推出了自己的二次元图像生成模型，基于 SD 算法框架和 Danbooru 二次元图库数据集进行训练和优化。像 NovelAI 这类的二次元模型对于用户输入的描述词的专业程度要求较高，也由社区自发整理了大量的魔典(prompt).精确控制图像的生成也是 AI 绘画的一个发展方向，各种可以控制人物动作，位置的方法<sup id="fnref:10" class="footnote-ref"><a href="#fn:10" rel="footnote"><span class="hint--top hint--rounded" aria-label="Kawar, B., Zada, S., Lang, O., Tov, O., Chang, H., Dekel, T., … Irani, M. (2022). Imagic: Text-Based Real Image Editing with Diffusion Models.">[10]</span></a></sup><sup id="fnref:13" class="footnote-ref"><a href="#fn:13" rel="footnote"><span class="hint--top hint--rounded" aria-label="Zhang, L., &amp; Agrawala, M. (n.d.). Adding Conditional Control to Text-to-Image Diffusion Models.">[13]</span></a></sup><sup id="fnref:19" class="footnote-ref"><a href="#fn:19" rel="footnote"><span class="hint--top hint--rounded" aria-label="Mokady, R., Hertz, A., Aberman, K., Pritch, Y., &amp; Cohen-Or, D. (2022). Null-text Inversion for Editing Real Images using Guided Diffusion Models.">[19]</span></a></sup>被提出.最近 openai 也开源了他们最新的研究 Consistency Models<sup id="fnref:20" class="footnote-ref"><a href="#fn:20" rel="footnote"><span class="hint--top hint--rounded" aria-label="Song, Y., Dhariwal, P., Chen, M., &amp; Sutskever, I. (n.d.). Consistency Models.">[20]</span></a></sup> ,可以 1s 内生成多张图片。此外，stable diffusion 也被用在了 3d 模型的生成方面，例如 dreamfusion<sup id="fnref:25" class="footnote-ref"><a href="#fn:25" rel="footnote"><span class="hint--top hint--rounded" aria-label="Poole, B., Jain, A., Barron, J., Mildenhall, B., Research, G., &amp; Berkeley, U. (n.d.). DREAMFUSION: TEXT-TO-3D USING 2D DIFFUSION.">[25]</span></a></sup>,Point-E<sup id="fnref:26" class="footnote-ref"><a href="#fn:26" rel="footnote"><span class="hint--top hint--rounded" aria-label="Nichol, A., Jun, H., Dhariwal, P., Mishkin, P., &amp; Chen, M. (2022). Point-E: A System for Generating 3D Point Clouds from Complex Prompts.">[26]</span></a></sup> 等。</p><h2 id="图像生成">图像生成</h2><h3 id="hypernetwork">hypernetwork</h3><p>hypernetwork 是一种神经网络的处理方法<sup id="fnref:21" class="footnote-ref"><a href="#fn:21" rel="footnote"><span class="hint--top hint--rounded" aria-label="Abbas, M., Kivinen, J., &amp; Raiko, T. (2016). International Conference on Learning Representations (ICLR).">[21]</span></a></sup> 主要方法是通过一个神经网络影响另一个神经网络的参数，其中最具有代表性的就是 GAN<sup id="fnref:22" class="footnote-ref"><a href="#fn:22" rel="footnote"><span class="hint--top hint--rounded" aria-label="Alaluf, Y., Tov, O., Mokady, R., Gal, R., &amp; Bermano, A. (2021). HyperStyle: StyleGAN Inversion with HyperNetworks for Real Image Editing.">[22]</span></a></sup><sup id="fnref:23" class="footnote-ref"><a href="#fn:23" rel="footnote"><span class="hint--top hint--rounded" aria-label="Dinh, TanM., Tran, A., Nguyen, R., &amp; Hua, B.-S. (n.d.). HyperInverter: Improving StyleGAN Inversion via Hypernetwork.">[23]</span></a></sup> 了.</p><h3 id="扩散模型">扩散模型</h3><p>扩散模型第一次在<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Sohl-Dickstein, J., Weiss, EricL., Maheswaranathan, N., &amp; Ganguli, S. (2015). Deep Unsupervised Learning using Nonequilibrium Thermodynamics.">[1]</span></a></sup> 中被提出,被称为 Diffusion Probabilistic Model,之后提出的 DDPM<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Ho, JonathanC., Jain, A., &amp; Abbeel, P. (2020). Denoising Diffusion Probabilistic Models.">[2]</span></a></sup>中被改进。之后 DDPM 也衍生出了诸多版本。发布在 CVPR2022 的 LDM<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="Rombach, R., Blattmann, A., Lorenz, D., Esser, P., &amp; Ommer, B. (2022). High-Resolution Image Synthesis with Latent Diffusion Models. 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). Presented at the 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), New Orleans, LA, USA. https://doi.org/10.1109/cvpr52688.2022.01042">[5]</span></a></sup>将图片放到隐空间上实现了图片高质量合成并提出了内容引导机制，可以通过 prompt 让图片生成特定内容。一年后 LDM 衍生除了 stable diffusion<sup id="fnref:24" class="footnote-ref"><a href="#fn:24" rel="footnote"><span class="hint--top hint--rounded" aria-label="Heathen. github.com/automatic1111/stable-diffusion-webui/discussions/2670, hypernetwork style training, a tiny guide, 2022.">[24]</span></a></sup><sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="Rombach, R., Blattmann, A., Lorenz, D., Esser, P., &amp; Ommer, B. (2022). High-Resolution Image Synthesis with Latent Diffusion Models. 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). Presented at the 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), New Orleans, LA, USA. https://doi.org/10.1109/cvpr52688.2022.01042">[5]</span></a></sup>，掀起了 ai 画图的热潮。</p><h3 id="ddpm">DDPM</h3><p>DDPM 分为前向过程和反向过程。DDPM 假定整个过程都是一个参数化的马尔科夫链，在前向过程中对数据逐步增加高斯噪声直到数据变成一个高斯噪声，反向过程中使用 U-Net<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="Ronneberger, O., Fischer, P., &amp; Brox, T. (2015). U-Net: Convolutional Networks for Biomedical Image Segmentation. In Lecture Notes in Computer Science,Medical Image Computing and Computer-Assisted Intervention – MICCAI 2015 (pp. 234–241). https://doi.org/10.1007/978-3-319-24574-4_28">[4]</span></a></sup> 预测反向添加的噪声进行去噪。</p><p>从 <span class="math inline">\(\mathbf{X}_{T}\to\mathbf{X}_{o}\)</span> 是扩散模型的逆过程，这是在生成数据的时候是从一个随机的高斯分布采样一个信号，逐步通过去噪声恢复目标信号， <span class="math inline">\(q(\mathbf{x}_{t-1}|\mathbf{x}_{t})\)</span> 这个过程的解析式是未知的。前向过程是从 <span class="math inline">\(\mathbf{X}_{0}\rightarrow\mathbf{X}_{T}\)</span> ，对一个真实信号逐步加噪声，通过选取合适的噪声尺度，理论上在一定步数以后真实信号也会变成高斯信号，可以把这个过程表示为 <span class="math inline">\(q(\mathbf{x}_{t}|\mathbf{x}_{t-1})\)</span> 。</p><p>利用重参数化技术，我们可以得到从 0 到 t 的直接采样可以得到<span class="math inline">\(q(\mathbf{x}_t|\mathbf{x}_0)=\mathcal{N}(\mathbf{x}_t;\sqrt{\bar{\alpha}}\mathbf{x}_0,(1-\bar{\alpha})\mathbf{I})\)</span> ,其中 <span class="math inline">\(\alpha_{t}=1-\beta_{t},\bar{\alpha}t=\prod i=1^{t}\alpha_{i}\,\beta_{t}\)</span> 表示前向过程每一步的方差。这样在训练的时候我们就可以随机采样一个时刻，然后计算处这个时刻的 <span class="math inline">\(\mathbf{X}_t\)</span>。<span class="math display">\[\mathbf{x}_t(\mathbf{x}_0,\epsilon_t)=\sqrt{\bar{\alpha}_t}\mathbf{x}_0+\sqrt{1-\bar{\alpha}_t}\epsilon_t,\epsilon_t\sim\mathcal{N}(\mathbf{0},\mathbf{I})\]</span> <span class="math inline">\(q(\mathbf{x}_{t-1}|\mathbf{x}_t)\)</span> 是未知的，但是可以求出<span class="math inline">\(q(\mathbf{x}_{t-1}|\mathbf{x}_{t},\mathbf{x}_{0})\)</span> 的解析解<span class="math display">\[q(\mathbf{x}_{t-1}|\mathbf{x}_t,\mathbf{x}_0)=\mathcal{N}(\mathbf{x}_{t-1};\tilde{\mu}(\mathbf{x}_t,\mathbf{x}_0),\tilde{\beta}_t\mathbf{I})\]</span> <span class="math display">\[\tilde{\mu}_t\bigl(\mathbf{x}_t,\mathbf{x}_0\bigr)=\frac{\sqrt{\alpha_t}(1-\bar{\alpha}_{t-1})}{1-\bar{\alpha}_t}\mathbf{x}_t+\frac{\sqrt{\bar{\alpha}_{t-1}}\beta_t}{1-\bar{\alpha}_t}\mathbf{x}_0,\tilde{\beta}=\frac{1-\bar{\alpha}_{t-1}}{1-\bar{\alpha}_t}\beta_t\]</span> DDPM 中推导出了基于噪声误差的损失函数，即通过网络估计噪声，而不是直接估计  <span class="math inline">\(\mathbf{X}_t\)</span> ,损失函数是<span class="math display">\[\begin{aligned}L_t^{\text{simple}}&amp;=\mathbb{E}_{t\sim[1,T],\mathbf{x}_0,\epsilon_t}\left[\|\boldsymbol{\epsilon}_t-\boldsymbol{\epsilon}_\theta(\mathbf{x}_t,t)\|^2\right]\\ &amp;=\mathbb{E}_{t\sim[1,T]\mathbf{x}_0,\epsilon_t}\left[\|\boldsymbol{\epsilon}_t-\boldsymbol{\epsilon}_\theta(\sqrt{\boldsymbol{\alpha}_t}\mathbf{x}_0+\sqrt{1-\overline{\alpha}_t}\boldsymbol{\epsilon}_t,t)\|^2\right]\end{aligned}\]</span></p><figure><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230419191252.png" alt="" /><figcaption>image.png</figcaption></figure><p>DDPM 也有几个改进版本，例如 DDIM<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Song, J., Meng, C., &amp; Ermon, S. (2020). Denoising Diffusion Implicit Models.">[3]</span></a></sup> . DDIM 采用更小的采样步数来加速生成过程。</p><h3 id="ldm">LDM</h3><p>为了降低训练模型时所需要的训练资源，使用 latent space 的 LDM<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="Rombach, R., Blattmann, A., Lorenz, D., Esser, P., &amp; Ommer, B. (2022). High-Resolution Image Synthesis with Latent Diffusion Models. 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). Presented at the 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), New Orleans, LA, USA. https://doi.org/10.1109/cvpr52688.2022.01042">[5]</span></a></sup>被提出.尽管允许通过对相应损失项的低采样忽略感知上无关的细节，但这一步仍然需要在像素空间中进行昂贵的函数计算，这导致了巨大的计算时间和能源需求。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230420095529.png" alt="image.png" /></p><p>横轴是隐变量每个维度压缩的 bit 率，纵坐标是模型的损失。模型在学习的过程中，随着压缩率变大，刚开始模型的损失下降很快，后面下降很慢，但仍然在优化。模型首先学习到的是 semantic 部分的压缩/转换（大框架），这一阶段是人物 semantic 部分转变，然后学习到的是细节部分的压缩/转换，这是 perceptual 细节处的转变。</p><p>LDM 将图像从变换到 latent space 上，采用了 encoder-decoder 的机制，图像生成又回到了以前的架构上,并引入了自注意力机制，将扩散模型转换为更有效的图像生成器。给定图像<span class="math inline">\(x\in\mathbb{R}^{H\times W\times3}\)</span> ,编码器<span class="math inline">\(\mathcal{E}\)</span> 会将图片编码到<span class="math inline">\(z=\mathcal{E}(x)\)</span> ,解码器<span class="math inline">\(\mathcal{D}\)</span> 会从 latent space 中重建图像。给定<span class="math inline">\(\quad\tilde{x}=\mathcal{D}(z)=\mathcal{D}(\mathcal{E}(x))\)</span> ,<span class="math inline">\(z\in\mathbb{R}^{h\times w\times c}\)</span> 。更重要的是下采样倍数<span class="math inline">\({f}={H/h}=W/w\)</span> ,作者采用的是<span class="math inline">\(f=2^m,m \in N\)</span> <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230419191342.png" alt="image.png" /></p><p>Conditioning Mechanisms,这里的条件可以是文字、图像等。将不同模态不同大小的条件转换为一个中间表达空间。通过这种方法可以实现 prompt 指导图象生成。</p><h3 id="consistency-models">Consistency Models</h3><p>Consistency Models<sup id="fnref:20" class="footnote-ref"><a href="#fn:20" rel="footnote"><span class="hint--top hint--rounded" aria-label="Song, Y., Dhariwal, P., Chen, M., &amp; Sutskever, I. (n.d.). Consistency Models.">[20]</span></a></sup> 是 openai 提出的最新的一种图片生成方法</p><p>diffusion<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Ho, JonathanC., Jain, A., &amp; Abbeel, P. (2020). Denoising Diffusion Probabilistic Models.">[2]</span></a></sup> 的采样过程，从先验分布<span class="math inline">\(\left(x_{t_N},t_N\right)\)</span>  出发，推导采样过程<span class="math inline">\(\left(x_{t_N},t_N\right)\to\left(x_{t_{N-1}},t_{N-1}\right)\to...\to\left(x_{t_0},t_0\right)\)</span> .</p><p>Consistency Models 假设存在一个函数<span class="math inline">\(f\)</span>，对于上述过程中的每个点，<span class="math inline">\(f\)</span>都能输出一个相同的值,即<span class="math display">\[\begin{aligned}\boldsymbol{f}(\mathbf{x}_t,t)=\boldsymbol{f}(\mathbf{x}_{t&#39;},t&#39;)\text{for all}t,t&#39;\in[\epsilon,T]\end{aligned}\]</span> 对于轨迹起点<span class="math inline">\(x_0=\epsilon\)</span> ,有<span class="math inline">\(\boldsymbol{f}(\mathbf{x}_{\boldsymbol{\epsilon}},\epsilon)=\mathbf{x}_{\boldsymbol{\epsilon}}\)</span> .那么对于轨迹中任意一点，我们代入先验分布, 即可得到  <span class="math inline">\(f(x_{T},T)=x_{\epsilon}\)</span>  。这样也就完成了一步采样。</p><h2 id="文字生成图片">文字生成图片</h2><p>文字生成图片一个重要的前提条件是建立文字和图片的联系。CLIP 首先通过对比学习的方式实现了文字图片联系。FLIP 和 A-CLIP 对 CLIP 进行了改进。DALLE，GLIDE，DALLE2 是 OPENAI 发布的文生图模型，GLIDE 实现了无分类器引导的图片生成，DALLE2 引入 CLIP 进行图片生成。Imagen 主要使用文字内容进行训练，图片则先生成小图再超分放大。</p><h3 id="clip">CLIP</h3><p>OPENAI 提出的 CLIP<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Radford, A., Kim, J., Hallacy, C., Ramesh, A., Goh, G., Agarwal, S., … Sutskever, I. (2021). Learning Transferable Visual Models From Natural Language Supervision.">[6]</span></a></sup>通过对比学习的方式建立了文字和图片的联系.在训练过程文字和图像分别经过一个文字编码器和图像编码器得到一个对应的向量，将对应的文字向量和图像向量作为正样本，不对应的向量作为负样本进行对比学习。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230419190351.png" alt="image.png" /> 考虑到大部分的数据集的标签都是以单词的形式存在的，比如“bird”，“cat”等等，然而在预训练阶段的文本描述大多都是某个短句，为了填补这种数据分布上的差别，作者考虑用“指示上下文”（guide context）对标签进行扩展。可以用<code>a photo of a &#123;object&#125;</code>作为文本端的输入。推理过程先给定一个提示<code>A photo of a &#123;object&#125;</code> ,这里的 object 可以填入任意的内容，然后通过一个文字编码器得到与输入内容分别对应的一组向量。同时图片经过一个图像编码器得到一个向量，将图片得到的向量分别和填入内容得到的向量计算余弦相似度，相似度最大的则是目标的描述。</p><h3 id="clip-改进">CLIP 改进</h3><p>何凯明团队提出的 FLIP<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="Li, Y., Fan, H., Hu, R., Feichtenhofer, C., &amp; He, K. (2022). Scaling Language-Image Pre-training via Masking.">[7]</span></a></sup>通过对图片加入 mask 有效提升了 CLIP 的推理速度，同期的 A-CLIP<sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="Yang, Y., Huang, W., Wei, Y., Peng, H., Jiang, X., Jiang, H., … Research, M. (n.d.). Attentive Mask CLIP.">[8]</span></a></sup>通过加入注意力机制保留了图像中具有语义信息的部分，避免随意加入 mask 对模型的训练造成影响。如图左侧是 A-CLIP 的过程，右侧是 FLIP 的结果。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230419190233.png" alt="image.png" /></p><p>GLIDE<sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><span class="hint--top hint--rounded" aria-label="Nichol, A., Dhariwal, P., Ramesh, A., Shyam, P., Mishkin, P., McGrew, B., … Chen, M. (n.d.). GLIDE: Towards Photorealistic Image Generation and Editing with Text-Guided Diffusion Models.">[9]</span></a></sup>采用无分类器指导的扩散模型实现了图片生成。GLIDE， Guided Language to Image Diffusion for Generation and Editing，是 OpenAI 推出的文本引导图像生成模型，，但受到的关注相对较少。它甚至在 OpenAI 网站上也没有专门的帖子。GLIDE 生成分辨率为 256×256 像素的图像。实际上在论文中 DALLE2 被称为 unCLIP。参数量上 5B 的 GLIDE 的 FID 得分超过了 12B 的 DALLE</p><h3 id="dlall-e2">DLALL-E2</h3><p>DALL·E2<sup id="fnref:11" class="footnote-ref"><a href="#fn:11" rel="footnote"><span class="hint--top hint--rounded" aria-label="Ramesh, A., Dhariwal, P., Nichol, A., Chu, C., &amp; Chen, M. (n.d.). Hierarchical Text-Conditional Image Generation with CLIP Latents.">[11]</span></a></sup>的架构加入了 CLIP<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Radford, A., Kim, J., Hallacy, C., Ramesh, A., Goh, G., Agarwal, S., … Sutskever, I. (2021). Learning Transferable Visual Models From Natural Language Supervision.">[6]</span></a></sup>，通过锁住 CLIP 的文本编码器和图像编码器可以建立文字和图像的联系，加入 prior 和 img decoder 两个先验，  训练 prior，使文本编码可以转换为图像编码，并训练 decoder 生成最终图像。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230419192846.png" alt="image.png" /></p><h3 id="imagen">Imagen</h3><p>谷歌的 Imagen<sup id="fnref:12" class="footnote-ref"><a href="#fn:12" rel="footnote"><span class="hint--top hint--rounded" aria-label="Saharia, C., Chan, W., Saxena, S., Li, L., Whang, J., Denton, E., … Norouzi, M. (n.d.). Photorealistic Text-to-Image Diffusion Models with Deep Language Understanding.">[12]</span></a></sup>的语言模型替换成了谷歌自家的 T5-XXL，图像生成部分则是先生成小图像再上采样生成大图像，这是因为纯文本训练数据要比高质量图文对数据容易获取的多.</p><h3 id="lora-微调">LoRA 微调</h3><p>Low-Rank Adaptation of Large Language Models (LoRA)<sup id="fnref:29" class="footnote-ref"><a href="#fn:29" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hu, EdwardJ., Shen, Y., Wallis, P., Allen-Zhu, Z., Li, Y., Wang, S., &amp; Chen, W. (2021). LoRA: Low-Rank Adaptation of Large Language Models.">[29]</span></a></sup> 是一种训练方法，可以加速大型模型的训练，同时消耗更少的内存。最初是被用在语言模型上的，在文本理解，文本生成上都取得了不错的效果</p><figure><img src="https://proxy.thisis.plus/202305130808347.png" alt="" /><figcaption>image.png</figcaption></figure><p>做法是在原模型旁边增加一个旁路，通过低秩分解（先降维再升维）来模拟参数的更新量。训练时，原模型固定，只训练降维矩阵 A 和升维矩阵 B，推理时，可将 BA 加到原参数上，不引入额外的推理延迟。此外这还是一个可拔插的模块，可以根据需要选择不同的 rank</p><p>LoRA 的应用包括文字生成图片和图片生成图片.<sup id="fnref:31" class="footnote-ref"><a href="#fn:31" rel="footnote"><span class="hint--top hint--rounded" aria-label="cloneofsimo. (n.d.). _GitHub - Cloneofsimo/lora: Using Low-rank adaptation to quickly fine-tune diffusion models._ GitHub. Retrieved May 13, 2023, from https://github.com/cloneofsimo/lora">[31]</span></a></sup> 是第一个使用 LoRA 微调扩散模型的项目。Chinese-alpaca-lora<sup id="fnref:30" class="footnote-ref"><a href="#fn:30" rel="footnote"><span class="hint--top hint--rounded" aria-label="LC1332. (n.d.). _GitHub - LC1332/Chinese-alpaca-lora: 骆驼:A Chinese finetuned instruction LLaMA. Developed by 陈启源 @ 华中师范大学 &amp; 李鲁鲁 @ 商汤科技 &amp; 冷子昂 @ 商汤科技_. GitHub. Retrieved May 13, 2023, from https://github.com/LC1332/的应用包括文字生成图片和图片生成图片，Chinese-alpaca-lora">[30]</span></a></sup> 是一个由华中师范大学同学维护的中文语言模型，使用 LoRA 进行微调。</p><p>DreamBooth<sup id="fnref:32" class="footnote-ref"><a href="#fn:32" rel="footnote"><span class="hint--top hint--rounded" aria-label="Ruiz, N., Li, Y., Jampani, V., Pritch, Y., Rubinstein, M., &amp; Aberman, K. (2022). DreamBooth: Fine Tuning Text-to-Image Diffusion Models for Subject-Driven Generation.">[32]</span></a></sup> 也可以与 LoRA 结合进行微调<sup id="fnref:33" class="footnote-ref"><a href="#fn:33" rel="footnote"><span class="hint--top hint--rounded" aria-label="_Low-Rank adaptation of large language models (lora)_. (n.d.). Retrieved May 13, 2023, from https://huggingface.co/docs/diffusers/training/lora#dreambooth">[33]</span></a></sup></p><h2 id="图像编辑">图像编辑</h2><p>图像编辑也是文字生成图片的重要应用。Imagic 输入一个文本图像和目标文本，通过多阶段的方法对齐文本和图像编辑图像。ControlNet 通过复制参数为锁住的和可训练的，使模型可以为特定任务进行微调。同时 ControlNet 可以传入 openpose 人的位姿图，canny 边缘图，深度图，Hough 变换生成的图等各种图片可控得生成图片。Google 的 DreamBooth<sup id="fnref:32" class="footnote-ref"><a href="#fn:32" rel="footnote"><span class="hint--top hint--rounded" aria-label="Ruiz, N., Li, Y., Jampani, V., Pritch, Y., Rubinstein, M., &amp; Aberman, K. (2022). DreamBooth: Fine Tuning Text-to-Image Diffusion Models for Subject-Driven Generation.">[32]</span></a></sup> 提出了一种使用少量图片进行微调的方式，提供一种用户训练自己模型的方法。prompt2prompt 通过更改图片对应的 map 的方式特定更改图片。</p><h3 id="imagic">Imagic</h3><p>Imagic<sup id="fnref:10" class="footnote-ref"><a href="#fn:10" rel="footnote"><span class="hint--top hint--rounded" aria-label="Kawar, B., Zada, S., Lang, O., Tov, O., Chang, H., Dekel, T., … Irani, M. (2022). Imagic: Text-Based Real Image Editing with Diffusion Models.">[10]</span></a></sup>提出的方法只需要一个输入图像和一个目标文本(所需的编辑)。它生成一个与输入图像和目标文本一致的文本嵌入，同时微调扩散模型以捕获特定于图像的外观。Imagic 通过多阶段的方法实现了图片编辑，分为优化文本嵌入，微调扩散模型。在优化的嵌入和目标文本嵌入之间进行线性插值三个过程。首先优化文本嵌入，使其生成与输入图像相似的图像。然后，对预训练的生成扩散模型(以优化的嵌入为条件)进行微调，以更好地重建输入图像。最后，在目标文本嵌入和优化后的文本之间进行线性插值，得到一个结合了输入图像和目标文本的表示。然后将这种表示传递给带有微调模型的生成扩散过程，输出最终编辑的图像。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230312151044.png" alt="image.png" /></p><h3 id="controlnet">ControlNet</h3><p>ControlNet<sup id="fnref:13" class="footnote-ref"><a href="#fn:13" rel="footnote"><span class="hint--top hint--rounded" aria-label="Zhang, L., &amp; Agrawala, M. (n.d.). Adding Conditional Control to Text-to-Image Diffusion Models.">[13]</span></a></sup>通过对参数复制，将参数分为锁住的和可训练的。锁着的参数从大量的图片文本对中学习更通用的信息，可学习的参数在特定的任务上进行微调,让模型在个人电脑和大型计算集群上都可以获得很好的训练效果。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230419193542.png" alt="image.png" /> 以 2D 图像为例，给定一张图像(特征图)<span class="math inline">\(\boldsymbol{x}\in\mathbb{R}^{h\times w\times c}\)</span> ,<span class="math inline">\(h,w,c\)</span> 分别代表高度，宽度，深度。一个将 x 转换为 y 的神经网络我们可以以将他记作<span class="math inline">\(\mathcal{F(\cdot;\Theta)}\)</span> 我们把 zero convolution(就是 1 <span class="math inline">\(*\)</span> 1 卷积)记作<span class="math inline">\(\mathcal{Z}(\cdot;\cdot)\)</span> ,那么 ControlNet 就可以记作<span class="math display">\[\begin{matrix}\boldsymbol{y_c}=\mathcal{F}(\boldsymbol{x};\Theta)+\mathcal{Z}(\boldsymbol{F}(\boldsymbol{x}+\mathcal{Z}(\boldsymbol{c};\Theta_{\text{z1}});\Theta_{\text{z2}})\end{matrix}\]</span> 由于 zero convolution 的权重初始为 0，那么就有<span class="math display">\[\begin{cases}\mathcal{Z}(c;\Theta_{\text{z1}})=\mathbf{0}\\ \mathcal{F}(\boldsymbol{x}+\mathcal{Z}(\boldsymbol{c};\Theta_{\text{z1}});\Theta_{\text{c}})=\mathcal{F}(\boldsymbol{x};\Theta_{\text{c}})=\mathcal{F}(\boldsymbol{x};\Theta_{\text{c}})\\ \mathcal{Z}(\mathcal{F}(\boldsymbol{x}+\mathcal{Z}(\boldsymbol{c};\Theta_{\text{z1}});\Theta_{\text{c}});\Theta_{\text{z2}})=\mathcal{Z}(\mathcal{F}(\boldsymbol{x};\Theta_{\text{c}});\Theta_{\text{z2}})=\mathbf{0}\end{cases}\]</span> 可以得出<span class="math inline">\(y_c=y\)</span>,即当 ControlNet 被应用到任何一个网络上时，不会对这个网络的效果产生任何影响。它完美保留了任何神经网络块的能力、功能和结果质量，任何进一步优化都将随着微调而变得很快。</p><p>在训练过程中，作者随机的将 50%的 prompt 换成了空的 prompt，作者认为这可以增强模型从文本内容识别语义信息的能力。这主要是因为当 stable diffusion 模型看不到提示时，decoder 倾向于从输入控制图中学习更多的语义作为提示的替代品。</p><p>ControlNet 还给出了在个人电脑和大型计算集群上进行训练的方式。当计算设备有限时，作者发现部分打破 ControlNet 与 stable diffusion 之间的联系可以加速收敛。默认情况下是将 ControlNet 连接到“SD Middle Block”和“SD Decoder Block 1,2,3,4”(stable diffuion 的模块)。作者发现，只连接 Middle Block 而不连接 Decoder Block 1,2,3,4 可以将训练速度提高 1.6 倍(在 RTX 3070TI 笔记本电脑 GPU 上测试)。当模型在结果和条件之间表现出合理的关联时，这些断开连接的链接可以在持续训练中再次连接，以促进精确控制。</p><p>openai 在论文还比较了在不同的数据集上不同的编码器的效果</p><figure><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230420145907.png" alt="" /><figcaption>image.png</figcaption></figure><p>MutilDiffusion<sup id="fnref:14" class="footnote-ref"><a href="#fn:14" rel="footnote"><span class="hint--top hint--rounded" aria-label="Bar-Tal, O., Yariv, L., Lipman, Y., &amp; Dekel, T. (2023). MultiDiffusion: Fusing Diffusion Paths for Controlled Image Generation.">[14]</span></a></sup> 将图片分为几个部分分别进行 diffusion，然后将他们拼在一起通过一个全局去噪网络可以更好的控制生成图片中物体的位置。</p><h3 id="dreambooth">DreamBooth</h3><p>DreamBooth<sup id="fnref:32" class="footnote-ref"><a href="#fn:32" rel="footnote"><span class="hint--top hint--rounded" aria-label="Ruiz, N., Li, Y., Jampani, V., Pritch, Y., Rubinstein, M., &amp; Aberman, K. (2022). DreamBooth: Fine Tuning Text-to-Image Diffusion Models for Subject-Driven Generation.">[32]</span></a></sup> 是 Google 提出的一个通过少量图片微调 diffusion model 的方法。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230419195507.png" alt="image.png" /> 要训练自己数据最直观的方法，就是把自己的图片加入模型迭代时一起训练。但会带来两个问题，一个是过拟合，另一个是语义漂移(language drift)。总的来说 DreamBooth 的贡献在两方面，一方面是给定主题可以生成特定的主题的图片，一方面给定少数镜头微调 diffusion model 的方法同时保留输入图片的语义信息。 而 Dreambooth 的优势就在于能避免上述的两个问题。主要方法就是使用一个具有特殊含义而且比较少见的词，训练的图片最好有不同角度和光线下的图片。下图是 DreamBooth 论文给出的不同模型效果的对比图 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230419195421.png" alt="image.png" /></p><h4 id="cascade-ef-gan">Cascade EF-GAN</h4><p>Cascade EF-GAN<sup id="fnref:28" class="footnote-ref"><a href="#fn:28" rel="footnote"><span class="hint--top hint--rounded" aria-label="Wu, R., Zhang, G., Lu, S., &amp; Chen, T. (2020, March 12). _Cascade EF-GAN: Progressive facial expression editing with local focuses_. arXiv.Org. https://arxiv.org/abs/2003.05905">[28]</span></a></sup> 是一种级联式的人脸编辑方式，可以更好地保留与身份相关的特征和细节，特别是在眼睛、鼻子和嘴巴周围，进一步帮助减少生成的面部图像中的伪影和模糊。</p><p>作者设计了一种级联式网络，同原本对一张人脸做更改变成了对一张人脸和脸上几个部分同时做更改。因为对一个人类来说分辨一个人的方式就是看人的眼睛，鼻子和嘴巴。Cascade EF-GAN 能够识别面部表情编辑中局部重点的重要性，并通过几个局部重点捕捉身份相关特征，有效地减轻编辑产生的伪影和模糊。</p><figure><img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230312143755.png" alt="" /><figcaption>image.png</figcaption></figure><p>Cascade EF-GAN 中的生成模型由一个 Expression Transformer 和一个 Refiner 组成。Expression Transformer 执行带有局部焦点的表情编辑，Refiner 融合表情转换器的输出并细化最终编辑。</p><p>Expression Transformer 通过在全局和局部分支中处理面部图像来解决这个问题，其中全局分支捕获全局面部结构，局部分支专注于更详细的面部特征。Transformer 将面部图像和目标表情标签作为输入。<strong>所有分支共享相似的网络架构，但不共享权重</strong></p><p>此外注意力被引入到全局和局部分支，以更好地捕捉细节和抑制伪影。在 GANimation [32]中，使用视觉注意力来引导网络集中于转换与表情相关的区域。然而，在单个全局图像中应用注意力往往会引入模糊的注意力响应，如图 3 的第 4 列所示。这是因为全局注意力倾向于关注最显著的变化，例如图 3 中的嘴部区域，而眼睛和鼻子周围的细微变化则没有受到足够的关注。前面提到的局部分支中的独占式注意力有助于在局部区域实现更锐利的响应，如图 3 的第 3 列所示。 <img src="https://cdn.jsdelivr.net/gh/StudyingLover/anything/20230312144711.png" alt="image.png" /></p><p>每个分支输出颜色特征图 M*C 和注意图 M_A。对于原始输入图像 I_in，每个分支的初始输出通过以下方式生成 <span class="math display">\[\mathcal{I}*{init}=M*A\otimes M_C+(1-M_A)\otimes I*{in}\]</span></p><p>Refiner 负责融合表情转换器不同分支的输出，生成最终的表情编辑。如图 2 所示，三个局部分支的输出首先根据它们在面部图像中的各自位置缝合成单个图像。缝合的图像然后与全局分支的输出连接，并馈送到细化器以生成最终的表情编辑。</p><h4 id="prompt2prompt">prompt2prompt</h4><p>prompt2prompt<sup id="fnref:19" class="footnote-ref"><a href="#fn:19" rel="footnote"><span class="hint--top hint--rounded" aria-label="Mokady, R., Hertz, A., Aberman, K., Pritch, Y., &amp; Cohen-Or, D. (2022). Null-text Inversion for Editing Real Images using Guided Diffusion Models.">[19]</span></a></sup> 是 Google 提出的一种基于 Imagen 的图像编辑方法，相比于直接 text2image 生成，文本引导图片生成要求原来图像绝大部分区变化不大，先前的方法需要用户指定 mask 来引导生成。prompt2prompt 的主要方法是将交叉注意力机制引入 diffusion 中，得到每个 token 对应的 attention map，一种有三种操作的方式</p><ol type="1"><li>token 换词，那么直接替换 attention map 即可。</li><li>加词，则是直接在对应位置加入新的 attention map。</li><li>token 增强——直接提高对应的 map 的权重。</li></ol><p>但这种方法也有一些局限，例如需要用户给一个合理的 prompt，细节的生成不太好，不能对图中的物体进行移位操作。</p><h4 id="instructpix2pix">InstructPix2Pix</h4><p>InstructPix2Pix<sup id="fnref:27" class="footnote-ref"><a href="#fn:27" rel="footnote"><span class="hint--top hint--rounded" aria-label="Brooks, T., Holynski, A., &amp; Efros, AlexeiA. (2022). InstructPix2Pix: Learning to Follow Image Editing Instructions.">[27]</span></a></sup> 是一种无需微调就可以快速编辑图像的方法，结合了两个大型预训练模型的知识——语言模型和文本到图像模型——生成了大量的图像编辑示例数据集。通过在这些数据上进行训练，并在推理时能够适用于真实图像和用户编写的指令。但也有一些局限例如数据带来的偏差，能会对图像进行不必要的过度更改。</p><h2 id="多模态">多模态</h2><p>多模态学习是指从多个模态表达或感知事物。  多模态可归类为同质性的模态，例如从两台相机中分别拍摄的图片，异质性的模态，例如图片与文本语言的关系。Jeff Dean 在 2019 年年底 NeurIPS 大会上的一个采访报道，讲到了 2020 年机器学习趋势：多任务和多模态学习将成为突破口。</p><h3 id="clip-1">CLIP</h3><p>CLIP<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Radford, A., Kim, J., Hallacy, C., Ramesh, A., Goh, G., Agarwal, S., … Sutskever, I. (2021). Learning Transferable Visual Models From Natural Language Supervision.">[6]</span></a></sup> 是 openai 关于文本和图像的一片工作，采用对比学习实现了图片的理解。</p><p>AudioCLIP 在原本的 CLIP 架构中加入了声音的模态。</p><h3 id="i3d">I3D</h3><p>I3D<sup id="fnref:34" class="footnote-ref"><a href="#fn:34" rel="footnote"><span class="hint--top hint--rounded" aria-label="Carreira, J., &amp; Zisserman, A. (2017). Quo Vadis, Action Recognition? A New Model and the Kinetics Dataset. 2017 IEEE Conference on Computer Vision and Pattern Recognition (CVPR). Presented at the 2017 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), Honolulu, HI. https://doi.org/10.1109/cvpr.2017.502">[34]</span></a></sup> 是一个视频理解模型，采用双流网络的架构，他的核心贡献是提出了如何对 2d 网络进行膨胀操作，同时提出了一个新的数据集 Kinetics</p><figure><img src="https://proxy.thisis.plus/20230423220521.png" alt="" /><figcaption>image.png</figcaption></figure><p>这篇文章提出的模型被称为 Two-Stream Inflated 3D ConvNets</p><p>Inflate 是模型的核心操作，含义是将一个 2d 模型"膨胀"成 3d 模型，做法很简单，就是把一个<span class="math inline">\(N*N\)</span> 的层变成<span class="math inline">\(N*N*N\)</span> ,同时也将参数复制了<span class="math inline">\(N\)</span> 遍。</p><h3 id="segement-anything">Segement anything</h3><p>Segement anything<sup id="fnref:15" class="footnote-ref"><a href="#fn:15" rel="footnote"><span class="hint--top hint--rounded" aria-label="Kirillov, A., Mintun, E., Ravi, N., Mao, H., Rolland, C., Gustafson, L., … Girshick, R. (n.d.). Segment Anything.">[15]</span></a></sup> 是 meta 最近一篇图像分割的工作，使用一个 SOTA 的 zero-shot 目标检测器提取物体 box 和类别，然后输入给 SAM 模型出 mask，使得模型可以根据文本输入检测和分割任意物体。</p><p>在社区的努力下，实现了 Segement anything 和 stable diffusion 的协同<sup id="fnref:36" class="footnote-ref"><a href="#fn:36" rel="footnote"><span class="hint--top hint--rounded" aria-label="IDEA-Research. (n.d.). _GitHub - IDEA-Research/Grounded-Segment-Anything: Marrying grounding DINO with segment anything &amp; stable diffusion &amp; tag2text &amp; BLIP &amp; whisper &amp; chatbot - Automatically detect , segment and generate anything with image, text, and audio inputs_. GitHub. Retrieved May 13, 2023, from https://github.com/IDEA-Research/Grounded-Segment-Anything">[36]</span></a></sup></p><h3 id="imagebind">ImageBind</h3><p>ImageBind<sup id="fnref:35" class="footnote-ref"><a href="#fn:35" rel="footnote"><span class="hint--top hint--rounded" aria-label="Girdhar, R., El-Nouby, A., Liu, Z., Singh, M., Alwala, K., Joulin, A., &amp; Misra, I. (2023). ImageBind: One Embedding Space To Bind Them All.">[35]</span></a></sup> 是 meta 的最新工作,是一个学习六种不同模态的方法-图像、文本、音频、深度、温度和 IMU 数据。此外在学习过程中不需要提供所有模态的信息，作者发现只要将每个模态的嵌入对齐到图像嵌入，就会导致所有模态的 emergent alignment(涌现现象)。</p><p>ImageBind 的目标是通过使用图像将所有模态绑定在一起，学习所有模态的单一联合嵌入空间。通过使用 Web 数据将每个模态的嵌入与图像嵌入对齐，例如使用带有 IMU 的自我中心相机捕获的视频数据将文本对齐到图像，将 IMU 对齐到视频，最后可以获得 zero-shot 的能力。然而，一个模态的不能直接应用于其他两个模态的组合，例如视频不能直接在图片-IMU 上使用。</p><p>IMAGEBIND 使用模态对<span class="math inline">\((I，M)\)</span> , 其中<span class="math inline">\(I\)</span>代表图像，<span class="math inline">\(M\)</span>是另一种模态，来学习单个联合嵌入.作者使用包含广泛语义概念的（图像，文本）配对的大规模网络数据集。也使用其他模态本身的自我监督配对，如音频、深度、热和惯性测量单元（IMU）与图像。使用 InfoNCE<sup id="fnref:38" class="footnote-ref"><a href="#fn:38" rel="footnote"><span class="hint--top hint--rounded" aria-label="Oord, A., Li, Y., &amp; Vinyals, O. (2018). Representation Learning with Contrastive Predictive Coding.">[38]</span></a></sup>损失优化嵌入和编码器。<span class="math display">\[L_{\mathcal{I},\mathcal{M}}=-\log\frac{\exp(\mathbf{q}_i^{\text{T}}\mathbf{k}_i/\tau)}{\exp(\mathbf{q}_i^{\text{T}}\mathbf{k}_i/\tau)+\sum_{j\neq i}\exp(\mathbf{q}_i^{\text{T}}\mathbf{k}_j/\tau)}\]</span></p><p>尽管 ImageBind 只是用了六种模态进行训练，但是未来可以使用更多的数据和模态进行训练，将实现更丰富的以人为中心的 AI 模型。</p><h2 id="prompt">prompt</h2><p>prompt 提示可以给文字生成图片提供语义信息。</p><h4 id="clip-2">CLIP</h4><p>CLIP<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Radford, A., Kim, J., Hallacy, C., Ramesh, A., Goh, G., Agarwal, S., … Sutskever, I. (2021). Learning Transferable Visual Models From Natural Language Supervision.">[6]</span></a></sup> 使用了<code>A photo of a &#123;object&#125;</code>作为 prompt，<code>object</code> 是推理过程中的选择项，作者也讨论了大量的 prompt 相关的问题。一个常见的问题是一词多义。当一个类的名称是提供给 CLIP 文本编码器的唯一信息时，由于缺乏上下文，它无法区分哪个词的含义。在某些情况下，同一个单词的多个含义可能作为不同的类包含在同一个数据集中。另一个问题是，在我们的预训练数据集中，与图像配对的文本只是一个单词的情况相对较少。通常文本是一个完整的句子，以某种方式描述图像。通过使用<code>A photo of a &#123;object&#125;</code> 就可以使 ImageNet 的准确率提高 1.3%。作者还发现在不同的数据集上使用不同的 prompt 可以取得不同的结果。</p><h4 id="controlnet-1">ControlNet</h4><p>在 ControlNet<sup id="fnref:13" class="footnote-ref"><a href="#fn:13" rel="footnote"><span class="hint--top hint--rounded" aria-label="Zhang, L., &amp; Agrawala, M. (n.d.). Adding Conditional Control to Text-to-Image Diffusion Models.">[13]</span></a></sup> 模型采取了<em>三种</em> prompt</p><ol type="1"><li>No prompt：也就是""</li><li>Default prompt:由于 stable diffusion 本质上是使用 prompt 进行训练的，因此空字符串可能是模型的意外输入，如果没有提供提示，SD 往往会生成随机纹理图。更好的设置是使用无意义的提示，"an image", "a nice image", "a professional image",etc。在作者的设置中，使用"a professional, detailed, high-quality image"作为 default prompt。</li><li>Automatic prompt:为了测试 fully automatic pipeline 的 SOTA，作者还尝试使用 fully automatic pipeline（例如，BLIP）使用“default prompt”模式获得的结果生成 prompts。作者会使用生成的提示再次扩散。</li><li>User prompt：用户自定义的输入</li></ol><h4 id="prompt2prompt-1">prompt2prompt</h4><p>prompt2prompt<sup id="fnref:19" class="footnote-ref"><a href="#fn:19" rel="footnote"><span class="hint--top hint--rounded" aria-label="Mokady, R., Hertz, A., Aberman, K., Pritch, Y., &amp; Cohen-Or, D. (2022). Null-text Inversion for Editing Real Images using Guided Diffusion Models.">[19]</span></a></sup>的操作就是通过 prompt 进行的。</p><h3 id="clip-interrogator">CLIP-interrogator</h3><p>在背景图生成这个任务下有一个可能需要的步骤，从给出的人物图得到一些 prompt 生成图片，CLIP-interrogator 就是为了这样的任务而生的，开源的有 CLIP-Interrogator<sup id="fnref:16" class="footnote-ref"><a href="#fn:16" rel="footnote"><span class="hint--top hint--rounded" aria-label="_CLIP interrogator_. (n.d.). A Hugging Face Space by Pharma. Retrieved April 19, 2023, from https://huggingface.co/spaces/pharma/CLIP-Interrogator">[16]</span></a></sup><sup id="fnref:18" class="footnote-ref"><a href="#fn:18" rel="footnote"><span class="hint--top hint--rounded" aria-label="pharmapsychotic. (n.d.). _GitHub - Pharmapsychotic/clip-interrogator: Image to prompt with BLIP and CLIP_. GitHub. Retrieved April 19, 2023, from https://github.com/pharmapsychotic/clip-interrogator">[18]</span></a></sup> 和 CLIP-Interrogator2<sup id="fnref:17" class="footnote-ref"><a href="#fn:17" rel="footnote"><span class="hint--top hint--rounded" aria-label="_CLIP interrogator 2_. (n.d.). A Hugging Face Space by Fffiloni. Retrieved April 19, 2023, from https://huggingface.co/spaces/fffiloni/CLIP-Interrogator-2">[17]</span></a></sup> .模型主要通过 CLIP 对以后数据集进行匹配获取 prompt、而通过 BLIP 获得图像最直观的理解。Code 底层也是需要 CLIP 和 BLIP 作为核心完成后面的工作。</p><h2 id="数据集">数据集</h2><h3 id="wit">WIT</h3><p>openai 在 CLIP<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Radford, A., Kim, J., Hallacy, C., Ramesh, A., Goh, G., Agarwal, S., … Sutskever, I. (2021). Learning Transferable Visual Models From Natural Language Supervision.">[6]</span></a></sup> 提到他们构建了一个新的数据集，从互联网上各种公开可用的资源中收集了 4 亿(图像，文本)对。为了尝试覆盖尽可能广泛的视觉内容，对每一类都有大概有 2000 对对整个数据集进行平衡。结果数据集的总字数与用于训练 GPT-2 的 WebText 数据集相似。这个数据集称为 WebImageText 的 WIT。</p><p>作者团队从直接与摄影师一起工作的提供商那里获得了一组新的高分辨率的 11M 图像。即使在下采样之后，这些图像的分辨率也明显高于许多现有的视觉数据集。</p><h3 id="sa-1b">SA-1B</h3><p>segment anything<sup id="fnref:15" class="footnote-ref"><a href="#fn:15" rel="footnote"><span class="hint--top hint--rounded" aria-label="Kirillov, A., Mintun, E., Ravi, N., Mao, H., Rolland, C., Gustafson, L., … Girshick, R. (n.d.). Segment Anything.">[15]</span></a></sup> 是 Meta 最新提出的一个用于目标分割的方法，他们为了更好的训练模型制作了一个迄今为止最大的分割数据集，1100 万张在 10 亿次授权且尊重隐私的图像上的数据集，同时开源了他们的数据集，此外还有一种 Data engine 的方法来快速生成数据集。</p><p>Data engine 分为三个阶段：（1）模型辅助手动注释阶段，（2）混合自动预测掩码和模型辅助注释的半自动阶段，以及（3）全自动阶段，</p><h4 id="手动阶段">手动阶段</h4><p>在第一阶段，类似于经典的交互式分割，一组专业注释者通过使用由 SAM 驱动的基于浏览器的交互分割工具点击前景/背景对象点来标记掩码。可以使用像素精确的“刷”和“擦除”工具来细化掩码。模型辅助注释直接在浏览器内实时运行（使用预先计算的图像嵌入），从而实现真正的交互体验。标注不受语义约束，可以自由地标注"stuff" and "things"</p><p><strong>注释者被要求按突出顺序标记对象，一旦掩码需要超过 30 秒进行注释，便鼓励继续下一个图像。</strong></p><p>在 SOTA 之后，SAM 就开始使用公共数据集进行训练，在经过了足够多的数据标注后，就用新标注的数据重新训练。随着收集更多的掩码，图像使用了 ViT-H 作为编码器。这样的模型训练一共进行了六次。随着模型的改进，每个掩码的平均注释时间从 34 秒减少到 14 秒。随着 SAM 的改进，每张图像的平均掩码数从 20 个掩码增加到 44 个掩码。总体而言，作者在这个阶段从 120k 张图像收集了 4.3M 掩码。</p><h4 id="半自动化阶段">半自动化阶段</h4><p>这个阶段的目标是增加 mask 的多样性。为了将标记集中在不太突出的对象上，首先自动检测 confident masks。然后向注释者展示了用这些掩码预先填充的图像，并要求他们注释任何额外的未注释对象。为了检测 confident masks，作者使用通用的“对象”类别在所有第一阶段掩码上训练了一个边界框检测器。在这个阶段，作者在 180k 图像中收集了一个额外的 5.9M 掩码（总共 10.2M 掩码）。在第一阶段，在新收集的数据（5 次）上定期重新训练模型。每个掩码的平均注释时间可以回到了到 34 秒（不包括自动掩码），因为这些对象对标签更具挑战性。每张图像的平均掩码数从 44 个掩码到 72 个掩码（包括自动掩码）。</p><h4 id="全自动化阶段">全自动化阶段</h4><p>这个阶段的主要目的是解决歧义</p><p>这个过程作者使用<span class="math inline">\(32*32\)</span>网格的点对图像进行预测，并为每个点预测一组可能对应于有效对象的掩码。如果说一个点位于一个部件或子部件上，我们的模型将返回子部分，部分和整个对象(subpart, part, and whole object)。利用模型中的 IoU 预测模块来选择 confident mask,IOU 阈值是 0.7，那么这个掩码就被认为是是稳定的。为了进一步提高小 mask 的质量，还处理了多个重叠的放大 mask。</p><h3 id="kinetics">Kinetics</h3><p>Kinetics 是<sup id="fnref:34" class="footnote-ref"><a href="#fn:34" rel="footnote"><span class="hint--top hint--rounded" aria-label="Carreira, J., &amp; Zisserman, A. (2017). Quo Vadis, Action Recognition? A New Model and the Kinetics Dataset. 2017 IEEE Conference on Computer Vision and Pattern Recognition (CVPR). Presented at the 2017 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), Honolulu, HI. https://doi.org/10.1109/cvpr.2017.502">[34]</span></a></sup> 提出的一个视频理解数据集，Kinetics 有 400 个人体动作类，每个类有 400 多个例子，每个都来自一个独特的 YouTube 视频。</p><h2 id="参考文献">参考文献</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Sohl-Dickstein, J., Weiss, EricL., Maheswaranathan, N., &amp; Ganguli, S. (2015). Deep Unsupervised Learning using Nonequilibrium Thermodynamics. <a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>Ho, JonathanC., Jain, A., &amp; Abbeel, P. (2020). Denoising Diffusion Probabilistic Models. <a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>Song, J., Meng, C., &amp; Ermon, S. (2020). Denoising Diffusion Implicit Models. <a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>Ronneberger, O., Fischer, P., &amp; Brox, T. (2015). U-Net: Convolutional Networks for Biomedical Image Segmentation. In Lecture Notes in Computer Science,Medical Image Computing and Computer-Assisted Intervention – MICCAI 2015 (pp. 234–241). https://doi.org/10.1007/978-3-319-24574-4_28 <a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>Rombach, R., Blattmann, A., Lorenz, D., Esser, P., &amp; Ommer, B. (2022). High-Resolution Image Synthesis with Latent Diffusion Models. 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). Presented at the 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), New Orleans, LA, USA. https://doi.org/10.1109/cvpr52688.2022.01042 <a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>Radford, A., Kim, J., Hallacy, C., Ramesh, A., Goh, G., Agarwal, S., … Sutskever, I. (2021). Learning Transferable Visual Models From Natural Language Supervision. <a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:7" class="footnote-text"><span>Li, Y., Fan, H., Hu, R., Feichtenhofer, C., &amp; He, K. (2022). Scaling Language-Image Pre-training via Masking. <a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:8" class="footnote-text"><span>Yang, Y., Huang, W., Wei, Y., Peng, H., Jiang, X., Jiang, H., … Research, M. (n.d.). Attentive Mask CLIP. <a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:9" class="footnote-text"><span>Nichol, A., Dhariwal, P., Ramesh, A., Shyam, P., Mishkin, P., McGrew, B., … Chen, M. (n.d.). GLIDE: Towards Photorealistic Image Generation and Editing with Text-Guided Diffusion Models. <a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:10" class="footnote-text"><span>Kawar, B., Zada, S., Lang, O., Tov, O., Chang, H., Dekel, T., … Irani, M. (2022). Imagic: Text-Based Real Image Editing with Diffusion Models. <a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:11" class="footnote-text"><span>Ramesh, A., Dhariwal, P., Nichol, A., Chu, C., &amp; Chen, M. (n.d.). Hierarchical Text-Conditional Image Generation with CLIP Latents. <a href="#fnref:11" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:12" class="footnote-text"><span>Saharia, C., Chan, W., Saxena, S., Li, L., Whang, J., Denton, E., … Norouzi, M. (n.d.). Photorealistic Text-to-Image Diffusion Models with Deep Language Understanding. <a href="#fnref:12" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:13" class="footnote-text"><span>Zhang, L., &amp; Agrawala, M. (n.d.). Adding Conditional Control to Text-to-Image Diffusion Models. <a href="#fnref:13" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:14" class="footnote-text"><span>Bar-Tal, O., Yariv, L., Lipman, Y., &amp; Dekel, T. (2023). MultiDiffusion: Fusing Diffusion Paths for Controlled Image Generation. <a href="#fnref:14" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:15" class="footnote-text"><span>Kirillov, A., Mintun, E., Ravi, N., Mao, H., Rolland, C., Gustafson, L., … Girshick, R. (n.d.). Segment Anything. <a href="#fnref:15" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:16" class="footnote-text"><span><em>CLIP interrogator</em>. (n.d.). A Hugging Face Space by Pharma. Retrieved April 19, 2023, from https://huggingface.co/spaces/pharma/CLIP-Interrogator <a href="#fnref:16" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:17" class="footnote-text"><span><em>CLIP interrogator 2</em>. (n.d.). A Hugging Face Space by Fffiloni. Retrieved April 19, 2023, from https://huggingface.co/spaces/fffiloni/CLIP-Interrogator-2 <a href="#fnref:17" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:18" class="footnote-text"><span>pharmapsychotic. (n.d.). <em>GitHub - Pharmapsychotic/clip-interrogator: Image to prompt with BLIP and CLIP</em>. GitHub. Retrieved April 19, 2023, from https://github.com/pharmapsychotic/clip-interrogator <a href="#fnref:18" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:19" class="footnote-text"><span>Mokady, R., Hertz, A., Aberman, K., Pritch, Y., &amp; Cohen-Or, D. (2022). Null-text Inversion for Editing Real Images using Guided Diffusion Models. <a href="#fnref:19" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:20" class="footnote-text"><span>Song, Y., Dhariwal, P., Chen, M., &amp; Sutskever, I. (n.d.). Consistency Models. <a href="#fnref:20" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:21" class="footnote-text"><span>Abbas, M., Kivinen, J., &amp; Raiko, T. (2016). International Conference on Learning Representations (ICLR). <a href="#fnref:21" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:22" class="footnote-text"><span>Alaluf, Y., Tov, O., Mokady, R., Gal, R., &amp; Bermano, A. (2021). HyperStyle: StyleGAN Inversion with HyperNetworks for Real Image Editing. <a href="#fnref:22" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:23" class="footnote-text"><span>Dinh, TanM., Tran, A., Nguyen, R., &amp; Hua, B.-S. (n.d.). HyperInverter: Improving StyleGAN Inversion via Hypernetwork. <a href="#fnref:23" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:24" class="footnote-text"><span>Heathen. github.com/automatic1111/stable-diffusion-webui/discussions/2670, hypernetwork style training, a tiny guide, 2022. <a href="#fnref:24" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:25" class="footnote-text"><span>Poole, B., Jain, A., Barron, J., Mildenhall, B., Research, G., &amp; Berkeley, U. (n.d.). DREAMFUSION: TEXT-TO-3D USING 2D DIFFUSION. <a href="#fnref:25" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:26" class="footnote-text"><span>Nichol, A., Jun, H., Dhariwal, P., Mishkin, P., &amp; Chen, M. (2022). Point-E: A System for Generating 3D Point Clouds from Complex Prompts. <a href="#fnref:26" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:27" class="footnote-text"><span>Brooks, T., Holynski, A., &amp; Efros, AlexeiA. (2022). InstructPix2Pix: Learning to Follow Image Editing Instructions. <a href="#fnref:27" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:28" class="footnote-text"><span>Wu, R., Zhang, G., Lu, S., &amp; Chen, T. (2020, March 12). <em>Cascade EF-GAN: Progressive facial expression editing with local focuses</em>. arXiv.Org. https://arxiv.org/abs/2003.05905 <a href="#fnref:28" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:29" class="footnote-text"><span>Hu, EdwardJ., Shen, Y., Wallis, P., Allen-Zhu, Z., Li, Y., Wang, S., &amp; Chen, W. (2021). LoRA: Low-Rank Adaptation of Large Language Models. <a href="#fnref:29" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:30" class="footnote-text"><span>LC1332. (n.d.). <em>GitHub - LC1332/Chinese-alpaca-lora: 骆驼:A Chinese finetuned instruction LLaMA. Developed by 陈启源 @ 华中师范大学 &amp; 李鲁鲁 @ 商汤科技 &amp; 冷子昂 @ 商汤科技</em>. GitHub. Retrieved May 13, 2023, from https://github.com/LC1332/的应用包括文字生成图片和图片生成图片，Chinese-alpaca-lora <a href="#fnref:30" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:31" class="footnote-text"><span>cloneofsimo. (n.d.). <em>GitHub - Cloneofsimo/lora: Using Low-rank adaptation to quickly fine-tune diffusion models.</em> GitHub. Retrieved May 13, 2023, from https://github.com/cloneofsimo/lora <a href="#fnref:31" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:32" class="footnote-text"><span>Ruiz, N., Li, Y., Jampani, V., Pritch, Y., Rubinstein, M., &amp; Aberman, K. (2022). DreamBooth: Fine Tuning Text-to-Image Diffusion Models for Subject-Driven Generation. <a href="#fnref:32" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:33" class="footnote-text"><span><em>Low-Rank adaptation of large language models (lora)</em>. (n.d.). Retrieved May 13, 2023, from https://huggingface.co/docs/diffusers/training/lora#dreambooth <a href="#fnref:33" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:34" class="footnote-text"><span>Carreira, J., &amp; Zisserman, A. (2017). Quo Vadis, Action Recognition? A New Model and the Kinetics Dataset. 2017 IEEE Conference on Computer Vision and Pattern Recognition (CVPR). Presented at the 2017 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), Honolulu, HI. https://doi.org/10.1109/cvpr.2017.502 <a href="#fnref:34" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:35" class="footnote-text"><span>Girdhar, R., El-Nouby, A., Liu, Z., Singh, M., Alwala, K., Joulin, A., &amp; Misra, I. (2023). ImageBind: One Embedding Space To Bind Them All. <a href="#fnref:35" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:36" class="footnote-text"><span>IDEA-Research. (n.d.). <em>GitHub - IDEA-Research/Grounded-Segment-Anything: Marrying grounding DINO with segment anything &amp; stable diffusion &amp; tag2text &amp; BLIP &amp; whisper &amp; chatbot - Automatically detect , segment and generate anything with image, text, and audio inputs</em>. GitHub. Retrieved May 13, 2023, from https://github.com/IDEA-Research/Grounded-Segment-Anything <a href="#fnref:36" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:37" class="footnote-text"><span>Guzhov, A., Raue, F., Hees, J., &amp; Dengel, A. (2021). AudioCLIP: Extending CLIP to Image, Text and Audio. <a href="#fnref:37" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:38" class="footnote-text"><span>Oord, A., Li, Y., &amp; Vinyals, O. (2018). Representation Learning with Contrastive Predictive Coding. <a href="#fnref:38" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文字生成图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Segment Anything笔记</title>
    <link href="/2023/04/07/Segment%20Anything%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/04/07/Segment%20Anything%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="segment-anything笔记">Segment Anything笔记</h1><p>Segment Anything project是一个用于图像分割的新任务、模型和数据集。在他刚出来的那一天，知乎等平台就已经高呼CV已死。为了这个项目，作者创建了迄今为止最大的分割数据集，1100万张在10亿次授权且尊重隐私的图像上的数据集。模型也被设计和训练成了promptable,就是说可以给他一些提示。作者在多个数据集测试了他的结果并认为结果令人满意。</p><figure><img src="https://proxy.thisis.plus/20230407073917.png" alt="" /><figcaption>image.png</figcaption></figure><p>代码开源<a href="https://github.com/facebookresearch/segment-anything">GitHub</a></p><p>项目地址<a href="https://segment-anything.com/">https://segment-anything.com/</a></p><h2 id="引言">引言</h2><p>作者在引言中讨论了NLP工作中prompt的巨大作用，并回顾了视觉领域多模态的重要工作CLIP和ALIGN，最后说明了他们的目标和工作。</p><p>首先，在网络上经过预训练的大型语言模型凭借其强大的zero-shot和few-shot能力革新NLP，prompt的引入使得这些模型zero-shot和few-shot性能与微调模型出奇的好。经验趋势表明，这种行为随着模型规模、数据集大小和总训练计算的增加而改善。</p><p>CLIP和ALIGN使用对比学习来训练对齐两种模态的文本和图像编码器。经过训练后，prompt可以实现对新视觉概念和数据分布的zero-shot概括。这种编码器还与其他模块有效组合，以实现下游任务，如图像生成（例如，DALL·E）。虽然在视觉和语言编码器方面已经取得了很大进展，但计算机视觉包括了超出这一范围的广泛问题，而且对于其中许多问题，还不存在丰富的训练数据。</p><p>作者提到在这项工作中，他们的目标是建立一个图像分割的基础模型。也就是说，他们在寻求开发一个可提示的模型，并使用能够实现强大泛化的任务在广泛的数据集上对其进行预训练。有了这个模型，他们的目标是使用即时工程解决新数据分布上的一系列下游分割问题。</p><p>这个计划的成功取决于三个组成部分：任务、模型和数据。为了开发它们，作者解决了以下关于图像分割的问题： 1. 什么样的样本可以实现零样本泛化 2. 相应的模型架构是什么 3. 什么样的数据可以支撑这个人物和模型</p><p>这些问题错综复杂，作者首先定义了一个promptable的分割任务，这可以提供强大的预训练目标，并且有广泛的下游任务可以应用。这个任务需要一个支持灵活的prompt的模型并且可以输出分割结果。为了训练这个模型，作者需要一个多样性的，大型的数据集，因此作者构建了一个数据引擎，使用高效的模型进行迭代。作者介绍了每个组件然后是创建的数据集和有效性的实验。</p><h2 id="任务">任务</h2><p>作者从NLP领域获得灵感，在NLP的任务中，预测下一个token用于基础模型的训练，并通过prompt engineering 解决不同的下游任务。为了建立这样一个分割的基础模型，作者的目标书建立一个具有类似能力的任务 ### Task promptable的分割任务是给定任何prompt都能返回有效的分割掩码。有效的mask意味着即使prompt是不准确的或者涉及到多个对象的也应该的能够输出正确的或者合理的掩码。如图所示，每列显示SAM从单个不明确的点提示生成的3个有效掩码。 <img src="https://proxy.thisis.plus/20230407194759.png" alt="image.png" /></p><h3 id="预训练">预训练</h3><p>promptable segmentation task 提出了一种自然的预训练算法，该算法模拟每个训练样本的提示序列（例如，点、框、掩码），并将模型的掩码预测与基本事实进行比较。作者将这种方法从交互式分割中改编出来，尽管与交互式分割不同，交互式分割的目的是在足够的用户输入后最终预测有效的掩码，但promptable segmentation task 的目的是始终预测任何提示的有效掩码，即使提示不明确的/错误的/荒谬的。</p><h3 id="zero-shot-推理">Zero-shot 推理</h3><p>直观地说，预训练任务赋予了模型在推理时对任何提示做出适当响应的能力，因此下游任务可以通过设计适当的提示来解决。一般来说，一系列实用的分割任务可以作为提示。除了自动数据集标记外，作者还在第7部分中的实验中探索了五个不同的示例任务。 ## 模型 SAM包括了三个部分 一个 image encoder, 一个 flexible prompt encoder, 和一个 fast mask decoder. <img src="https://proxy.thisis.plus/20230407203046.png" alt="image.png" /></p><h3 id="image-encoder">image encoder</h3><p>受可扩展性和强大的预训练方法的启发，作者使用了MAE预训练的视觉转换器（ViT），该转换器至少适用于处理高分辨率输入。图像编码器每个图像运行一次，并且在prompt运行之前运行</p><h3 id="prompt-encoder">prompt encoder</h3><p>作者考虑了两组提示：稀疏(sparse)（点、框、文本）和密集(dense)（掩码）。MAE通过位置编码来表示点和框，这些位置编码与每个使用CLIP的现成文本编码器来编码过的prompt的学习嵌入相加。dense prompt（即掩码）使用卷积嵌入，并与图像嵌入逐元素求和。</p><h3 id="mask-decoder">mask decoder</h3><p>掩码解码器有效地将图像嵌入、提示嵌入和输出标记映射到掩码。这种设计受到的启发，对 Transformer decoder 进行了修改，然后是动态掩码预测头。修改后的解码器块在两个方向上使用提示自注意力和交叉注意力（(prompt-to-image embedding，反之亦然）来更新所有嵌入。在运行两个块后，对图像嵌入进行上采样，MLP将输出标记映射到动态线性分类器，然后计算每个图像位置的mask foreground 概率。</p><h2 id="data-engine">Data engine</h2><p>由于分割掩码在互联网上并不丰富，作者构建了一个数据引擎来实现1.1B 掩码数据集 SA-1B 的集合。</p><p>数据引擎分为三个阶段：（1）模型辅助手动注释阶段，（2）混合自动预测掩码和模型辅助注释的半自动阶段，以及（3）全自动阶段，</p><h3 id="手动阶段">手动阶段</h3><p>在第一阶段，类似于经典的交互式分割，一组专业注释者通过使用由 SAM 驱动的基于浏览器的交互分割工具点击前景/背景对象点来标记掩码。可以使用像素精确的“刷”和“擦除”工具来细化掩码。模型辅助注释直接在浏览器内实时运行（使用预先计算的图像嵌入），从而实现真正的交互体验。标注不受语义约束，可以自由地标注"stuff" and "things"</p><p><strong>注释者被要求按突出顺序标记对象，一旦掩码需要超过 30 秒进行注释，便鼓励继续下一个图像。</strong></p><p>在SOTA之后，SAM就开始使用公共数据集进行训练，在经过了足够多的数据标注后，就用新标注的数据重新训练。随着收集更多的掩码，图像使用了ViT-H作为编码器。这样的模型训练一共进行了六次。随着模型的改进，每个掩码的平均注释时间从 34 秒减少到 14 秒。随着SAM的改进，每张图像的平均掩码数从20个掩码增加到44个掩码。总体而言，作者在这个阶段从 120k 张图像收集了 4.3M 掩码。</p><h3 id="半自动化阶段">半自动化阶段</h3><p>这个阶段的目标是增加mask的多样性。为了将标记集中在不太突出的对象上，首先自动检测confident masks。然后向注释者展示了用这些掩码预先填充的图像，并要求他们注释任何额外的未注释对象。为了检测confident masks，作者使用通用的“对象”类别在所有第一阶段掩码上训练了一个边界框检测器。在这个阶段，作者在 180k 图像中收集了一个额外的 5.9M 掩码（总共 10.2M 掩码）。在第一阶段，在新收集的数据（5 次）上定期重新训练模型。每个掩码的平均注释时间可以回到了到 34 秒（不包括自动掩码），因为这些对象对标签更具挑战性。每张图像的平均掩码数从 44 个掩码到 72 个掩码（包括自动掩码）。</p><h3 id="全自动化阶段">全自动化阶段</h3><p>这个阶段的主要目的是解决歧义</p><p>正文部分说的不太清楚，在附录部分作者做了详细的解释。一共分为四个部分，Cropping，Filtering，Postprocessing，Automatic mask generation model。</p><p>这个过程作者使用<span class="math inline">\(32*32\)</span>网格的点对图像进行预测，并为每个点预测一组可能对应于有效对象的掩码。如果说一个点位于一个部件或子部件上，我们的模型将返回子部分，部分和整个对象(subpart, part, and whole object)。利用模型中的IoU预测模块来选择confident mask.如果将概率图阈值设为0.5−δ和0.5 + δ会产生相似的掩码，那么这个掩码就被认为是是稳定的。为了进一步提高小mask的质量，还处理了多个重叠的放大mask。</p><p>全自动掩码生成应用于数据集中的所有 11M 图像，总共产生了 1.1B 的高质量掩码。</p><h2 id="数据集">数据集</h2><p>SA的数据集使用data engine 构建的多样的高分辨率的有隐私保护的图像和1.1B个掩码组成。作者发布了这个这个数据集来帮助未来计算机视觉基础模型。SA-1B 将在某些研究用途的有利许可协议下发布，并为研究人员保护。 ### 图像 作者团队从直接与摄影师一起工作的提供商那里获得了一组新的高分辨率的11M图像。即使在下采样之后，这些图像的分辨率也明显高于许多现有的视觉数据集</p><h3 id="掩码">掩码</h3><p>数据引擎产生了 1.1B 掩码，其中 99.1% 是全自动生成的。因此，自动掩码的质量至关重要。作者团队将这些mask与专业标记的数据集进行标记，发现自动掩码对于训练模型是高质量和有效的。受这些发现的启发，SA-1B 仅包含自动生成的掩码。</p><blockquote><p>To estimate mask quality, we randomly sampled 500 images (∼50k masks) and asked our professional annotators to improve the quality of all masks in these images. Annotators did so using our model and pixel-precise "brush" and "eraser" editing tools. This procedure resulted in pairs of automatically predicted and professionally corrected masks. We computed IoU between each pair and found that 94% of pairs have greater than 90% IoU (and 97% of pairs have greater than 75% IoU). For comparison, prior work estimates inter-annotator consistency at 85-91% IoU [44, 60]. Our experiments in §7 confirm by human ratings that mask quality is high relative to a variety of datasets and that training our model on automatic masks is nearly as good as using all masks produced by the data engine. ## Responsible AI</p></blockquote><h2 id="zero-shot推理实验">Zero-Shot推理实验</h2><p>作者在这里讨论了五个任务，其中四个与训练数据完全不同。这也避免了模型训练过程中能够看到答案。这几个任务分别是 1. zero-shot单点有效掩码评估 2. 执行边缘检测 3. 分割所有内容，即对象提议生成 4. 分割检测到的对象，即实例分割， 5. 作为概念验证，从自由形式的文本中分割对象。</p><h2 id="讨论">讨论</h2><p>自机器学习的早期以来，预训练模型已经适应下游任务。近年来，随着对规模的日益重视，这种范式变得越来越重要，并且此类模型最近被称为为“基础模型”，即"大规模在广泛的数据上训练并适应广泛的下游任务"</p><p>作者的工作是与此高度相关的，尽管分割只是计算机视觉任务的一个子集。作者还将他们的方法的一个方面与另一项工作进行了对比<a href="https://arxiv.org/abs/2108.07258">Rishi Bommasani, Drew A Hudson, Ehsan Adeli, Russ Altman, Simran Arora, Sydney von Arx, Michael S Bernstein, Jeannette Bohg, Antoine Bosselut, Emma Brunskill, et al. On the opportunities and risks of foundation models. arXiv:2108.07258, 2021. 1, 12</a>，# On the Opportunities and Risks of Foundation Models强调了自监督学习在基础模型中的作用。虽然SA模型是用自监督技术(MAE)初始化的，但它的绝大多数能力来自于大规模的监督训练。在数据引擎可以扩展可用注释的情况下，监督训练提供了一种有效的解决方案。</p><p>SA不可避免地也有一些局限性，SAM是为通用性和使用广度而设计的，不同于以往的很多工作，它不是高IoU交互式分割。虽然SAM可以执行许多任务，但目前尚不清楚如何设计简单的提示符来实现语义和全景分割。最后，还有一些领域特定的工具，它们在各自的领域中依然有希望优于SAM。</p><p>总而言之，Segment Anything项目是将图像分割提升到基础模型时代的一种尝试。这项工作的主要贡献是一个新的任务(提示分割)，模型(SAM)和数据集(SA-1B)，使这一飞跃成为可能。SAM是否达到了基础模型的地位，仍然要看它在社区中是如何使用的，但这项工作的前景，超过1B个掩模的发布，以及作者的快速分割模型将有助于铺平前进的道路。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多模态</tag>
      
      <tag>图像分割</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Imagic笔记</title>
    <link href="/2023/03/29/Imagic%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/29/Imagic%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="imagic笔记">Imagic笔记</h1><p>先前的工作大多数方法目前仅限于以下一种:特定的编辑类型(例如，对象叠加，样式转换)，合成生成的图像，或需要一个共同对象的多个输入图像。文章作者展示了将复杂的基于文本的语义编辑应用于单个真实图像的能力。与之前的工作相反，这篇文章提出的方法只需要一个输入图像和一个目标文本(所需的编辑)。它生成一个与输入图像和目标文本一致的文本嵌入，同时微调扩散模型以捕获特定于图像的外观。</p><p>扩散模型是一种强大的最先进的生成模型，能够进行高质量的图像合成。在自然语言文本提示的条件下，它们能够生成与所请求的文本很好地对齐的图像。在工作中使用它们来编辑真实的图像，而不是合成新的图像。文章作者通过一个简单的3步过程来实现这一点，如图所示:首先优化文本嵌入，使其生成与输入图像相似的图像。然后，对预训练的生成扩散模型(以优化的嵌入为条件)进行微调，以更好地重建输入图像。最后，在目标文本嵌入和优化后的文本之间进行线性插值，得到一个结合了输入图像和目标文本的表示。然后将这种表示传递给带有微调模型的生成扩散过程，输出最终编辑的图像。 <img src="https://proxy.thisis.plus/20230312151044.png" alt="image.png" /></p><p>作者这进一步得到了一项人类感知评估研究的支持，在一项名为TEdBench -文本编辑基准的新基准测试中，评分者强烈倾向于图像而不是其他方法。</p><h2 id="方法">方法</h2><p>作者将整个过程分成三个部分</p><ul><li>优化文本嵌入，以在目标文本嵌入附近找到与给定图像最匹配的文本嵌入</li><li>微调扩散模型，以更好地匹配给定的图像</li><li>在优化的嵌入和目标文本嵌入之间进行线性插值，以找到一个既能达到输入图像的保真度又能达到目标文本对齐的点。</li></ul><h3 id="text-embedding-optimization">Text embedding optimization</h3><p>目标文本首先通过文本编码器，它输出其对应的文本嵌入<span class="math inline">\(\textbf{e}_{tgt}\in\mathbb{R}^{T\times d}\)</span> ，其中<span class="math inline">\(T\)</span>是给定目标文本中的标记数，<span class="math inline">\(d\)</span>是标记嵌入维数。然后冻结生成扩散模型<span class="math inline">\(f_\theta\)</span>的 参数，并使用[[DDPM]]目标<span class="math display">\[\mathcal{L}(\mathbf{x},\mathbf{e},\theta)=\mathbb{E}_{t,\epsilon}\left[\left\|\epsilon-f_{\theta}(\mathbf{x}_{t},t,\mathbf{e})\right\|_{2}^{2}\right]\]</span>优化目标文本嵌入<span class="math inline">\(E_{tgt}\)</span>.其中<span class="math inline">\(t\sim Uniform[1,T]\)</span> , <span class="math inline">\(x_t\)</span>是使用<span class="math inline">\(\boldsymbol{\epsilon}{\sim}\mathcal{N}(0,\text{I})\)</span>和方程1获得的x(输入图像)的噪声版本，<span class="math inline">\(\theta\)</span>是预训练的扩散模型权重。这将产生与输入图像尽可能匹配的文本嵌入。作者运行这个过程的步骤相对较少，以保持接近最初的目标文本嵌入，获得<span class="math inline">\(E_{opt}\)</span>。这种接近性在嵌入空间中实现了有意义的线性插值，而对于遥远的嵌入不表现出线性行为。</p><figure><img src="https://proxy.thisis.plus/20230312163802.png" alt="" /><figcaption>image.png</figcaption></figure><h3 id="model-fine-tuning">Model fine-tuning</h3><p>请注意，当经过生成扩散过程时，得到的优化嵌入<span class="math inline">\(E_{opt}\)</span>并不一定会导致输入图像<span class="math inline">\(X_{exactly}\)</span>，因为作者的方法优化运行了少量步骤(见图7中的左上角图像)。因此，在方法的第二阶段，通过使用公式2中所示的相同损失函数优化模型参数<span class="math inline">\(\theta\)</span>来缩小这一差距，同时冻结优化的嵌入。这个过程移动模型以适应输入图像<span class="math inline">\(x\)</span>在点<span class="math inline">\(E_{opt}\)</span>处的位置。同时，微调底层生成方法中出现的任何辅助扩散模型，例如超分辨率模型。作者用相同的重构损失对它们进行微调，但以<span class="math inline">\(E_{tgt}\)</span>为条件，因为<span class="math inline">\(E_{opt}\)</span>仅针对基本模型进行了优化。这些辅助模型的优化确保了保留基本分辨率中不存在的<span class="math inline">\(x\)</span>的高频细节 <img src="https://proxy.thisis.plus/20230312164454.png" alt="image.png" /></p><h3 id="text-embedding-interpolation">Text embedding interpolation</h3><p>由于生成扩散模型被训练为在优化的嵌入<span class="math inline">\(E_{opt}\)</span>处完全重建输入图像，作者使用它来应用所需的编辑，从而沿着目标文本嵌入的方向前进。更正式地说，第三阶段是<span class="math inline">\(E_{tgt}\)</span>和<span class="math inline">\(E_{opt}\)</span>之间的简单线性插值。对于给定的超参数<span class="math inline">\(\eta\in[0,1]\)</span>，就得到了<span class="math display">\[\bar{\mathbf{e}}=\eta\cdot\mathbf{e}_{tgt}+(1-\eta)\cdot\mathbf{e}_{opt}\]</span> 这是表示期望编辑图像的嵌入。然后，应用基础生成扩散过程使用微调模型，条件是<span class="math inline">\(\bar{\mathbf{e}}\)</span>。这将导致低分辨率的编辑图像，然后使用微调辅助模型，以目标文本为条件进行超分辨。这个生成过程输出最终的高分辨率编辑图像<span class="math inline">\(x\)</span>。</p><h2 id="实验">实验</h2><h3 id="消融实验">消融实验</h3><p>作者在消融研究中发现微调会强制引入来自输入图像的细节，超出了仅优化的嵌入，使他们的方案能够保留这些细节用于中间的η值，从而实现语义上有意义的线性插值。因此作者得出结论，模型微调对其方法的成功至关重要。</p><p>作者尝试了尝试了文本嵌入优化步骤的数量。作者通过实验表明通过较少的步骤优化文本嵌入将限制模型的编辑能力，而通过超过100步的优化几乎没有额外的价值。</p><h3 id="局限性">局限性</h3><p>作者在研究中发现了两种方法失败的情况：一种是所需编辑的效果非常微弱（如果有的话），因此与目标文本不太匹配；另一种是编辑效果很好，但会影响到外部图像细节，如缩放或摄像机角度。作者在第10张图中分别展示了这两种失败情况的示例。当编辑效果不够强烈时，增加η通常可以实现期望的结果，但在少数情况下会导致原始图像细节的显著丢失（对于所有测试的随机种子）。至于缩放和摄像机角度的变化，这通常发生在我们从低η值逐渐增加到较大值时，因此很难避免。作者在附录中展示了这一点，并在TEdBench中包含了额外的失败案例。这些局限性可能可以通过不同的方式优化文本嵌入或扩散模型来缓解，或者类似于<a href="https://arxiv.org/abs/2208.01626">Hertz etal.</a>的交叉关注控制。作者将这些选项留给未来的工作。</p><figure><img src="https://proxy.thisis.plus/20230329195843.png" alt="" /><figcaption>image.png</figcaption></figure><p>此外，由于该方法依赖于预训练的文本到图像扩散模型，因此继承了模型的生成限制和偏见。因此，当所需编辑涉及生成底层模型的失败案例时，会产生不必要的伪像。例如，Imagen在人脸方面的生成性能不佳</p><h2 id="结论和未来的工作">结论和未来的工作</h2><p>作者认为下一步的工作主要有两个方面 - 一是进一步提高算法对输入图像的准确性和对身份的保护，同时增强对随机种子和插值参数 η 的敏感性； - 二是开发自动选择每个请求编辑的 η 值的方法</p><p>社会影响方面作者则认为模型容易受到基于文本的生成模型的社会偏见的影响，这些技术可能被恶意方用于合成虚假的图像以误导观众。为了缓解这种情况，需要进一步研究如何识别合成编辑或生成内容</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文字生成图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE,Unity和WebGL技术对比</title>
    <link href="/2023/03/21/UE,Unity%E5%92%8CWebGL%E6%8A%80%E6%9C%AF%E5%AF%B9%E6%AF%94/"/>
    <url>/2023/03/21/UE,Unity%E5%92%8CWebGL%E6%8A%80%E6%9C%AF%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<h1 id="ueunity和webgl技术对比">UE,Unity和WebGL技术对比</h1><p>随着科技的不断进步和数字化时代的到来，元宇宙（Metaverse）已经成为了人们对未来虚拟世界的向往和探索。构建一个具有真实感、互动性和无限可能性的元宇宙需要借助于强大的技术平台。UE（Unreal Engine）、Unity和WebGL作为当前最主流的数字娱乐和游戏开发引擎，被广泛应用于游戏、影视等领域。那么在构建元宇宙的过程中，这三种技术平台各自有什么优缺点？它们又分别适用于哪些场景呢？本文将会深入比较这三种技术平台的差异与联系，并探讨它们在构建元宇宙方面的优缺点及适用场景。</p><h2 id="ue">UE</h2><p>Unreal Engine（以下简称UE）是一个流行的游戏引擎，它被广泛用于创建2D和3D游戏、虚拟现实应用程序和模拟器等。</p><h3 id="优势">优势</h3><ol type="1"><li><p>强大的可视化编辑器：UE具有易于使用的可视化编辑器，使得开发人员可以快速构建游戏场景和世界，而无需编写复杂的代码。</p></li><li><p>跨平台支持：UE支持多个操作系统和平台，包括Windows、Mac、Linux、iOS和Android等，因此开发者可以轻松地将游戏或应用程序移植到不同的设备上。</p></li><li><p>模块化设计：UE允许开发者将游戏逻辑和功能划分为独立的模块，从而提高了代码的可维护性和可重用性。</p></li><li><p>社区支持：UE拥有庞大的用户社区，其中包括开源代码、教程、示例项目、脚本和插件等资源，这些都能够加速开发过程。</p></li><li><p>支持虚幻市场：UE拥有一个虚幻市场，使开发者可以购买和出售游戏资产、工具和插件等，从而节省开发成本和时间。</p></li></ol><h3 id="劣势">劣势</h3><ol type="1"><li><p>入门门槛较高：UE可能需要一些技术能力和时间才能学会，尤其是对于初学者来说，它的学习曲线可能相对陡峭。</p></li><li><p>高昂的费用：虽然UE是免费的，但如果要在商业项目中使用，则需要支付5%的版税。此外，如果您需要访问源代码，则需要购买专业版本。</p></li><li><p>性能问题：与其他游戏引擎相比，UE可能需要更高的硬件配置以及更长的加载时间，导致游戏运行时的性能受到影响。</p></li></ol><h3 id="发展前景">发展前景</h3><p>UE的未来前景非常光明。随着虚拟现实和增强现实技术的不断发展，UE作为一个全面的游戏引擎，在这个领域有着巨大的潜力。UE拥有强大的开发工具和社区支持，可以加速游戏和应用程序的开发过程。此外，UE还支持跨平台开发，在全球范围内开发者社区都很活跃，这也预示着UE未来将在游戏和虚拟现实市场占据更大的份额。</p><h2 id="unity">Unity</h2><p>Unity是一个流行的跨平台游戏引擎，被广泛用于创建2D和3D游戏、虚拟现实应用程序和模拟器等。以下是Unity的优势和劣势以及发展前景的详细分析：</p><h3 id="优势-1">优势</h3><ol type="1"><li><p>跨平台支持：Unity支持多个操作系统和平台，包括Windows、Mac、Linux、iOS和Android等，因此开发者可以轻松地将游戏或应用程序移植到不同的设备上。</p></li><li><p>可视化编辑器：Unity具有易于使用的可视化编辑器，使得开发人员可以快速构建游戏场景和世界，而无需编写复杂的代码。</p></li><li><p>大量资源：Unity拥有庞大的用户社区，其中包括开源代码、教程、示例项目、脚本和插件等资源，这些都能够加速开发过程。</p></li><li><p>支持多种语言：Unity支持多种编程语言，包括C#、JavaScript和Boo等，使开发者可以选择最适合自己的编程语言。</p></li><li><p>发布方便：使用Unity可以轻松地发布游戏到多个平台和应用商店中，如Steam、App Store和Google Play等。</p></li></ol><h3 id="劣势-1">劣势</h3><ol type="1"><li><p>性能问题：与其他游戏引擎相比，Unity可能需要更高的硬件配置以及更长的加载时间，导致游戏运行时的性能受到影响。</p></li><li><p>版本管理问题：由于Unity的版本更新频繁，更新后可能会出现一些兼容性问题，需要花费更多的时间来解决。</p></li><li><p>费用较高：虽然Unity可以免费使用，但如果需要访问高级功能和技术支持，则需要购买专业版。</p></li></ol><h3 id="发展前景-1">发展前景</h3><p>随着虚拟现实和增强现实技术的不断发展，Unity作为一个全面的游戏引擎，在这个领域有着巨大的潜力。Unity已经成为了VR/AR应用程序开发中的主要玩家之一，其3D渲染能力和跨平台支持也使它在游戏市场占据着重要地位。未来，Unity将继续扩大其功能和工具集，以满足不断变化的市场需求。同时，Unity还在积极改进其开发者体验，增加可访问性和可扩展性，以吸引更多的开发者。总体来说，Unity具有非常广阔的发展前景，将在游戏和虚拟现实市场占据重要地位。</p><h2 id="webgl">WebGL</h2><p>WebGL是一种基于Web的3D图形渲染技术，它可以在浏览器中运行3D游戏和应用程序。以下是WebGL的优势和劣势以及发展前景的详细分析：</p><h3 id="优势-2">优势</h3><ol type="1"><li><p>开放性：WebGL是一个开放标准，无需安装任何插件或软件即可在Web浏览器中运行，任何人都可以轻松访问。</p></li><li><p>跨平台支持：由于WebGL技术的跨平台特性，游戏和应用程序可以在多个设备和操作系统上运行。</p></li><li><p>安全性：WebGL仅在用户的浏览器环境中运行，保护了用户的计算机不受恶意软件攻击和病毒感染的风险。</p></li><li><p>易于使用：WebGL允许开发者使用JavaScript等常见的Web编程语言，而无需学习专门的游戏引擎或开发工具。</p></li><li><p>可扩展性：WebGL允许开发者使用各种第三方库和框架，从而扩展其功能和性能。</p></li></ol><h3 id="劣势-2">劣势</h3><ol type="1"><li><p>性能问题：由于WebGL是基于Web技术构建的，因此它的性能可能受到浏览器和设备的限制，导致游戏运行时的性能相对较低。</p></li><li><p>兼容性问题：WebGL在旧版浏览器上可能无法正常工作，而且不同的浏览器可能会有不同的兼容性问题。</p></li><li><p>复杂性问题：WebGL需要掌握一定的Web编程知识和技能，并且需要处理底层的图形渲染细节和优化问题。</p></li></ol><h3 id="发展前景-2">发展前景</h3><p>随着云游戏、虚拟现实和增强现实等新技术的出现，WebGL作为一种开放、易用和跨平台的3D图形渲染技术，具有非常广阔的发展前景。未来，WebGL将继续推进其性能和兼容性的提高，以满足不断增长的游戏和应用程序市场需求。同时，WebGL还将与WebAssembly等新技术结合使用，提高其在游戏领域的可扩展性和性能表现。总体来说，WebGL将成为未来游戏和应用程序开发的重要趋势之一，为开发者提供更加灵活和创新的解决方案。</p><h2 id="实例">实例</h2><ol type="1"><li><p>使用Unreal Engine：《堡垒之夜》、《生化奇兵无限》、《失落的章节》等游戏都是使用UE引擎开发的。</p></li><li><p>使用Unity：《跑跑卡丁车》、《絕地求生：刺激战场》、《Beat Saber》等游戏都是使用Unity引擎开发的。</p></li><li><p>使用WebGL：Sketchfab是一个基于WebGL技术的在线3D模型库，用户可以在浏览器中查看和分享3D模型。Google Maps也使用了WebGL技术来呈现3D建筑和景点的效果。</p></li><li><p>使用Unreal Engine 和 Unity：虚拟现实设备 Oculus Rift 和 HTC Vive 都支持 UE 和 Unity 游戏引擎，许多 VR 游戏和应用程序都是使用这两个引擎开发的。</p></li><li><p>使用Unity 和 WebGL：Clara.io 是一个基于WebGL技术的三维建模和渲染平台，它使用Unity作为前端工具，并支持导出到WebGL格式以供在线展示。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>ThreeJS</tag>
      
      <tag>元宇宙</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ControlNet笔记</title>
    <link href="/2023/03/20/ControlNet%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/20/ControlNet%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="controlnet笔记">ControlNet笔记</h1><p>作者的代码开源在<a href="https://github.com/lllyasviel/ControlNet">GitHub</a>。</p><p>想要体验ControlNet看<a href="https://studyinglover.com/2023/03/20/%E9%80%9A%E8%BF%87colab%E4%BD%93%E9%AA%8CControlNet/">我的文章</a></p><h2 id="介绍">介绍</h2><p>作者在文章开头先对当前大型text-to-image model提出了疑问：这种基于提示的控制是否满足我们的需求？例如在图像处理中，考虑许多具有明确问题公式的长期任务，这些大型模型能否被应用于促进这些特定任务？我们应该建立什么样的框架来处理广泛的问题条件和用户控制？在特定任务中，大型模型能否保持从数十亿图像中获得的优势和能力？</p><blockquote><p>does this prompt-based control satisfy our needs? For example in image processing, considering many long-standing tasks with clear problem formulations, can these large models be applied to facilitate these specific tasks? What kind of framework should we build to handle the wide range of problem conditions and user controls? In specific tasks, can large models preserve the advantages and capabilities obtained from billions of images?</p></blockquote><p>接下来，作者提供了他们研究了大量模型后的发现 1. 需要具有鲁棒性的神经网络训练方法来避免过度拟合，并在针对特定问题训练大型模型时保持泛化能力。 2. 当图像处理任务使用数据驱动解决方案处理时，不可能总是使用大型计算集群，因此快速训练方法对于在可接受的时间和内存空间（例如在个人设备上）内将大型模型优化到特定任务很重要。这将进一步要求利用预训练的权重，以及微调策略或迁移学习。 3. 各种图像处理问题有不同的问题定义、用户控制或图像注释形式。考虑到一些特定的任务，如深度到图像、姿势到人等，这些问题本质上需要将原始输入解释为对象级或场景级别的理解，使得手工制作的程序方法不太可行。为了在许多任务中实现学习到的解决方案，端到端学习是必不可少的。</p><p>ControlNet可以用多种数据类型作为训练数据，例如Canny edges, Hough lines, user scribbles, human key points, segmentation maps, shape normals, depths, etc.</p><p>ControlNet也可以在个人计算机上进行训练，实现在有大型显存和多个gpu的集群上训练一样的效果。</p><h2 id="模型结构">模型结构</h2><p>ControlNet是一种端到端的网络，他将正常的网络参数变成了两份："trainable copy" and "locked copy"。</p><ul><li>"locked copy" 保留了从数十亿张图像中学习到的网络能力</li><li>"trainable copy" 在特定于任务的数据集上进行训练以学习条件控制。</li></ul><p>"trainable copy" 和 "locked copy"用一种称为“zero convolution”的卷积层连接，其中卷积权重逐渐从零增长到以学习方式优化参数。"zero convolution"即1 * 1卷积</p><h2 id="方法">方法</h2><h3 id="网络架构">网络架构</h3><p>ControlNet 操纵神经网络块的输入条件，以进一步控制整个神经网络的整体行为。</p><p>以2D图像为例，给定一张图像(特征图)<span class="math inline">\(\boldsymbol{x}\in\mathbb{R}^{h\times w\times c}\)</span> ,<span class="math inline">\(h,w,c\)</span> 分别代表高度，宽度，深度。一个将x转换为y的神经网络我们可以以将他记作<span class="math inline">\(\mathcal{F(\cdot;\Theta)}\)</span></p><p><span class="math display">\[\boldsymbol{y}=\mathcal{F}(\boldsymbol{x};\Theta)\]</span> <img src="https://proxy.thisis.plus/20230311152613.png" alt="image.png" /></p><p>我们把zero convolution记作<span class="math inline">\(\mathcal{Z}(\cdot;\cdot)\)</span> ,那么ControlNet就可以记作<span class="math display">\[\begin{matrix}\boldsymbol{y_c}=\mathcal{F}(\boldsymbol{x};\Theta)+\mathcal{Z}(\boldsymbol{F}(\boldsymbol{x}+\mathcal{Z}(\boldsymbol{c};\Theta_{\text{z1}});\Theta_{\text{z2}})\end{matrix}\]</span> <img src="https://proxy.thisis.plus/20230311152920.png" alt="image.png" /></p><p>由于zero convolution的权重初始为0，那么就有<span class="math display">\[\begin{cases}\mathcal{Z}(c;\Theta_{\text{z1}})=\mathbf{0}\\ \mathcal{F}(\boldsymbol{x}+\mathcal{Z}(\boldsymbol{c};\Theta_{\text{z1}});\Theta_{\text{c}})=\mathcal{F}(\boldsymbol{x};\Theta_{\text{c}})=\mathcal{F}(\boldsymbol{x};\Theta_{\text{c}})\\ \mathcal{Z}(\mathcal{F}(\boldsymbol{x}+\mathcal{Z}(\boldsymbol{c};\Theta_{\text{z1}});\Theta_{\text{c}});\Theta_{\text{z2}})=\mathcal{Z}(\mathcal{F}(\boldsymbol{x};\Theta_{\text{c}});\Theta_{\text{z2}})=\mathbf{0}\end{cases}\]</span> 可以得出<span class="math inline">\(y_c=y\)</span>,即当ControlNet被应用到任何一个网络上时，不会对这个网络的效果产生任何影响。它完美保留了任何神经网络块的能力、功能和结果质量，任何进一步优化都将随着微调而变得快速</p><p>作者也推导了zero convolution的梯度。网络的前向过程可以写成<span class="math display">\[\mathcal{Z}(\boldsymbol{I};\{\boldsymbol{W},\boldsymbol{B}\})_{p,i}=\boldsymbol{B}_{i}+\sum_{j}^{c}\boldsymbol{I}_{p,i}\boldsymbol{W}_{i,j}\]</span> 在最开始，zero convolution 的参数<span class="math inline">\(W\)</span>和<span class="math inline">\(B\)</span> 都是0，只要输入<span class="math inline">\(I\)</span>不为0，那么就有 <span class="math display">\[\begin{cases}\dfrac{\partial\mathcal{Z}(\textbf{I};\{\textbf{W},\textbf{B}\})_{p,i}}{\partial\textbf{B}_i}=1\quad\\ \frac{\partial\mathcal{Z}(\mathbf{I};\{\mathbf{W},\mathbf{B}\})_{p,i}}{\partial\mathbf{I}_{p,i}}=\sum_{j}^{c}\mathbf{W}_{i,j}=0 \\ \frac{\partial\mathcal{Z}(\mathbf{I};\{W,\mathbf{B}\})_{p,i}}{\partial W_{i,j}}=\mathbf{I}_{p,i}\neq\mathbf{0} \end{cases}\]</span> 我们可以看到，虽然zero convolution会导致<span class="math inline">\(I\)</span> 上的梯度变为零，但权重和偏差的梯度不受影响。只要特征 <span class="math inline">\(I\)</span> 非零，权重 <span class="math inline">\(W\)</span> 将在第一个梯度下降迭代中优化为非零矩阵.考虑经典的梯度下降<span class="math display">\[W^*=W-\beta_{\mathbb{If}}\cdot\dfrac{\partial\mathcal{L}}{\partial\mathcal{Z}(\mathbf{I};\{W,B\})}\odot\dfrac{\partial\mathcal{Z}(\mathbf{I};\{W,B\})}{\partial W}\neq\mathbf{0}\]</span> <span class="math inline">\(W*\)</span> 代表了第一次梯度下降之后的权重，<span class="math inline">\(\odot\)</span> 是Hadamard product，即对应的各个元素相乘(<span class="math inline">\(c_{ij}=a_{ij}×b_{ij}\)</span>) 。</p><p>在这一步之后，我们可以得到<span class="math display">\[\dfrac{\partial\mathcal{Z}(\mathbf{I};\{\mathbf{W}^*,\mathbf{B}\})_{p,i}}{\partial\mathbf{I}_{p,i}}=\sum\limits_j^c\mathbf{W}_{i,j}^*\neq\mathbf{0}\]</span> 这里包含了非零的梯度并且神经网络开始学习。这样，零卷积就变成了一种独特的连接层，它以学习的方式从零逐步增长到优化的参数。</p><h3 id="在stable-diffusion上的controlnet">在stable diffusion上的ControlNet</h3><p>咕咕咕(以后补上)</p><h3 id="训练">训练</h3><p>图像扩散模型是学习逐步去噪图像以生成样本。去噪可能发生在像素空间或从训练数据中编码的Latent Space中。stable diffusion使用latent image作为训练域。在这种情况下，术语"image", "pixel"和"denoising"都指的是“latent space”中的相应概念</p><p>给定图像 <span class="math inline">\(z_0\)</span>，扩散算法逐渐向图像添加噪声并产生噪声图像 <span class="math inline">\(z_t\)</span>，其中 t 是添加噪声的次数。当 <span class="math inline">\(t\)</span> 足够大时，图像近似于纯噪声。给定一组条件，包括时间步 <span class="math inline">\(t\)</span>、文本提示 <span class="math inline">\(c_t\)</span> 以及特定于任务的条件 <span class="math inline">\(c_f\)</span>，图像扩散算法学习网络 <span class="math inline">\(\epsilon_{\theta}\)</span> 以预测添加到噪声图像的噪声 <span class="math inline">\(z_t\)</span>,对于<span class="math display">\[\mathcal{L}=\mathbb{E}_{\boldsymbol{z}_0,t,\boldsymbol{c}_t,\boldsymbol{c}_i,\boldsymbol{\epsilon}\mathcal{N}(0,1)}\bigg[\|\epsilon-\epsilon_\theta(z_t,t,\boldsymbol{c}_t,\boldsymbol{c}_\mathbb{I}))\|_2^2\bigg]\]</span> 其中<span class="math inline">\(\mathcal{L}\)</span> 是整个扩散模型的整体学习目标。这种学习目标可以直接用于微调扩散模型。</p><p>在训练过程中，作者随机的将50%的prompt换成了空的prompt，作者认为这可以增强模型从文本内容识别语义信息的能力。这主要是因为当 stable diffusion 模型看不到提示时，decoder倾向于从输入控制图中学习更多的语义作为提示的替代品。</p><h3 id="改进训练">改进训练</h3><p>作者在这一节讨论了两种极端情况，分别是计算设备及其有限时例如个人电脑，和计算设备机器充足时</p><h4 id="small-scale-training">Small-Scale Training</h4><p>当计算设备有限时，作者发现部分打破ControlNet与stable diffusion之间的联系可以加速收敛。默认情况下是将ControlNet连接到“SD Middle Block”和“SD Decoder Block 1,2,3,4”。作者发现，只连接<em>Middle Block</em>而不连接Decoder Block 1,2,3,4可以将训练速度提高1.6倍(在RTX 3070TI笔记本电脑GPU上测试)。当模型在结果和条件之间表现出合理的关联时，这些断开连接的链接可以在持续训练中再次连接，以促进精确控制。</p><h4 id="large-scale-training">Large-Scale Training</h4><p>在这里，大规模训练是指可以使用强大的计算集群（至少 8 个 Nvidia A100 80G 或等效）和大型数据集（至少 100 万个训练图像对）的情况。这通常适用于数据很容易获得的任务，例如，由canny检测到的边缘图。在这种情况下，由于过拟合的风险相对较低，可以训练 ControlNets 进行大量迭代（通常为 50k 多个步骤），然后解锁稳定扩散的所有权重并联合训练整个模型作为一个整体。这将导致更具体的问题模型(This would lead to a more problem-specific model.)。</p><h2 id="实验">实验</h2><h3 id="设置">设置</h3><p>作者的实验是在<span class="math inline">\(CFG-scale=9.0\)</span> 进行的，采样器是DDPM。默认的步数是20步，在模型采取了<em>三种</em> prompt</p><h4 id="prompt">prompt</h4><ol type="1"><li>No prompt：也就是""</li><li>Default prompt:由于stable diffusion本质上是使用prompt进行训练的，因此空字符串可能是模型的意外输入，如果没有提供提示，SD 往往会生成随机纹理图。更好的设置是使用无意义的提示，"an image", "a nice image", "a professional image",etc。在作者的设置中，我们使用"a professional, detailed, high-quality image"作为default prompt。</li><li>Automatic prompt:为了测试fully automatic pipeline的SOTA，作者还尝试使用fully automatic pipeline（例如，BLIP）使用“default prompt”模式获得的结果生成prompts。作者会使用生成的提示再次扩散。</li><li>User prompt：用户自定义的输入</li></ol>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文字生成图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过colab体验ControlNet</title>
    <link href="/2023/03/20/%E9%80%9A%E8%BF%87colab%E4%BD%93%E9%AA%8CControlNet/"/>
    <url>/2023/03/20/%E9%80%9A%E8%BF%87colab%E4%BD%93%E9%AA%8CControlNet/</url>
    
    <content type="html"><![CDATA[<h1 id="通过colab体验controlnet">通过colab体验ControlNet</h1><h2 id="跑通流程">跑通流程</h2><p>首先，我们要会xxxx并且有一个Google账号。这是一句废话。</p><h3 id="启动webui">启动webui</h3><p>访问<a href="https://colab.research.google.com/">https://colab.research.google.com/</a> 然后登陆自己的谷歌账号，</p><p>然后访问<a href="https://github.com/camenduru/stable-diffusion-webui-colab">https://github.com/camenduru/stable-diffusion-webui-colab</a></p><figure><img src="https://proxy.thisis.plus/20230324163856.png" alt="" /><figcaption>image.png</figcaption></figure><p>可以看到这里有很多的colab可以使用。</p><blockquote><p><code>lite</code> has a stable WebUI and stable installed extensions. <code>stable</code> has ControlNet, a stable WebUI, and stable installed extensions.<br /><code>nightly</code> has ControlNet, the latest WebUI, and daily installed extension updates</p></blockquote><p>为了稳定的使用并且能使用ControlNet,这里我们使用<em>stable</em> 版本，我选了第一个如下图 <img src="https://proxy.thisis.plus/20230324164312.png" alt="image.png" /></p><p>点击进入后我们就能看到这样的界面了 <img src="https://proxy.thisis.plus/20230320150108.png" alt="image.png" /></p><p>如图，点击我画出来的，运行这个notebook。经过一番耐心的等待，你在控制台的最下面会看到这么几行<img src="https://proxy.thisis.plus/20230324164418.png" alt="image.png" /></p><p>点击最下面的两个链接中的任意一个，会跳转到webui的页面，我们主要用到的是<code>text2img</code>和<code>img2img</code>.</p><p>我们以<code>text2img</code>为例，这里只说常用的功能，如图所示。</p><p>这里的prompt就是提示词，假如你想让他画一只猫猫，你就在prompt的位置写上<code>cat</code>,negative prompt就是说排除掉那些词语，例如我们不想要红色的猫猫，我们可以写<code>red_cat</code> <img src="https://proxy.thisis.plus/20230320151053.png" alt="image.png" /></p><p>这里需要解释一堆东西</p><ol type="1"><li>Sampling method适用于生成图像的算法</li><li>Restore faces是使用GFPGAN来修复人脸</li><li>Tiling生成一张可以平铺的图片</li><li>Hires. fix 用两阶段的方法生成图像，先生成一张低分辨率的图片，然后在不改变构图的情况下继续优化细节</li><li>Batch count 生成多少个批次(注意显存)</li><li>Batch size 一个批次生成多少张图片(注意显存)</li><li>CFG Scale 这个值和图片引导与图片相关程度挂钩，值越低图片越有创意</li></ol><h3 id="启用controlnet">启用ControlNet</h3><p>滑到最下面，打开ControlNet功能(可能布局有所不同) <img src="https://proxy.thisis.plus/20230320151223.png" alt="image.png" /></p><p>打开之后如图 <img src="https://proxy.thisis.plus/20230320151404.png" alt="image.png" /> <img src="https://proxy.thisis.plus/20230320151648.png" alt="image.png" /></p><p>如果你想先看一下controlnet会按照什么来绘画，你可以通过创建画布下面的Preview来查看。</p><p>这里推荐一个网站<a href="https://prompthero.com/search?model=Stable+Diffusion&amp;q=video+game+concept+art&amp;source=f7591caf953">https://prompthero.com/search?model=Stable+Diffusion&amp;q=video+game+concept+art&amp;source=f7591caf953</a> ,里面有各种各样的prompt，也是游戏风格的。</p><p>我们随便选一个prompt来生成一张图 <img src="https://proxy.thisis.plus/20230320153127.png" alt="image.png" /></p><p>我们可以把图片放到<code>img2img</code>继续体验，使用方法和<code>text2img</code>基本一样。</p><h2 id="qa">Q&amp;A</h2><h3 id="posex">posex</h3><p>在新版本的stable diffusion webui中你会发现这个插件 <img src="https://proxy.thisis.plus/20230324173639.png" alt="image.png" /></p><p>这是一个open pose编辑器，你可以在这里编辑openpose，然后把编辑好的图片发给ControlNet</p><h3 id="additional-networks">Additional Networks</h3><figure><img src="https://proxy.thisis.plus/20230324174228.png" alt="" /><figcaption>image.png</figcaption></figure><p>一般在ControlNet上面，这个的作用的加入一些自己找的模型。</p><h3 id="controlnet概念">ControlNet概念</h3><h4 id="模型">模型</h4><p>在作者的<a href="https://arxiv.org/abs/2302.05543">论文</a>和<a href="https://github.com/lllyasviel/ControlNet">GitHub仓库</a>和论文详细的写了各种模型是什么样子的(累了，偷个懒，有需要再写)</p><h4 id="预处理器">预处理器</h4><p>处理图片的一种方式，个人认为和传统图像处理的那些方法是一致的，处理的结合和上面作者的论文<a href="https://arxiv.org/abs/2302.05543">arxiv</a>和<a href="https://github.com/lllyasviel/ControlNet">GitHub仓库</a>中式一样的</p>]]></content>
    
    
    
    <tags>
      
      <tag>文字生成图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cascade EF-GAN笔记</title>
    <link href="/2023/03/12/Cascade%20EF-GAN%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/12/Cascade%20EF-GAN%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="cascade-ef-gan">Cascade EF-GAN</h1><p>Cascade EF-GAN可以更好地保留与身份相关的特征和细节，特别是在眼睛、鼻子和嘴巴周围，进一步帮助减少生成的面部图像中的伪影和模糊。</p><h2 id="模型架构">模型架构</h2><p>作者设计了一种级联式网络，同原本对一张人脸做更改变成了对一张人脸和脸上几个部分同时做更改。因为对一个人类来说分辨一个人的方式就是看人的眼睛，鼻子和嘴巴。Cascade EF-GAN能够识别面部表情编辑中局部重点的重要性，并通过几个局部重点捕捉身份相关特征，有效地减轻编辑产生的伪影和模糊。</p><figure><img src="https://proxy.thisis.plus/20230312143755.png" alt="" /><figcaption>image.png</figcaption></figure><p>Cascade EF-GAN中的生成模型由一个Expression Transformer和一个Refiner组成。Expression Transformer执行带有局部焦点的表情编辑，Refiner融合表情转换器的输出并细化最终编辑。</p><p>Expression Transformer通过在全局和局部分支中处理面部图像来解决这个问题，其中全局分支捕获全局面部结构，局部分支专注于更详细的面部特征。Transformer将面部图像和目标表情标签作为输入。<strong>所有分支共享相似的网络架构，但不共享权重</strong></p><p>此外注意力被引入到全局和局部分支，以更好地捕捉细节和抑制伪影。在GANimation [32]中，使用视觉注意力来引导网络集中于转换与表情相关的区域。然而，在单个全局图像中应用注意力往往会引入模糊的注意力响应，如图3的第4列所示。这是因为全局注意力倾向于关注最显著的变化，例如图3中的嘴部区域，而眼睛和鼻子周围的细微变化则没有受到足够的关注。前面提到的局部分支中的独占式注意力有助于在局部区域实现更锐利的响应，如图3的第3列所示。 <img src="https://proxy.thisis.plus/20230312144711.png" alt="image.png" /></p><p>每个分支输出颜色特征图M_C和注意图M_A。对于原始输入图像I_in，每个分支的初始输出通过以下方式生成 <span class="math display">\[\mathcal{I}_{init}=M_A\otimes M_C+(1-M_A)\otimes I_{in}\]</span></p><p>Refiner负责融合表情转换器不同分支的输出，生成最终的表情编辑。如图2所示，三个局部分支的输出首先根据它们在面部图像中的各自位置缝合成单个图像。缝合的图像然后与全局分支的输出连接，并馈送到细化器以生成最终的表情编辑。</p><h2 id="模型训练">模型训练</h2><p>如果直接级联多个EF-GAN模块并从零开始训练，很难获得良好的表达式编辑。作者推测，这在很大程度上是由于早期EF-GAN模块的噪声面部图像。将这些噪声较大的人脸图像作为输入，级联EF-GAN的后期很容易受到影响，产生较差的编辑效果。此外，还会积累不必要的编辑，使网络参数难以优化。</p><p>解决方式是先训练单个EF-GAN执行单步面部表情转换，接着使用训练良好的EF-GAN的权重来初始化级联中所有后续EF-GAN，并微调所有端到端的网络参数。通过这种训练方案，级联中的每个EF-GAN模块都有很好的初始化，从而使中间的面部表情图像对后期学习有意义的表情转换信息变得有用。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文字生成图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Everybody Dance Now笔记</title>
    <link href="/2023/03/11/Everybody%20Dance%20Now/"/>
    <url>/2023/03/11/Everybody%20Dance%20Now/</url>
    
    <content type="html"><![CDATA[<h1 id="everybody-dance-now">Everybody Dance Now</h1><p>为了完成给定一个人跳舞的视频到另一个人的目标，文章作者将这个过程分成三部：<strong>pose detection, global pose normalization, and mapping from normalized pose stick figures to the target subject</strong></p><h2 id="pose-detection">pose detection</h2><p>使用openpose对骨骼点进行标注<span class="math inline">\((x,y)\)</span> <img src="https://proxy.thisis.plus/20230311142224.png" alt="image.png" /></p><h2 id="global-pose-normalization">global pose normalization</h2><p>在不同的视频中，被拍摄的对象的肢体比例可能不同，或者站得离相机更近或更远。因此，在将两个对象之间的动作进行转换时，可能需要转换源人物的姿势关键点，使其符合目标人物的身体形状和位置，就像图3中的转换部分一样。作者通过分析每个人物的姿势高度和脚踝位置，并在两个视频中的最近和最远脚踝位置之间使用线性映射来找到这种转换。在收集这些位置之后，再根据每个帧的对应姿势检测计算其比例和平移。 <img src="https://proxy.thisis.plus/20230311142651.png" alt="原文图三" /></p><h2 id="mapping-from-normalized-pose-stick-figures-to-the-target-subject">mapping from normalized pose stick figures to the target subject</h2><ol type="1"><li><p>训练一个可以从source生成target人物的pix2pix GAN <img src="https://proxy.thisis.plus/20230311143611.png" alt="image.png" /></p></li><li><p>motion transfer 把source的舞蹈转移到目标人物身上 <img src="https://proxy.thisis.plus/20230311143636.png" alt="image.png" /></p></li><li><p>对人脸做特别的修正，使用了faceGAN <img src="https://proxy.thisis.plus/20230311143533.png" alt="image.png" /></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文字生成图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从0开始写c语言课设</title>
    <link href="/2023/03/03/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%86%99c%E8%AF%AD%E8%A8%80%E8%AF%BE%E8%AE%BE/"/>
    <url>/2023/03/03/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%86%99c%E8%AF%AD%E8%A8%80%E8%AF%BE%E8%AE%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="从0开始写c语言课设">从0开始写c语言课设</h1><h2 id="项目简述">项目简述</h2><p>管理系统是C语言课设的经典项目，但是在chatGPT已经兴起的今天依然有不少同学因课设而困扰，本文将从0开始写一个简单的药店管理系统。</p><p>项目开源于 <a href="https://github.com/StudyingLover/c_curriculum_design">GitHub</a></p><pre><code class=" mermaid">flowchart TD;    login--&gt;read_from_file    login--&gt;encrypt--&gt;login    read_from_file--&gt;*head    *head--&gt;add_drug    *head--&gt;modify_drug    *head--&gt;delete_drug    *head--&gt;insert_drug    *head--&gt;drug_sort    *head--&gt;search    add_drug--&gt;save_to_file    modify_drug--&gt;save_to_file    delete_drug--&gt;save_to_file    drug_sort--&gt;save_to_file    insert_drug--&gt;save_to_file    search--&gt;save_to_file</code></pre><pre><code class=" mermaid">flowchart TD;    main--&gt;login    login--&gt;encrypt    encrypt--&gt;login    login--&gt;read_from_file    read_from_file--&gt;add_drug    read_from_file--&gt;modify_drug    read_from_file--&gt;delete_drug    read_from_file--&gt;insert_drug    read_from_file--&gt;drug_sort    read_from_file--&gt;search    search --&gt;id    search --&gt;name    search --&gt;stock    add_drug--&gt;save_to_file    modify_drug--&gt;save_to_file    delete_drug--&gt;save_to_file    drug_sort--&gt;save_to_file    insert_drug--&gt;save_to_file    search--&gt;save_to_file</code></pre><h2 id="开发环境">开发环境</h2><ul><li>操作系统：Windows 10</li><li>CMake：3.10</li><li>GCC：mingw32 6.3</li><li>IDE：Clion</li></ul><h2 id="项目结构">项目结构</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.<br>├── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span><br>├── CMakeLists<span class="hljs-selector-class">.txt</span><br>├── README<span class="hljs-selector-class">.md</span><br>├── <span class="hljs-selector-class">.gitignore</span><br>├── include<br>│   ├── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.h</span><br>│   └── actions<br>│       ├── add<span class="hljs-selector-class">.h</span><br>│       ├── delete<span class="hljs-selector-class">.h</span><br>│       ├── sort<span class="hljs-selector-class">.h</span><br>│       ├── modify<span class="hljs-selector-class">.h</span><br>│       ├── search<span class="hljs-selector-class">.h</span><br>│       ├── insert<span class="hljs-selector-class">.h</span><br>│       ├── search<span class="hljs-selector-class">.h</span><br>│   └── date<br>│       ├── date<span class="hljs-selector-class">.h</span><br>│   └── log<br>│       ├── log<span class="hljs-selector-class">.h</span><br>│   └── user<br>│       ├── user<span class="hljs-selector-class">.h</span>   <br>├── <span class="hljs-attribute">src</span><br>│   ├── actions<br>│       ├── add<span class="hljs-selector-class">.c</span><br>│       ├── delete<span class="hljs-selector-class">.c</span><br>│       ├── sort<span class="hljs-selector-class">.c</span><br>│       ├── modify<span class="hljs-selector-class">.c</span><br>│       ├── search<span class="hljs-selector-class">.c</span><br>│       ├── insert<span class="hljs-selector-class">.c</span><br>│       ├── search<span class="hljs-selector-class">.c</span><br>│   └── date<br>│       ├── date<span class="hljs-selector-class">.c</span><br>│   └── log<br>│       ├── log<span class="hljs-selector-class">.c</span><br>│   └── user<br>│       ├── user<span class="hljs-selector-class">.c</span>   <br>├── build<br>├── config<br>│   ├── drugs<span class="hljs-selector-class">.txt</span><br>├── cmake-build-debug<br></code></pre></td></tr></table></figure><h2 id="项目设计">项目设计</h2><h3 id="功能简介">功能简介</h3><pre><code class=" mermaid">flowchart TB药店管理系统--&gt;账号注册/登录账号注册/登录--&gt;创建药品账号注册/登录--&gt;修改药品账号注册/登录--&gt;展示现有药品账号注册/登录--&gt;删除药品账号注册/登录--&gt;搜索药品搜索药品--&gt;简单搜索搜索药品--&gt;复合搜索账号注册/登录--&gt;排序排序--&gt;按价格排序排序--&gt;按库存排序排序--&gt;按名字排序排序--&gt;按类别排序账号注册/登录--&gt;统计</code></pre><h3 id="药品属性">药品属性</h3><pre><code class=" mermaid">flowchart TB药品属性--&gt;药品名药品属性--&gt;药品类别药品属性--&gt;药品价格药品属性--&gt;药品库存药品属性--&gt;药品生产日期药品属性--&gt;药品有效期药品属性--&gt;药品生产厂家</code></pre><h3 id="时间计划">时间计划</h3><pre><code class=" mermaid">gantt    信息录入，信息查看 :des1, 2023-02-27,2023-02-28    信息删除，信息保存 :des2, after des1, 1d    搜索药品 :des3, after des2, 2d    信息统计 :des4, after des3, 1d</code></pre><h2 id="实现功能">实现功能</h2><p>我的博客mermaid支持存在一些问题，所以链表操作的示意图后面会补上 ### main.h 通过一个结构体定义了药品信息，包括药品id、药品名称、药品类型、药品价格、药品库存、生产日期、保质期、生产厂家等信息。生产日期格式为<code>yyyy-mm-dd</code> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_MAIN_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_MAIN_H</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drug</span> &#123;</span><br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br>    <span class="hljs-type">char</span> type[<span class="hljs-number">50</span>];<br>    <span class="hljs-type">float</span> price;<br>    <span class="hljs-type">int</span> stock;<br>    <span class="hljs-type">char</span> production_date[<span class="hljs-number">50</span>];  <span class="hljs-comment">// 生产日期</span><br>    <span class="hljs-type">char</span> expiration_date[<span class="hljs-number">50</span>];  <span class="hljs-comment">// 保质期</span><br>    <span class="hljs-type">char</span> manufacturer[<span class="hljs-number">50</span>];  <span class="hljs-comment">// 生产厂家</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drug</span> <span class="hljs-title">data</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_MAIN_H</span></span><br></code></pre></td></tr></table></figure></p><h3 id="登录">登录</h3><p>登陆部分复用了大二同学的一个项目，方法是写死一个管理员账号和密码，然后输入账号密码进行验证，验证成功后进入主菜单，否则重新输入，有三次输入机会。</p><ul><li>user.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_USER_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_USER_H</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_USER_H</span></span><br></code></pre></td></tr></table></figure></li><li>user.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-type">char</span> pass[<span class="hljs-number">15</span>] = <span class="hljs-string">&quot;abc123&quot;</span>, ch[<span class="hljs-number">15</span>] = <span class="hljs-string">&quot;12345678&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;please enter the correct username and password: (you have three chances to enter) \n//username: 12345678; correct password: abc123&quot;</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        <span class="hljs-type">char</span> pass1[<span class="hljs-number">15</span>], ch1[<span class="hljs-number">15</span>];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;**************************************************\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--------------------------------------------------\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\tlogin\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--------------------------------------------------\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;account:\n&quot;</span>);<br>        gets(ch1);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--------------------------------------------------\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;password:\n&quot;</span>);<br>        gets(pass1);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--------------------------------------------------\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;**************************************************\n\n\n&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(ch, ch1) == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">strcmp</span>(pass, pass1) == <span class="hljs-number">0</span>)<br>        &#123; <span class="hljs-comment">// 两字符串相等时为0</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;password correct\n&quot;</span>);<br>            system(<span class="hljs-string">&quot;cls&quot;</span>);<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong,please try again&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;you only have %d chance(s) to try&quot;</span>, <span class="hljs-number">3</span> - i - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">3</span> - <span class="hljs-number">1</span> - i == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        system(<span class="hljs-string">&quot;cls&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="文件读取与保存">文件读取与保存</h3><p>这里的功能是直接定义在<code>main.c</code>文件中的</p><ul><li>main.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> config_path[<span class="hljs-number">100</span>] = <span class="hljs-string">&quot;../config/drugs.txt&quot;</span>;<span class="hljs-comment">//文件路径,../是因为main.c和config文件夹在同一目录下，但是编译后的可执行文件在build文件夹下，所以需要返回上一级目录</span><br><br><span class="hljs-keyword">struct</span> node *<span class="hljs-title function_">read_from_file</span><span class="hljs-params">()</span><br>&#123;<br>    FILE *fp = fopen(config_path, <span class="hljs-string">&quot;r+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Cannot open file.\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">head</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">tail</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-type">char</span> line[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">while</span> (fgets(line, <span class="hljs-number">100</span>, fp) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;len:%d  ,  %s&quot;</span>,<span class="hljs-built_in">strlen</span>(line),line);<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drug</span> <span class="hljs-title">new_drug</span>;</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(line) == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">sscanf</span>(line, <span class="hljs-string">&quot;%d,%[^,],%[^,],%f,%d,%[^,],%[^,],%[^,]&quot;</span>, &amp;new_drug.id, new_drug.name,<br>               new_drug.type, &amp;new_drug.price, &amp;new_drug.stock, new_drug.production_date, new_drug.expiration_date, new_drug.manufacturer);<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> (<span class="hljs-keyword">struct</span> node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>        new_node-&gt;data = new_drug;<br>        new_node-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            head = new_node;<br>            tail = new_node;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            tail-&gt;next = new_node;<br>            tail = new_node;<br>        &#125;<br>    &#125;<br><br>    fclose(fp);<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_to_file</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head)</span><br>&#123;<br>    FILE *fp = fopen(config_path, <span class="hljs-string">&quot;w+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Cannot open file.\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">current</span> =</span> head;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%d,%s,%s,%.2f,%d,%s,%s,%s\n&quot;</span>, current-&gt;data.id, current-&gt;data.name,<br>                current-&gt;data.type, current-&gt;data.price, current-&gt;data.stock, current-&gt;data.production_date, current-&gt;data.expiration_date, current-&gt;data.manufacturer);<br>        current = current-&gt;next;<br>    &#125;<br><br>    fclose(fp);<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="添加药品">添加药品</h3><p>这里分两种情况讨论 1. 头节点为空，直接添加 2. 头节点不为空，遍历链表，找到最后一个节点，然后添加</p><ul><li>add.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;date/date.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">add_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **head)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drug</span> <span class="hljs-title">new_drug</span>;</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug ID: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;new_drug.id);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug name: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.name);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug type: \n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 means prescription drugs , and 2 means OTC(over-the-counter drugs)&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.type);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug price: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;new_drug.price);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug stock: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;new_drug.stock);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug production date: \n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the format of date is YYYY-MM-DD ,for example ,2022-03-02&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.production_date);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug expiration date(days): &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.expiration_date);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug manufacturer: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.manufacturer);<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> (<span class="hljs-keyword">struct</span> node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>    new_node-&gt;data = new_drug;<br>    new_node-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (*head == <span class="hljs-literal">NULL</span>) &#123;<br>        *head = new_node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">struct</span> node *current = *head;<br>        <span class="hljs-keyword">while</span> (current-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>            current = current-&gt;next;<br>        &#125;<br>        current-&gt;next = new_node;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>add.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_ADD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_ADD_H</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">add_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **head)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_ADD_H</span></span><br></code></pre></td></tr></table></figure></li></ul><h3 id="删除药品">删除药品</h3><ul><li><p>delete.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_DELETE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_DELETE_H</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">delete_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **head, <span class="hljs-type">int</span> id)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_DELETE_H</span></span><br></code></pre></td></tr></table></figure></p></li><li><p>delete.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">delete_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **head, <span class="hljs-type">int</span> id)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">current</span> =</span> *head;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">previous</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (current-&gt;data.id == id) &#123;<br>            <span class="hljs-keyword">if</span> (previous == <span class="hljs-literal">NULL</span>) &#123;<br>                *head = current-&gt;next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                previous-&gt;next = current-&gt;next;<br>            &#125;<br><br>            <span class="hljs-built_in">free</span>(current);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Drug with ID %d has been deleted.\n&quot;</span>, id);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        previous = current;<br>        current = current-&gt;next;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Drug with ID %d not found.\n&quot;</span>, id);<br>&#125;<br></code></pre></td></tr></table></figure></p></li></ul><h3 id="修改药品">修改药品</h3><ul><li>modify.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">modify_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head)</span> &#123;<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the ID of the drug you want to modify: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;id);<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">current</span> =</span> head;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (current-&gt;data.id == id) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new name of the drug: &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, current-&gt;data.name);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new type of the drug: \n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 means prescription drugs , and 2 means OTC(over-the-counter drugs)&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, current-&gt;data.type);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new price of the drug: &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;current-&gt;data.price);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new stock of the drug: &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;current-&gt;data.stock);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new production date of the drug: \n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the format of date is YYYY-MM-DD ,for example ,2022-03-02&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, current-&gt;data.production_date);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new expiration date of the drug(days): &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, current-&gt;data.expiration_date);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new manufacturer of the drug: &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, current-&gt;data.manufacturer);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Drug with ID %d has been modified.\n&quot;</span>, id);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        current = current-&gt;next;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Drug with ID %d not found.\n&quot;</span>, id);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>modify.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_MODIFY_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_MODIFY_H</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">modify_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_MODIFY_H</span></span><br></code></pre></td></tr></table></figure></li></ul><h3 id="查询药品">查询药品</h3><p>查询部分采用了及其暴力的方法，给每个要查询的属性写一个函数，然后遍历链表，将所有符合条件的药品都打印出来。</p><ul><li>search.h</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_SEARCH_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_SEARCH_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../main.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">search_by_id</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head, <span class="hljs-type">int</span> id)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">search_by_name</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head, <span class="hljs-type">char</span> *name)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_SEARCH_H</span></span><br></code></pre></td></tr></table></figure><ul><li>search.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;log/log.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">search_by_id</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head, <span class="hljs-type">int</span> id)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">current</span> =</span> head;<br>    <span class="hljs-type">int</span> found = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (current-&gt;data.id == id) &#123;<br>            print_drug(current-&gt;data);<br>            found = <span class="hljs-number">1</span>;<br>        &#125;<br><br>        current = current-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!found) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No drug with ID %d found.\n&quot;</span>, id);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">search_by_name</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head, <span class="hljs-type">char</span> *name)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">current</span> =</span> head;<br>    <span class="hljs-type">int</span> found = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(current-&gt;data.name, name) == <span class="hljs-number">0</span>) &#123;<br>            print_drug(current-&gt;data);<br>            found = <span class="hljs-number">1</span>;<br>        &#125;<br><br>        current = current-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!found) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No drug with name \&quot;%s\&quot; found.\n&quot;</span>, name);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head)</span> &#123;<br>    <span class="hljs-type">int</span> choice, id;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Choose a search criteria:\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1. ID\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2. Name\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter your choice: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;choice);<br><br>    <span class="hljs-keyword">switch</span> (choice) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the ID of the drug to search: &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;id);<br>            search_by_id(head, id);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the name of the drug to search: &quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, name);<br>            search_by_name(head, name);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid choice. Please try again.\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="插入药品">插入药品</h3><p>这是一个我也不知道为什么要写的功能，但是我还是写了，就是在链表中插入一个药品，插入的位置是按照ID来搜索的。 - insert.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_INSERT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_INSERT_H</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **head, <span class="hljs-type">int</span> last_id)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_INSERT_H</span></span><br></code></pre></td></tr></table></figure></p><ul><li>insert.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **head , <span class="hljs-type">int</span> last_id)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drug</span> <span class="hljs-title">new_drug</span>;</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug ID: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;new_drug.id);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug name: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.name);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug type: \n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 means prescription drugs , and 2 means OTC(over-the-counter drugs)&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.type);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug price: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;new_drug.price);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug stock: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;new_drug.stock);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug production date: \n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the format of date is YYYY-MM-DD ,for example ,2022-03-02&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.production_date);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug expiration date: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.expiration_date);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter drug manufacturer: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, new_drug.manufacturer);<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> (<span class="hljs-keyword">struct</span> node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>    new_node-&gt;data = new_drug;<br>    new_node-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (*head == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        *head = new_node;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">//将新节点插入到last_id所在的位置之后</span><br>        <span class="hljs-keyword">struct</span> node *current = *head;<br>        <span class="hljs-keyword">while</span> (current-&gt;data.id != last_id)<br>        &#123;<br>            current = current-&gt;next;<br>        &#125;<br>        new_node-&gt;next = current-&gt;next;<br>        current-&gt;next = new_node;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure> ### 统计药品 统计药品的功能是统计出当前库存中的药品的总数，总价值。</li><li>count.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_COUNT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_COUNT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../main.h&quot;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">countMedicine</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node * head)</span>;<br><span class="hljs-type">float</span> <span class="hljs-title function_">countTotalValue</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node* head)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_COUNT_H</span></span><br><br></code></pre></td></tr></table></figure></li><li>count.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">countMedicine</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node* head)</span> &#123;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>* <span class="hljs-title">p</span> =</span> head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        count++;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><span class="hljs-type">float</span> <span class="hljs-title function_">countTotalValue</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node* head)</span> &#123;<br>    <span class="hljs-type">float</span> totalValue = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>* <span class="hljs-title">p</span> =</span> head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        totalValue += (p-&gt;data.price * p-&gt;data.stock);<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> totalValue;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="单个节点输出">单个节点输出</h3><p>这个函数是为了方便输出单个节点的数据，因为在输出链表的时候，每个节点都要输出，所以我就把这个函数单独拿出来了。</p><p>请注意，这个函数式在log文件夹下面的 - log.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_LOG_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_LOG_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../main.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> drug d)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_LOG_H</span></span><br></code></pre></td></tr></table></figure></p><ul><li>log.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_drug</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> drug d)</span> &#123;<br><span class="hljs-comment">//    printf(&quot;%-10d%-20s%-10d\n&quot;, d.id, d.name, d.stock);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ID: %d, Name: %s, Type: %s, Price: %.2f, Stock: %d, Production Date: %s, Expiration Date: %s, Manufacturer: %s\n&quot;</span>, d.id, d.name, d.type, d.price, d.stock, d.production_date, d.expiration_date, d.manufacturer);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="日期处理">日期处理</h3><p>这个函数是为了处理日期，因为我在输入药品的时候，日期是以字符串的形式输入的，所以我就写了这个函数，把字符串转换成日期。</p><p>这个功能因为跨平台的问题，可能不能很好的运行。此外，在Linux下可以使用<code>strptime()</code>这个函数来做日期的转换，但是在Windows下没有这个函数。</p><ul><li>date.h <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> C_CURRICULUM_DESIGN_DATE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C_CURRICULUM_DESIGN_DATE_H</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">getOverDate</span><span class="hljs-params">(<span class="hljs-type">char</span>* productionDate, <span class="hljs-type">char</span> shelfLife_str)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//C_CURRICULUM_DESIGN_DATE_H</span></span><br></code></pre></td></tr></table></figure></li><li>date.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;time.h&gt;</span><br><br><span class="hljs-comment">// On Windows platform, the function strptime() from time.h is not supported, I found.</span><br><br><span class="hljs-type">char</span>* <span class="hljs-title function_">getOverDate</span><span class="hljs-params">(<span class="hljs-type">char</span>* productionDate, <span class="hljs-type">char</span>* shelfLife_str)</span> &#123;<br>    <span class="hljs-type">char</span>* temp= shelfLife_str;<br>    <span class="hljs-type">int</span> shelfLife = atoi(temp);<br>    <span class="hljs-comment">// 将生产日期字符串按照 &quot;-&quot; 分割为年、月、日三个字符串</span><br>    <span class="hljs-type">char</span>* year = strtok(productionDate, <span class="hljs-string">&quot;-&quot;</span>);<br>    <span class="hljs-type">char</span>* month = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;-&quot;</span>);<br>    <span class="hljs-type">char</span>* day = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;-&quot;</span>);<br><br>    <span class="hljs-comment">// 将年、月、日字符串转换为整型变量</span><br>    <span class="hljs-type">int</span> year_int = atoi(year);<br>    <span class="hljs-type">int</span> month_int = atoi(month);<br>    <span class="hljs-type">int</span> day_int = atoi(day);<br><br>    <span class="hljs-comment">// 计算过期日期的年、月、日</span><br>    year_int += (shelfLife / <span class="hljs-number">365</span>);<br>    shelfLife %= <span class="hljs-number">365</span>;<br>    month_int += (shelfLife / <span class="hljs-number">30</span>);<br>    day_int += (shelfLife % <span class="hljs-number">30</span>);<br>    <span class="hljs-keyword">if</span> (day_int &gt; <span class="hljs-number">30</span>) &#123;<br>        day_int -= <span class="hljs-number">30</span>;<br>        month_int++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (month_int &gt; <span class="hljs-number">12</span>) &#123;<br>        month_int -= <span class="hljs-number">12</span>;<br>        year_int++;<br>    &#125;<br><br>    <span class="hljs-comment">// 将过期日期的年、月、日转换为字符串</span><br>    <span class="hljs-type">char</span>* expirationDate = (<span class="hljs-type">char</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">11</span>);<br>    <span class="hljs-built_in">sprintf</span>(expirationDate, <span class="hljs-string">&quot;%04d-%02d-%02d&quot;</span>, year_int, month_int, day_int);<br><br>    <span class="hljs-keyword">return</span> expirationDate;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="功能整合">功能整合</h2><p>将上面的功能整合起来，就是我们的主函数了。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/count.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/search.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;log/log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;user/user.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/add.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/delete.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/modify.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/sort.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;actions/insert.h&quot;</span></span><br><br><span class="hljs-type">char</span> config_path[<span class="hljs-number">100</span>] = <span class="hljs-string">&quot;../config/drugs.txt&quot;</span>;<br><br><span class="hljs-keyword">struct</span> node *<span class="hljs-title function_">read_from_file</span><span class="hljs-params">()</span><br>&#123;<br>    FILE *fp = fopen(config_path, <span class="hljs-string">&quot;r+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Cannot open file.\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">head</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">tail</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-type">char</span> line[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">while</span> (fgets(line, <span class="hljs-number">100</span>, fp) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drug</span> <span class="hljs-title">new_drug</span>;</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(line) == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">sscanf</span>(line, <span class="hljs-string">&quot;%d,%[^,],%[^,],%f,%d,%[^,],%[^,],%[^,]&quot;</span>, &amp;new_drug.id, new_drug.name,<br>               new_drug.type, &amp;new_drug.price, &amp;new_drug.stock, new_drug.production_date, new_drug.expiration_date, new_drug.manufacturer);<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> (<span class="hljs-keyword">struct</span> node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>        new_node-&gt;data = new_drug;<br>        new_node-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            head = new_node;<br>            tail = new_node;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            tail-&gt;next = new_node;<br>            tail = new_node;<br>        &#125;<br>    &#125;<br><br>    fclose(fp);<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_to_file</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head)</span><br>&#123;<br>    FILE *fp = fopen(config_path, <span class="hljs-string">&quot;w+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: Cannot open file.\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">current</span> =</span> head;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%d,%s,%s,%.2f,%d,%s,%s,%s\n&quot;</span>, current-&gt;data.id, current-&gt;data.name,<br>                current-&gt;data.type, current-&gt;data.price, current-&gt;data.stock, current-&gt;data.production_date, current-&gt;data.expiration_date, current-&gt;data.manufacturer);<br>        current = current-&gt;next;<br>    &#125;<br><br>    fclose(fp);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> t;<br>    t = login();<br>    <span class="hljs-keyword">if</span> (t == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;you have entered the wrong password for three times, the program will exit.&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">head</span> =</span> read_from_file();<br>    <span class="hljs-type">int</span> option = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span> (option != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please select an option:\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1. Add a new drug\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2. Modify an existing drug\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3. Display drug list\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4. Delete a drug\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;5. Search\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;6. Sort\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;7. Statistics\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;8. insert\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0. Quit\n&quot;</span>);<br><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;option);<br><br>        <span class="hljs-keyword">if</span> (option == <span class="hljs-number">1</span>)<br>        &#123;<br>            add_drug(&amp;head);<br>            <span class="hljs-type">int</span> save_option = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Save changes to file?\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1. Yes\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2. No\n&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;save_option);<br><br>            <span class="hljs-keyword">if</span> (save_option == <span class="hljs-number">1</span>)<br>            &#123;<br>                save_to_file(head);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">2</span>)<br>        &#123;<br>            modify_drug(head);<br>            <span class="hljs-type">int</span> save_option = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Save changes to file?\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1. Yes\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2. No\n&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;save_option);<br><br>            <span class="hljs-keyword">if</span> (save_option == <span class="hljs-number">1</span>)<br>            &#123;<br>                save_to_file(head);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">3</span>)<br>        &#123;<br>            <span class="hljs-keyword">struct</span> node *current = head;<br>            <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>)<br>            &#123;<br>                print_drug(current-&gt;data);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>                current = current-&gt;next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">4</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> delete_id;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;delete_id);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, delete_id);<br>            delete_drug(&amp;head, delete_id);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">5</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> search_option = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Choose a search criteria:\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1. Simple search\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2. Complex search\n&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;search_option);<br>            <span class="hljs-keyword">if</span> (search_option == <span class="hljs-number">1</span>)<br>            &#123;<br>                search(head);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (search_option == <span class="hljs-number">2</span>)<br>            &#123;<br>                search_complex(head);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid option. Please try again.\n&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">6</span>)<br>        &#123;<br>            drug_sort(head);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">7</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;total:%d\n&quot;</span>, countMedicine(head));<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;total price:%.2f\n&quot;</span>, countTotalValue(head));<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">8</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> insert_id;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;insert_id);<br>            insert_drug(&amp;head, insert_id);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Bye!\n&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid option. Please try again.\n&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    save_to_file(head);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></p><h2 id="项目编译">项目编译</h2><h3 id="windows">Windows</h3><h4 id="clionvscodeothers">Clion/VScode/others</h4><p>使用自带的cmake工具或插件进行编译</p><h4 id="bash">bash</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> ./build<br>cmake .. -G <span class="hljs-string">&quot;MinGW Makefiles&quot;</span><br>cmake --build .<br></code></pre></td></tr></table></figure><h3 id="linuxmacos">Linux/MacOS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> ./build<br>cmake ..<br>make<br></code></pre></td></tr></table></figure><h3 id="github-actions">github actions</h3><p>在<code>.github/workflows</code>文件夹下创建文件<code>build.yml</code> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">on</span> <span class="hljs-string">Ubuntu</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br>  <span class="hljs-attr">pull_request:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">ref:</span> <span class="hljs-string">master</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Get</span> <span class="hljs-string">CMake</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">symbitic/install-cmake@master</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">build</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          mkdir build</span><br><span class="hljs-string">          cd ./build</span><br><span class="hljs-string">          cmake ..</span><br><span class="hljs-string">          make</span><br></code></pre></td></tr></table></figure> 然后上传到Github即可自动编译。如果你希望获取编译好的文件，可以在最后加上将编译好的文件push到master分支的操作。</p><h2 id="感谢">感谢</h2><p><strong>感谢JetBrains学生认证提供的Clion免费许可证</strong> <img src="https://t7.baidu.com/it/u=2893921812,2528969823&amp;fm=74&amp;app=80&amp;size=f256,256&amp;n=0&amp;f=JPEG&amp;fmt=auto?sec=1678122000&amp;t=dca9fd6eaa4d57f7f0c991def94b5c84" alt="JetBrains" /> <strong>感谢GitHub学生认证提供的copilot</strong> <img src="https://proxy.thisis.plus/20230305215914.png" alt="copilot" /> <strong>感谢openai的chatGPT</strong></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DALLE2笔记</title>
    <link href="/2023/02/09/DALLE2%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/02/09/DALLE2%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="dalle2笔记">DALLE2笔记</h1><iframe src="//player.bilibili.com/player.html?aid=770625648&amp;bvid=BV17r4y1u77B&amp;cid=766807720&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><h2 id="abstract">Abstract</h2><pre><code class=" mermaid">graph LR;文本--CLIP模型--&gt;文本特征;文本特征--prior生成图像特征--&gt;两阶段模型;两阶段模型--decoder--&gt;图像;文本--ground truth--&gt;两阶段模型;</code></pre><p>基于扩散模型的解码器能够通过给定信息的解码器，生成很多不一样的图片 ，语义信息和风格比较接近，只是细节不一样。</p><p>可以直接修改和编辑模型，是zero-shot的，不需要重新训练。</p><p>整体上Dalle2都是一个扩散模型 ## Introduction</p><p>扩散模型是一种概率分布模型，生成图片是从一个分布中采样，多样性很高，保真度比不过GAN。20年之后有一系列模型改进了这一点。这一系列工作采用了很多技巧，其中一个比较著名的是引导guideance technique，能够牺牲一部分多样性来达到更好的保真度。</p><p><img src="https://proxy.thisis.plus/20230209161230.png" /> 上半部分说的是CLIP，下半部分是DALLE2。</p><p>CLIP模型中文本和图像分别通过一个文本编码器和一个图像编码器，得到一个文本特征和一个图像特征。对应的文本特征和图像特征之间就是正样本，不对应的就是负样本。通过这种方式来做对比学习，把文本编码器和图像编码器都学的很好，文本和图像的特征就真的联系在了一起。CLIP模型训练好了之后，文本编码器和图像编码器就锁住了，在Dalle2中就不会再训练了。</p><p>两阶段训练方式最暴力的方式其实是中间有个大模型，中间去学一些融合的特征，直接生成就可以了。但如何像作者在摘要所说的，中间有一个显式的生成过程，先从文本生成文本特征，再生成图像特征再由图像特征生成图片效果就会好很多。</p><p>训练的时候，先用已有图像(CLIP模型中的图片)生成的图像特征作为ground truth去监督，也就是用文本特征来预测ground truth这个图像特征。推理的时候由文本特征就可以直接生成类似CLIP生成的图像特征。</p><h2 id="图像生成">图像生成</h2><h3 id="gan">GAN</h3><p><img src="https://proxy.thisis.plus/20230210171156.png" /> 训练两个网络，一个是生成器，一个是判别器。生成器的目标是生成一个和真实图片尽可能相似的图片，判别器的目标是判断一个图片是真实的还是生成的。两个网络相互竞争，最终生成器生成的图片和真实图片的分布越来越接近。</p><p>有一个缺点就是训练不够稳定，因为需要同时训练两个网络。此外多样性比较差。 ### auto-encoder</p><p><img src="https://proxy.thisis.plus/20230210171228.png" /> 给定一个输入x，过一个编码器，然后就能得到一个特征z(特征维度一般会小很多，所以管他叫bottleneck)，再过一个解码器，得到一个图像。训练时的目标函数就是尽可能重建原来输入x</p><h3 id="denoising-auto-encoder">denoising auto-encoder</h3><p><img src="https://proxy.thisis.plus/20230210171318.png" /> 先把原图进行一定的打乱，然后把扰乱之后的特征传给编码器，后续和auto-encoder一样。训练时的目标函数还是尽可能重建原来输入x</p><h3 id="varitional-auto-encoder">varitional auto-encoder</h3><p><img src="https://proxy.thisis.plus/20230210171503.png" /> 中间不在是学习一个特征，而是去学习了一个分布。作者假设了中间是一个高斯分布，就可以用均值和方差来表示。具体来说就是得到编码器出来的特征之后，在后面加一些fc层，预测一个均值和方差，得到对应的均值和方差之后，我们用公式<span class="math inline">\(z=u+\sigma\epsilon\)</span>采样一个z出来,然后给解码器。</p><p>预测的时候，我们可以把编码器去掉，直接用均值和方差来预测。</p><p>从数学角度讲，这个模型是一个概率模型，给定x得到z这一过程就是一个后验概率，学出来的distribution就是一个先验分布，给定z预测x就是likelihood,这里做的就是maximum likelihood。</p><p>图像多样性好得多</p><h3 id="vqvaevector-quantised-vae">VQVAE(vector quantised VAE)</h3><p><img src="https://proxy.thisis.plus/20230210171524.png" /> 将VAE做量化。之前的VAE不好把图片做大，分类也不是很好学，所以取而代之的是不做分布的预测，而是以codebook代替。cookbook可以理解成聚类的中心，cookbook大小一般是<span class="math inline">\(K*D\)</span>,<span class="math inline">\(K\)</span>的大小一般是8192，<span class="math inline">\(D\)</span>的大小一般是512或者768，意思是由8912个长度为D的向量。</p><p>输入x先经过一个编码器，得到一个特征图大小为<span class="math inline">\(h*w\)</span>,将特征图里的向量和cookbook里的特征做对比，看和哪个聚类中心最接近，然后把聚类中心的编码存到矩阵Z中，用矩阵z作为新的特征。</p><p>优化起来相对容易。</p><p>想做生成的话，就需要再训练一个prior网络.论文作者训练了一个pixelCNN，用来生成图片。</p><h3 id="vqvae2">VQVAE2</h3><p>模型变成了层级式的，加入了全局式的建模，加上了attention，表达能力增强。把pixelCNN换成了GPT.</p><h3 id="dall-e">DALL-E</h3><p><img src="https://proxy.thisis.plus/20230210171634.png" /> 文本先通过BPE编码，得到一个256维特征。还有一个图像，256<em>256,经过一个VQ-VAE(来自训练好的cookbook，直接拿过来用),得到图像特征32</em>32,维度下降了很多，一共有1024个token，将文本特征和图像特征连接起来，变成了一个1028的序列，将序列给GPT，训练GPT。</p><p>推理则是提供一个文本，得到文本特征，用GPT从文本特征徐策图片特征，用自回归的方式生成图片。生成出来的图片用CLIP排序，得到最好的图片。</p><h3 id="diffusion-model">Diffusion model</h3><p><img src="https://proxy.thisis.plus/20230209180240.png" /> 假设有一个<span class="math inline">\(x_0\)</span>，每次加入一个很小的正态分布噪声，加了很多次之后就会变成一个真正的正态分布的噪声，这就是diffusion的forward过程。</p><p>将过程反转，整个模型都是共享参数的。</p><p>diffusion model采取了一个比较常见的模型结构U-NET,先用一个编码器把图像一点一点压小，再用一个解码器一点点恢复回来，前后尺寸大小一样。中间加上shortcut。 <img src="https://proxy.thisis.plus/20230210172229.png" /></p><p>不足时训练比较贵，推理也比较慢</p><h3 id="ddpm">DDPM</h3><p>DDPM是对diffusion的改进，不再去预测图片，而是去预测添加的噪声，U-NET的参数除了图像，还加入了一个time embedding用来表示到了反向扩散第几步。</p><p>学习正态分布是只需要学习均值，方差设置成常数也可以表现得很好</p><h3 id="classifier-guidence-diffusion">classifier guidence diffusion</h3><p>反向扩散过程 <img src="https://proxy.thisis.plus/20230209181540.png" /></p><p>训练同时训练一个图像分类器(在加了噪声的ImageNET上训练)，当有一个图片，直接扔给图片分类器，可以得到一个交叉熵损失函数，得到一个梯度，用梯度帮助图片生成(暗含了图片是否有物体)</p><h3 id="classifier-free-guidance">classifier-free guidance</h3><p>训练的时候生成了两个输出，一个是有条件时生成输出，一个是没有条件时生成输出。训练的时候随机去掉文本，知道有文本输出和无文本输出的差距，就可以从无条件输出得到有条件输出</p><h2 id="method">method</h2><p>数据集依然是图片文本对 ### decoder</p><p>用了CLIP guidence(这个guidence指的是在decoder的过程中，输入是t时刻的一个带噪声的图像，最终输出是一个图像)和classifier-free guidance，guidence信号要么来自CLIP，要么来自文本。训练的时候有10%的时间把CLIP特征设成0，有50%把文本随机丢掉。</p><p>用了级联式生成，训练过程中还加入了噪声。</p><h3 id="prior">prior</h3><ul><li>auto-regressive自回归</li><li>diffusion 扩散模型 不管是auto-regressive还是diffusion，都是用了classifier-free guidance</li></ul><p>auto-regressive效率太低</p><p>对于diffusion prior，作者训练了一个transformer decoder，输入输出是embedding,U-NET就不合适了。模型输入输入有文本，CLIP的文本特征，还有time step (步数的embedding)，还有加过噪声之后的图像特征，transformer本身的embedding(这个embedding被用来预测没有加过噪声的图像特征)。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>yolov5和yolov5-face环境搭建和常见踩坑</title>
    <link href="/2023/02/07/yolov5%E5%B8%B8%E8%A7%81%E8%B8%A9%E5%9D%91/"/>
    <url>/2023/02/07/yolov5%E5%B8%B8%E8%A7%81%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h2 id="yolov5环境搭建">yolov5环境搭建</h2><p>在随便哪新建一个<code>requirements.txt</code>文件 内容是 <figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs txt"># YOLOv5 requirements<br># Usage: pip install -r requirements.txt<br><br># Base ----------------------------------------<br>matplotlib&gt;=3.2.2<br>numpy&gt;=1.18.5<br>opencv-python&gt;=4.1.1<br>Pillow&gt;=7.1.2<br>PyYAML&gt;=5.3.1<br>requests&gt;=2.23.0<br>scipy&gt;=1.4.1<br>torch&gt;=1.7.0<br>torchvision&gt;=0.8.1<br>tqdm&gt;=4.64.0<br>protobuf&lt;=3.20.1  # https://github.com/ultralytics/yolov5/issues/8012<br><br># Logging -------------------------------------<br>tensorboard&gt;=2.4.1<br># wandb<br># clearml<br><br># Plotting ------------------------------------<br>pandas&gt;=1.1.4<br>seaborn&gt;=0.11.0<br><br># Export --------------------------------------<br># coremltools&gt;=5.2  # CoreML export<br># onnx&gt;=1.9.0  # ONNX export<br># onnx-simplifier&gt;=0.4.1  # ONNX simplifier<br># nvidia-pyindex  # TensorRT export<br># nvidia-tensorrt  # TensorRT export<br># scikit-learn==0.19.2  # CoreML quantization<br># tensorflow&gt;=2.4.1  # TFLite export (or tensorflow-cpu, tensorflow-aarch64)<br># tensorflowjs&gt;=3.9.0  # TF.js export<br># openvino-dev  # OpenVINO export<br><br># Extras --------------------------------------<br>ipython  # interactive notebook<br>psutil  # system utilization<br>thop&gt;=0.1.1  # FLOPs computation<br># albumentations&gt;=1.0.3<br># pycocotools&gt;=2.0  # COCO mAP<br># roboflow<br><br></code></pre></td></tr></table></figure> 然后在当前目录下打开命令行，创建一个环境 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n yolov5 python<br></code></pre></td></tr></table></figure> 创建好环境之后，激活环境 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate yolov5<br></code></pre></td></tr></table></figure> 然后安装依赖 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -r requirements.txt<br></code></pre></td></tr></table></figure> 安装完成后代码就可以运行了</p><h2 id="划分数据集">划分数据集</h2><p>新建一个<code>split_train_val.py</code>文件，内容如下 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">split_dataset</span>(<span class="hljs-params">src_folder, dest_folder, ratio</span>):<br>    images_folder = os.path.join(src_folder, <span class="hljs-string">&quot;images&quot;</span>)<br>    labels_folder = os.path.join(src_folder, <span class="hljs-string">&quot;labels&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(images_folder) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> os.path.exists(labels_folder):<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Source folder doesn&#x27;t exist.&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(dest_folder):<br>        os.makedirs(dest_folder)<br><br>    train_folder = os.path.join(dest_folder, <span class="hljs-string">&quot;train&quot;</span>)<br>    val_folder = os.path.join(dest_folder, <span class="hljs-string">&quot;val&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(train_folder):<br>        os.makedirs(train_folder)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(val_folder):<br>        os.makedirs(val_folder)<br><br>    train_images_folder = os.path.join(train_folder, <span class="hljs-string">&quot;images&quot;</span>)<br>    train_labels_folder = os.path.join(train_folder, <span class="hljs-string">&quot;labels&quot;</span>)<br>    val_images_folder = os.path.join(val_folder, <span class="hljs-string">&quot;images&quot;</span>)<br>    val_labels_folder = os.path.join(val_folder, <span class="hljs-string">&quot;labels&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(train_images_folder):<br>        os.makedirs(train_images_folder)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(train_labels_folder):<br>        os.makedirs(train_labels_folder)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(val_images_folder):<br>        os.makedirs(val_images_folder)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(val_labels_folder):<br>        os.makedirs(val_labels_folder)<br><br>    images = [f <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> os.listdir(images_folder) <span class="hljs-keyword">if</span> f.endswith(<span class="hljs-string">&quot;.bmp&quot;</span>) ]<br>    num_images = <span class="hljs-built_in">len</span>(images)<br><br>    <span class="hljs-keyword">for</span> i, image <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(images):<br>        image_path = os.path.join(images_folder, image)<br>        label_path = os.path.join(labels_folder, os.path.splitext(image)[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;.txt&quot;</span>)<br>        <span class="hljs-keyword">if</span> random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>) &lt; ratio:<br>            dest_images_folder = train_images_folder<br>            dest_labels_folder = train_labels_folder<br>        <span class="hljs-keyword">else</span>:<br>            dest_images_folder = val_images_folder<br>            dest_labels_folder = val_labels_folder<br>        shutil.copy2(image_path, os.path.join(dest_images_folder, image))<br>        shutil.copy2(label_path, os.path.join(dest_labels_folder, os.path.splitext(image)[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;.txt&quot;</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Copied &#123;&#125;/&#123;&#125; images&quot;</span>.<span class="hljs-built_in">format</span>(i + <span class="hljs-number">1</span>, num_images))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    src_folder = <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment"># 原始数据集的路径</span><br>    dest_folder = <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment"># 分割后的数据集的路径</span><br>    ratio = <span class="hljs-number">0.8</span>  <span class="hljs-comment"># 将 80% 的图片分到训练集，20% 的图片分到验证集</span><br><br>    split_dataset(src_folder, dest_folder, ratio)<br><br></code></pre></td></tr></table></figure> 划分训练集和验证集，运行<code>split_train_val.py</code>，传入刚才保存的文件夹路径，会将图片和标签划分到一个新的文件夹 <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> data<br><span class="hljs-bullet">    -</span> train<br><span class="hljs-bullet">        -</span> images<br><span class="hljs-bullet">        -</span> labels<br><span class="hljs-bullet">    -</span> val<br><span class="hljs-bullet">        -</span> images<br><span class="hljs-bullet">        -</span> labels<br></code></pre></td></tr></table></figure></p><h2 id="yolov5常见踩坑">yolov5常见踩坑</h2><h3 id="not-enough-values-to-unpack-expected-2-got-0">not enough values to unpack (expected 2, got 0)</h3><p>如图 <img src="https://drive.studyinglover.com/api/raw/?path=/photos/blog/yolov5-setting/93bbd4d663cd589dfdd522e0479bb46.png" /></p><p>我们需要检查一下我们标记的txt文件 举个例子</p><p>这是我们需要的标记格式</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">0 0.5 0.5 0.5 0.5<br></code></pre></td></tr></table></figure><p>这是错误的标注格式 <figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">0 0.5 0.5 0.5 0.5<br><br></code></pre></td></tr></table></figure></p><p>问题就出在了最后一行的<code>\n</code>上，我们删除最后一行就可以了。我用chatGPT写了一个函数来做这件事 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 去除txt文件中的空行</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_empty_lines</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        lines = f.readlines()<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(line)&gt;<span class="hljs-number">3</span>:<br>                f.write(line)<br></code></pre></td></tr></table></figure></p><h3 id="assertionerror-no-results.txt-files-found-in-contentyolov5-facerunstrainexp-nothing-to-plot.">AssertionError: No results.txt files found in /content/yolov5-face/runs/train/exp, nothing to plot.</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata">Traceback (most recent call last):<br><span class="hljs-keyword">File</span> <span class="hljs-string">&quot;train.py&quot;</span>, <span class="hljs-keyword">line</span> 513, <span class="hljs-keyword">in</span><br>train(hyp, opt, device, tb_writer, wandb)<br><span class="hljs-keyword">File</span> <span class="hljs-string">&quot;train.py&quot;</span>, <span class="hljs-keyword">line</span> 400, <span class="hljs-keyword">in</span> train<br>plot_results(save_dir=save_dir) # <span class="hljs-keyword">save</span> <span class="hljs-keyword">as</span> results.png<br><span class="hljs-keyword">File</span> <span class="hljs-string">&quot;/content/yolov5-face/utils/plots.py&quot;</span>, <span class="hljs-keyword">line</span> 393, <span class="hljs-keyword">in</span> plot_results<br><span class="hljs-keyword">assert</span> len(files), &#x27;<span class="hljs-keyword">No</span> results.txt files found <span class="hljs-keyword">in</span> %s, nothing to <span class="hljs-keyword">plot</span>.&#x27; % os.path.abspath(save_dir)<br>AssertionError: <span class="hljs-keyword">No</span> results.txt files found <span class="hljs-keyword">in</span> /content/yolov5-face/runs/train/exp, nothing to <span class="hljs-keyword">plot</span>.<br></code></pre></td></tr></table></figure><p>出现这个问题的原因是此代码块未运行 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Results</span><br>       <span class="hljs-keyword">if</span> ckpt.get(<span class="hljs-string">&#x27;training_results&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>           <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(results_file, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>               file.write(ckpt[<span class="hljs-string">&#x27;training_results&#x27;</span>])  <span class="hljs-comment"># write results.txt</span><br></code></pre></td></tr></table></figure> 如果你只使用单 GPU 并设置 epoch &lt;20，这个块将不起作用。解决方案是设置epoch&gt;20。</p><h3 id="gitpython找不到对应版本">gitpython找不到对应版本</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ERROR</span>: Could not find a version that satisfies the requirement gitpython&gt;=<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">30</span> (from versions: <span class="hljs-number">0</span>.<span class="hljs-number">1</span>.<span class="hljs-number">7</span>, <span class="hljs-number">0</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>b1, <span class="hljs-number">0</span>.<span class="hljs-number">3</span>.<span class="hljs-number">0</span>b1, <span class="hljs-number">0</span>.<span class="hljs-number">3</span>.<span class="hljs-number">0</span>b2, <span class="hljs-number">0</span>.<span class="hljs-number">3</span>.<span class="hljs-number">1</span>b2, <span class="hljs-number">0</span>.<span class="hljs-number">3</span>.<span class="hljs-number">2</span>rc1, <span class="hljs-number">0</span>.<span class="hljs-number">3</span>.<span class="hljs-number">2</span>, <span class="hljs-number">0.3.2.1</span>, <span class="hljs-number">0</span>.<span class="hljs-number">3</span>.<span class="hljs-number">3</span>, <span class="hljs-number">0</span>.<span class="hljs-number">3</span>.<span class="hljs-number">4</span>, <span class="hljs-number">0</span>.<span class="hljs-number">3</span>.<span class="hljs-number">5</span>, <span class="hljs-number">0</span>.<span class="hljs-number">3</span>.<span class="hljs-number">6</span>, <span class="hljs-number">0</span>.<span class="hljs-number">3</span>.<span class="hljs-number">7</span>, <span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>, <span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>, <span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>, <span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>, <span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>, <span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>, <span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3</span>, <span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span>, <span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5</span>, <span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">6</span>, <span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">7</span>, <span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">8</span>, <span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">9</span>.dev0, <span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">9</span>.dev1, <span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">9</span>, <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>, <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>, <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">3</span>, <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">4</span>, <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">5</span>, <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">6</span>, <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">7</span>, <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">8</span>, <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">9</span>, <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">10</span>, <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">11</span>, <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">12</span>, <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">13</span>, <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">14</span>, <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">15</span>, <span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>, <span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>, <span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>, <span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3</span>, <span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span>, <span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5</span>, <span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">6</span>, <span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">7</span>, <span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">8</span>, <span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">9</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">3</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">4</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">5</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">6</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">7</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">8</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">9</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">10</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">11</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">12</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">13</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">14</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">15</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">16</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">17</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">18</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">19</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">20</span>)<br><span class="hljs-attribute">ERROR</span>: No matching distribution found for gitpython&gt;=<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>python版本过低，升级即可。</p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>copliot才是代码开发神器</title>
    <link href="/2023/02/04/copliot%E6%89%8D%E6%98%AF%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E7%A5%9E%E5%99%A8/"/>
    <url>/2023/02/04/copliot%E6%89%8D%E6%98%AF%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E7%A5%9E%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="copliot才是代码开发神器">copliot才是代码开发神器</h1><p>本文使用copilot和chatGPT辅助完成</p><p>copilot是微软的AI代码生成器，可以帮助我们快速完成代码编写(这句copilot简介是copilot写的)。在openai的chatGPT出现后，copilot的风头有所下降，直到刚才…… 几分钟前我在写我的博客<a href="https://studyinglover.com/2023/02/04/ThreeJS%E5%AE%9E%E7%8E%B0%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E8%BD%AC3d%E5%9D%90%E6%A0%87/">ThreeJS实现屏幕坐标转3d坐标</a>时，原本的第一段代码是这样的： <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">get3DPosition</span>(<span class="hljs-params">x, y, camera, scene, hyper_z</span>) &#123;<br>        <span class="hljs-keyword">var</span> vector = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector3</span>();<br>        <span class="hljs-comment">// calculate mouse position in normalized device coordinates</span><br>        <span class="hljs-comment">// (-1 to +1) for both components</span><br>        vector.<span class="hljs-property">x</span> = (x / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>        vector.<span class="hljs-property">y</span> = - (y / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        vector.<span class="hljs-property">z</span> = hyper_z;<br><br>        <span class="hljs-comment">// unproject the vector</span><br>        vector.<span class="hljs-title function_">unproject</span>(camera);<br><br>        <span class="hljs-comment">// calculate the ray from the camera to the vector</span><br>        <span class="hljs-keyword">var</span> ray = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Raycaster</span>(camera.<span class="hljs-property">position</span>, vector.<span class="hljs-title function_">sub</span>(camera.<span class="hljs-property">position</span>).<span class="hljs-title function_">normalize</span>());<br><br>        <span class="hljs-comment">// check for intersection with objects in the scene</span><br>        <span class="hljs-keyword">var</span> intersects = ray.<span class="hljs-title function_">intersectObjects</span>(scene.<span class="hljs-property">children</span>);<br>        <span class="hljs-keyword">if</span> (intersects.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> intersects[<span class="hljs-number">0</span>].<span class="hljs-property">point</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure> 正当我写完 &gt; 官方为我们提供了一个接口<code>vector.unproject(camera)</code> 打算粘贴上我的代码时，copilot突然给了我一大段代码提示，并给出了我一段代码</p><p>emmmmmmmmmm,当时的我是有点懵的，我回去看了看当时这段代码的目的，发现这段代码的目的(实不相瞒写到这copilot又给我一段提示(实不相瞒写到这copilot又给我一段提示(......)))先获取点击的坐标点，再获取我点击的3d物体的名称。所以前半部分没问题，真正要改的是后部分。更改后的代码如下： <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">screenToWorld</span>(<span class="hljs-params">screenX, screenY, camera，hyper_z</span>) &#123;<br>    <span class="hljs-keyword">const</span> vector = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector3</span>();<br>    vector.<span class="hljs-title function_">set</span>(<br>        (screenX / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>,<br>        -(screenY / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>,<br>        hyper_z<br>    );<br>    vector.<span class="hljs-title function_">unproject</span>(camera);<br>    vector.<span class="hljs-title function_">applyMatrix4</span>(camera.<span class="hljs-property">matrixWorldInverse</span>);<br>    <span class="hljs-keyword">return</span> vector;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>你以为结束了吗，当我继续往下写我的博客，写道 &gt; 这里的<code>hyper_z</code>网上很多教程认为是写0.5,</p><p>copilot又给我一段代码提示，，这次的提示是这样的 <img src="https://proxy.thisis.plus/20230204214713.png" /> 还好还好，这次代码的目的没搞错，只是整个代码都可能写错了而已……</p><p>经过一番思考，我决定继续按照原先的代码写，因为我已经尝试了代码的效果，勉强可以达到我们的要求。</p><p>最后，我想说的是，copilot真的是一个神器，但是要注意，它只是一个辅助工具，不要完全依赖它，因为它可能会给你一些错误的代码提示，这时候你就要自己去思考了。(这段话还是copilot写的)</p><p>总而言之，Copilot是代码开发领域中高效且创新的工具。它具有易于使用的界面和先进的功能，已被证明是开发人员的游戏规则改变者，并被广泛认为是最终的代码开发工具。无论您是经验丰富的程序员还是刚刚入门，Copilot都提供了您需要的工具，可以比以往更快、更高效地完成工作。(这段话是chatGPT写的)</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Microsoft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThreeJS实现屏幕坐标转3d坐标</title>
    <link href="/2023/02/04/ThreeJS%E5%AE%9E%E7%8E%B0%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E8%BD%AC3d%E5%9D%90%E6%A0%87/"/>
    <url>/2023/02/04/ThreeJS%E5%AE%9E%E7%8E%B0%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E8%BD%AC3d%E5%9D%90%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<h1 id="threejs实现屏幕坐标转3d坐标">ThreeJS实现屏幕坐标转3d坐标</h1><p>本文使用chatGPT辅助完成</p><p>在虚拟世界中，3D坐标与屏幕坐标之间的转换是一个重要的问题。使用ThreeJS开发3D场景时，经常需要将屏幕坐标转换为3D坐标。在本文中，我们将介绍如何使用ThreeJS实现屏幕坐标转3D坐标的两种方法</p><h2 id="根据相机的投影矩阵和射线拾取">根据相机的投影矩阵和射线拾取</h2><p>在我的笔记<a href="https://studyinglover.com/2022/12/29/%E6%91%84%E5%83%8F%E6%9C%BA%E6%A8%A1%E5%9E%8B/">摄像机模型</a>中详细推导了相机的投影矩阵。</p><p>在ThreeJS中，相机的投影矩阵是一个4x4的矩阵，它将3D坐标转换为屏幕坐标。我们可以使用这个矩阵将屏幕坐标转换为3D坐标。 官方为我们提供了一个接口<code>vector.unproject(camera)</code>,它可以将屏幕坐标转换为3D坐标。但是这个接口只能将屏幕坐标转换为相机坐标系下的3D坐标，如果我们需要将屏幕坐标转换为世界坐标系下的3D坐标，我们需要使用<code>vector.applyMatrix4(camera.matrixWorldInverse)</code>将相机坐标系下的3D坐标转换为世界坐标系下的3D坐标。(这里代码本来不是这么写的，但是copilot给了我好多提示，我就照着他的提示改了改，如果你发现代码有问题，问问chatGPT吧)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">screenToWorld</span>(<span class="hljs-params">screenX, screenY, camera，hyper_z</span>) &#123;<br>    <span class="hljs-keyword">const</span> vector = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector3</span>();<br>    vector.<span class="hljs-title function_">set</span>(<br>        (screenX / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>,<br>        -(screenY / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>,<br>        hyper_z<br>    );<br>    vector.<span class="hljs-title function_">unproject</span>(camera);<br>    vector.<span class="hljs-title function_">applyMatrix4</span>(camera.<span class="hljs-property">matrixWorldInverse</span>);<br>    <span class="hljs-keyword">return</span> vector;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>hyper_z</code>网上很多教程认为是写0.5,但是我实际试了一下，发现效果很差，就把他改成了一个超参数。后来在一位不能透露姓名的大佬的帮助下，得知这个参数的值应该写成1。我试了下，勉强可以得到预期的效果</p><h2 id="通过深度图采样shader改深度缓冲">通过深度图采样，shader改深度缓冲</h2><p>这种方法是通过深度图采样，shader改深度缓冲，然后再通过深度缓冲得到3D坐标。这种方法的优点是可以得到更精确的3D坐标，但是缺点是需要使用shader，而且需要修改深度缓冲，可能会影响性能。</p><p>感谢chatGPT，我只需要把我需要的内容告诉他，他就会给我写一个完整的代码。 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">convert2Dto3D</span>(<span class="hljs-params">mouseX, mouseY, camera, width, height, scene</span>) &#123;<br>        <span class="hljs-comment">// 构建纹理</span><br>        <span class="hljs-keyword">var</span> depthTarget = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">WebGLRenderTarget</span>(width, height);<br>        depthTarget.<span class="hljs-property">texture</span>.<span class="hljs-property">minFilter</span> = <span class="hljs-variable constant_">THREE</span>.<span class="hljs-property">LinearFilter</span>;<br><br>        <span class="hljs-comment">// 渲染深度图</span><br>        renderer.<span class="hljs-title function_">render</span>(scene, camera, depthTarget);<br><br>        <span class="hljs-comment">// 创建着色器</span><br>        <span class="hljs-keyword">var</span> material = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">ShaderMaterial</span>(&#123;<br>            <span class="hljs-attr">uniforms</span>: &#123;<br>                <span class="hljs-attr">mouse</span>: &#123; <span class="hljs-attr">value</span>: <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector2</span>(mouseX, mouseY) &#125;,<br>                <span class="hljs-attr">depthMap</span>: &#123; <span class="hljs-attr">value</span>: depthTarget.<span class="hljs-property">texture</span> &#125;,<br>                <span class="hljs-attr">projectionMatrix</span>: &#123; <span class="hljs-attr">value</span>: camera.<span class="hljs-property">projectionMatrix</span> &#125;,<br>                <span class="hljs-attr">viewMatrix</span>: &#123; <span class="hljs-attr">value</span>: camera.<span class="hljs-property">matrixWorldInverse</span> &#125;<br>            &#125;,<br>            <span class="hljs-attr">vertexShader</span>: <span class="hljs-string">`</span><br><span class="hljs-string">                uniform vec2 mouse;</span><br><span class="hljs-string">                uniform mat4 projectionMatrix;</span><br><span class="hljs-string">                uniform mat4 viewMatrix;</span><br><span class="hljs-string">                uniform sampler2D depthMap;</span><br><span class="hljs-string">                varying vec4 pos;</span><br><span class="hljs-string">                void main() &#123;</span><br><span class="hljs-string">                    pos = vec4(position, 1.0);</span><br><span class="hljs-string">                    gl_Position = projectionMatrix * viewMatrix * pos;</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            `</span>,<br>            <span class="hljs-attr">fragmentShader</span>: <span class="hljs-string">`</span><br><span class="hljs-string">                uniform vec2 mouse;</span><br><span class="hljs-string">                uniform sampler2D depthMap;</span><br><span class="hljs-string">                varying vec4 pos;</span><br><span class="hljs-string">                void main() &#123;</span><br><span class="hljs-string">                    float depth = texture2D(depthMap, mouse).r;</span><br><span class="hljs-string">                    vec4 viewPos = vec4(mouse * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);</span><br><span class="hljs-string">                    vec4 worldPos = viewMatrix * viewPos;</span><br><span class="hljs-string">                    worldPos /= worldPos.w;</span><br><span class="hljs-string">                    gl_FragColor = vec4(worldPos.xyz, 1.0);</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            `</span><br>        &#125;);<br><br>        <span class="hljs-comment">// 创建一个平面作为渲染目标</span><br>        <span class="hljs-keyword">var</span> plane = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">PlaneBufferGeometry</span>(width, height);<br>        <span class="hljs-keyword">var</span> mesh = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Mesh</span>(plane, material);<br>        scene.<span class="hljs-title function_">add</span>(mesh);<br><br>        <span class="hljs-comment">// 渲染一次着色器并获取结果</span><br>        renderer.<span class="hljs-title function_">render</span>(scene, camera);<br>        <span class="hljs-keyword">var</span> pixelBuffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-number">4</span>);<br>        renderer.<span class="hljs-title function_">readRenderTargetPixels</span>(depthTarget, mouseX, height - mouseY, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, pixelBuffer);<br>        <span class="hljs-keyword">var</span> worldPos = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector3</span>(<br>            (pixelBuffer[<span class="hljs-number">0</span>] / <span class="hljs-number">255</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>,<br>            (pixelBuffer[<span class="hljs-number">1</span>] / <span class="hljs-number">255</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>,<br>            (pixelBuffer[<span class="hljs-number">2</span>] / <span class="hljs-number">255</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span><br>        );<br>        worldPos.<span class="hljs-title function_">applyMatrix4</span>(camera.<span class="hljs-property">matrixWorldInverse</span>);<br>        scene.<span class="hljs-title function_">remove</span>(mesh);<br>        <span class="hljs-keyword">return</span> worldPos;<br>    &#125;,<br><br>    <span class="hljs-comment">//获取触摸点的坐标并转换为ThreeJS中的坐标</span><br>    <span class="hljs-attr">touch_crash_detect</span>: <span class="hljs-keyword">function</span> <span class="hljs-title function_">touch_crash_detect</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchmove&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">// screen3D_to_3DCoord(event.touches[0].clientX, event.touches[0].clientY,camera, window.innerWidth, window.innerHeight);</span><br>            <span class="hljs-keyword">let</span> pos = space_pos_convert.<span class="hljs-title function_">get3DPosition</span>(event.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientX</span>, event.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientY</span>, camera, scene, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (pos.<span class="hljs-property">y</span> != <span class="hljs-number">0</span>) &#123;<br>                pos.<span class="hljs-property">y</span> = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> pos;<br>            <span class="hljs-comment">// playerMesh.position.set(pos.x, pos.y, pos.z);</span><br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThreeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在fluid主题中加入Google广告</title>
    <link href="/2023/01/27/%E5%9C%A8fluid%E4%B8%BB%E9%A2%98%E4%B8%AD%E5%8A%A0%E5%85%A5Google%E5%B9%BF%E5%91%8A/"/>
    <url>/2023/01/27/%E5%9C%A8fluid%E4%B8%BB%E9%A2%98%E4%B8%AD%E5%8A%A0%E5%85%A5Google%E5%B9%BF%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="在fluid主题中加入google广告">在fluid主题中加入Google广告</h1><p>在fluid的<a href="https://hexo.fluid-dev.com/posts/fluid-adsense/">官方文档</a>中，提供了在fluid主题中加入Google广告的方法，但是其中提到的参数<code>data-ad-slot</code>并没有说清怎么获取，所以我决定详细写一下如何获取。</p><h2 id="注册google-adsense">注册Google Adsense</h2><p>访问<a href="https://www.google.com/adsense/start/">Google Adsense</a>，注册一个账号，然后点击右侧的广告。 <img src="https://proxy.thisis.plus/20230127100353.png" /></p><h2 id="创建一个广告单元">创建一个广告单元</h2><p>选择上方的按广告单元 <img src="https://proxy.thisis.plus/20230127100502.png" /></p><p>这里我选择了推荐的展示广告 <img src="https://proxy.thisis.plus/20230127100605.png" /></p><p>接着自定义广告单元，自定义广告 <img src="https://proxy.thisis.plus/20230127100808.png" /></p><p>接着就能看到广告代码了，其中就有我们需要的<code>data-ad-client</code>和<code>data-ad-slot</code>参数</p><p>例如，我的代码是这样的红框中的就是我们需要的参数 <img src="https://proxy.thisis.plus/20230127101239.png" /></p><h2 id="嵌入到fluid主题中">嵌入到fluid主题中</h2><p>在博客根目录下找到 scripts 文件夹（不存在就创建一个），进入后任意创建一个 js 文件，比如 <code>inject.js</code>，复制以下内容： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;theme_inject&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">injects</span>) &#123;<br>injects.<span class="hljs-property">bodyEnd</span>.<span class="hljs-title function_">raw</span>(<span class="hljs-string">&#x27;adsense&#x27;</span>, <span class="hljs-string">&#x27;&lt;script async src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-xxxxxx&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;&#x27;</span>);<br>injects.<span class="hljs-property">head</span>.<span class="hljs-title function_">raw</span>(<span class="hljs-string">&#x27;adsense&#x27;</span>, <span class="hljs-string">&#x27;&lt;style&gt;ins.adsbygoogle[data-ad-status=&quot;unfilled&quot;] &#123; display: none !important; &#125;&lt;/style&gt;&#x27;</span>);<br>injects.<span class="hljs-property">postLeft</span>.<span class="hljs-title function_">raw</span>(<span class="hljs-string">&#x27;adsense&#x27;</span>, <span class="hljs-string">&#x27;&lt;aside class=&quot;sidebar d-none d-xl-block&quot; style=&quot;margin-right:-1rem;z-index:-1&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:flex;justify-content:center;min-width:160px;max-width:300px;width:100%;height:600px;position:sticky;top:2rem&quot; data-ad-client=&quot;ca-pub-xxxxxx&quot; data-ad-slot=&quot;yyyyyy&quot;&gt;&lt;/ins&gt;&lt;script&gt; (adsbygoogle = window.adsbygoogle || []).push(&#123;&#125;); &lt;/script&gt;&lt;/aside&gt;&#x27;</span>);<br>injects.<span class="hljs-property">postCopyright</span>.<span class="hljs-title function_">raw</span>(<span class="hljs-string">&#x27;adsense&#x27;</span>, <span class="hljs-string">&#x27;&lt;div style=&quot;width:100%;display:flex;justify-content:center;margin-bottom:1.5rem&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:flex;justify-content:center;max-width:845px;width:100%;height:90px&quot; data-ad-client=&quot;ca-pub-xxxxxx&quot; data-ad-slot=&quot;yyyyyy&quot;&gt;&lt;/ins&gt;&lt;script&gt; (adsbygoogle = window.adsbygoogle || []).push(&#123;&#125;); &lt;/script&gt;&lt;/div&gt;&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure> 复制之后，把其中 <code>ca-pub-xxxxxx</code> 和 <code>data-ad-slot="yyyyyy"</code> 换成我们上面获取到的参数即可。</p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>在网页或博客中嵌入ppt</title>
    <link href="/2023/01/26/%E5%9C%A8%E7%BD%91%E9%A1%B5%E6%88%96%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%B5%8C%E5%85%A5ppt/"/>
    <url>/2023/01/26/%E5%9C%A8%E7%BD%91%E9%A1%B5%E6%88%96%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%B5%8C%E5%85%A5ppt/</url>
    
    <content type="html"><![CDATA[<p>当我们想要与他人共享ppt时，除了传统的展示方式外，还将其保存到 OneDrive，然后就可以将其嵌入到网页或博客中。</p><p>嵌入ppt的代码<strong>必须</strong>从PowerPoint <strong>网页版</strong> 获取。</p><p>网页版地址为https://office.live.com/start/PowerPoint.aspx</p><p>在网页版打开ppt后，点击右上角的文件按钮 <img src="https://cdn.jsdelivr.net/gh//StudyingLover/anything/20230126203458.png" /></p><p>选择共享，然后点击嵌入 <img src="https://cdn.jsdelivr.net/gh//StudyingLover/anything/20230126203758.png" /></p><p>可以自由调整大小，然后点击复制，插入你想插入位置即可 <img src="https://cdn.jsdelivr.net/gh//StudyingLover/anything/20230126203942.png" /></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Microsoft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsdelivr加速Github文件</title>
    <link href="/2023/01/20/jsdelivr%E5%8A%A0%E9%80%9FGithub%E6%96%87%E4%BB%B6/"/>
    <url>/2023/01/20/jsdelivr%E5%8A%A0%E9%80%9FGithub%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>假设GitHub路径为<code>https://github.com/username/repo-name/path/to/file</code> ,用jsdelivr可以加速或者在html中引用，路径为<code>https://cdn.jsdelivr.net/gh/username/repo-name/path/to/file</code></p><p>这里实现了一个简单的链接转换函数，可以将GitHub路径转换为jsdelivr路径 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_first_occurrence</span>(<span class="hljs-params">string, substring</span>):<br>    <span class="hljs-keyword">return</span> string.find(substring)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gh_path2jsdelivr</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-keyword">if</span>(find_first_occurrence(path,<span class="hljs-string">&quot;/blob/&quot;</span>) != -<span class="hljs-number">1</span>):<br>        path = path.replace(<span class="hljs-string">&quot;/blob/&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>    <span class="hljs-keyword">if</span>(find_first_occurrence(path,<span class="hljs-string">&quot;/main/&quot;</span>) != -<span class="hljs-number">1</span>):<br>        path = path.replace(<span class="hljs-string">&quot;/main/&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>    <span class="hljs-keyword">if</span>(find_first_occurrence(path,<span class="hljs-string">&quot;/master/&quot;</span>) != -<span class="hljs-number">1</span>):<br>        path = path.replace(<span class="hljs-string">&quot;/master/&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>    <span class="hljs-keyword">return</span> path.replace(<span class="hljs-string">&quot;github.com&quot;</span>, <span class="hljs-string">&quot;cdn.jsdelivr.net/gh&quot;</span>, <span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(gh_path2jsdelivr(<span class="hljs-string">&quot;&quot;</span>))<br><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ThreeJS导入失败</title>
    <link href="/2023/01/13/ThreeJS%E5%AF%BC%E5%85%A5%E5%A4%B1%E8%B4%A5/"/>
    <url>/2023/01/13/ThreeJS%E5%AF%BC%E5%85%A5%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-index.html </span><br><span class="hljs-deletion">-src.js</span><br><span class="hljs-deletion">-node_modules</span><br> -three<br>  -...<br></code></pre></td></tr></table></figure><p>在<code>src.js</code> 中用如下方式导入ThreeJS <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> THREE <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;three&#x27;</span>;<br></code></pre></td></tr></table></figure> <code>index.html</code> body如下 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/src/day01_a.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure> 出现报错 <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Uncaught TypeError: Failed <span class="hljs-built_in">to</span> <span class="hljs-built_in">resolve</span> module specifier <span class="hljs-string">&quot;three&quot;</span>. Relative references must <span class="hljs-built_in">start</span> <span class="hljs-keyword">with</span> either <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;./&quot;</span>, <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;../&quot;</span>.<br></code></pre></td></tr></table></figure> <img src="https://proxy.thisis.plus/20230103172514.png" alt="image.png" /> ## 解决方案 stackoverflow给出了解决方案https://stackoverflow.com/questions/65697410/not-using-node-js-uncaught-typeerror-failed-to-resolve-module-specifier-thre</p><figure><img src="https://proxy.thisis.plus/20230103172625.png" alt="" /><figcaption>image.png</figcaption></figure><p>删除<code>src.js</code>的导入，将<code>index.html</code> body改为 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/node_modules/three/build/three.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/src/day01_a.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThreeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>摄像机模型</title>
    <link href="/2022/12/29/%E6%91%84%E5%83%8F%E6%9C%BA%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/12/29/%E6%91%84%E5%83%8F%E6%9C%BA%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="摄像机模型">摄像机模型</h1><p>本文是鲁鹏老师机器视觉课程的笔记</p><h2 id="针孔模型与透镜">针孔模型与透镜</h2><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222201922.png" alt="" /><figcaption>image.png</figcaption></figure><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222201951.png" alt="" /><figcaption>image.png</figcaption></figure><p>虚拟像平面是倒着的</p><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222202148.png" alt="" /><figcaption>image.png</figcaption></figure><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222202224.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\(\dfrac{y&#39;}{f}=\dfrac{y}{z}\quad\implies y&#39;=f\dfrac{y}{z}\)</span></p><p><span class="math inline">\(\dfrac{x&#39;}{f}=\dfrac{x}{z}\quad\implies x&#39;=f\dfrac{x}{z}\)</span> <span class="math inline">\(P=\begin{bmatrix}x\\ y\\ z\end{bmatrix}\to P&#39;=\begin{bmatrix}x&#39;\\ y&#39;\end{bmatrix}\quad\quad\)</span></p><p><span class="math inline">\(\begin{cases}x&#39;=f\dfrac{x}{Z}\\ y&#39;=f\dfrac{y}{Z}\end{cases}\)</span></p><h3 id="光圈尺寸">光圈尺寸</h3><p>光圈偏大会导致场景模糊</p><p>光圈偏小会场景清晰，但偏暗 <img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222203219.png" alt="image.png" /></p><p><strong>增加透镜</strong> - 透镜将多条光线聚焦到胶片上，增加了照片的亮度： - 所有平行于光轴的光线都会会聚到焦点，焦点到透镜中心的距离称为焦距 - 穿过中心的光线的方向不发生改变</p><p><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222203452.png" alt="image.png" /> 根据折射定律： <span class="math inline">\(f=\frac{ {R} }{ {2}({n}-1)}\)</span> ,<span class="math inline">\(R\)</span> 是透镜球面半径，<span class="math inline">\(n\)</span>是透镜折射系数</p><p><span class="math inline">\(z&#39;=f+z_0\quad\begin{cases}x&#39;=z&#39;\dfrac{x}{z}\\ y&#39;=z&#39;\dfrac{y}{z}\end{cases}\)</span></p><p>要是透镜不合适，则会发生失焦 <img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222203756.png" alt="image.png" /></p><p>透镜将光线聚焦到胶片上 - 物体“聚焦”有特定距离 - 景深</p><h3 id="径向畸变">径向畸变</h3><p>图像中所成的像发生形变</p><p>径向畸变:图像像素点以畸变中心为中心点,沿着径向产生的位置偏差,从而导致</p><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222204142.png" alt="" /><figcaption>image.png</figcaption></figure><p>枕形畸变：畸变像点相对于理想像点沿径向向外偏移,远离中心 桶形畸变：畸变像点相对于理想点沿径向向中心靠拢</p><h2 id="摄像机几何">摄像机几何</h2><h3 id="齐次坐标">齐次坐标</h3><p><span class="math inline">\(E\to H\)</span> 图像点的齐次坐标<span class="math inline">\(\text{}(x,y)\Rightarrow\left[\begin{array}{c}x\\ y\\ 1\end{array}\right]\)</span></p><p>空间点的齐次坐标<span class="math inline">\((x,y,z)\Rightarrow\left[\begin{array}{c}x\\ y\\ z\\ 1\end{array}\right]\)</span></p><p><span class="math inline">\(H \to E\)</span> <span class="math inline">\(\left[\begin{array}{c}x\\ y\\ w\end{array}\right]\Rightarrow\left(x/w,y/w\right)\)</span></p><p><span class="math inline">\(\left[\begin{array}{c}x\\ y\\ z\\ w\end{array}\right]\Rightarrow\left(x/w,y/w,z/w\right)\)</span></p><p><span class="math inline">\(H \to E\)</span> 的转变不是唯一的，但<span class="math inline">\(E \to H\)</span> 的转变是唯一的</p><h3 id="像素坐标系">像素坐标系</h3><p>建立像平面到像素平面关系</p><ol type="1"><li>偏置</li></ol><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222204440.png" alt="" /><figcaption>image.png</figcaption></figure><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222204450.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\((x,y,z)\to(f\dfrac{x}{z}+c_x,f\dfrac{y}{z}+c_y)\)</span></p><ol start="2" type="1"><li>单位变换 <span class="math inline">\((x,y,z)\to({fk}\frac{x}{z}+c_x,{fl}\frac{y}{z}+c_y)\)</span> 单位：k.l：pixel/m , f:m k表示竖直方向上多少米表示一个像素，l表示水平方向上多少米表示一个像素</li></ol><p>记<span class="math inline">\(fk\)</span>为<span class="math inline">\(\alpha\)</span> ,<span class="math inline">\(fl\)</span>为<span class="math inline">\(\beta\)</span> <span class="math inline">\(P=(x,y,z)\rightarrow P^{\prime}=\left(\alpha{\frac{x}{z} }+c_{x},\beta{\frac{y}{z} }+c_{y}\right)\)</span> ，这里的<span class="math inline">\(c_x,c_y\)</span>是像素上的偏置</p><p><span class="math inline">\(P=(x,y,z)\rightarrow P^{\prime}=\left(\alpha{\frac{x}{z} }+c_{x},\beta{\frac{y}{z} }+c_{y}\right)\)</span>是非线性变换</p><p>在齐次坐标系下 <span class="math inline">\(P_h&#39;=\begin{bmatrix}\alpha x+c_x z\\ \beta y+c_yz\\ z\end{bmatrix}=\begin{bmatrix}\alpha&amp;0&amp;c_x&amp;0\\ 0&amp;\beta&amp;c_y&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\begin{bmatrix}x\\y\\z\\1\end{bmatrix}\)</span></p><p><span class="math inline">\(P&#39;_h\to P&#39;=(\alpha\dfrac{x}{z}+c_x,\beta\dfrac{y}{z}+c_y)\)</span></p><p><span class="math inline">\(P&#39;_h\)</span>是齐次，<span class="math inline">\(P&#39;\)</span> 是欧式</p><h3 id="摄像机的投影矩阵">摄像机的投影矩阵</h3><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222210401.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\(P&#39;=\begin{bmatrix}\alpha&amp;0&amp;c_x&amp;0\\ 0&amp;\beta&amp;c_y&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\begin{bmatrix}x\\ y\\ z\\ 1\end{bmatrix}=MP\)</span></p><p>其中<span class="math inline">\(M=\begin{bmatrix}\alpha&amp;-\alpha\cot\theta&amp;c_x&amp;0\\ 0&amp;\dfrac{\beta}{sin\theta}&amp;c_y&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\)</span></p><p>此时<span class="math inline">\(P\)</span>和<span class="math inline">\(P&#39;\)</span> 是线性表示 <span class="math inline">\(P&#39;\)</span>是<span class="math inline">\(3*1\)</span>矩阵，<span class="math inline">\(P\)</span> 是<span class="math inline">\(4*1\)</span>矩阵</p><h3 id="摄像机偏斜">摄像机偏斜</h3><p><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222210931.png" alt="image.png" /> <span class="math inline">\(P&#39;=\begin{bmatrix}\alpha&amp;-\alpha\cot\theta&amp;c_x&amp;0\\ 0&amp;\frac{\beta}{sin\theta}&amp;c_y&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\begin{bmatrix}x\\ y\\ z\\ 1\end{bmatrix}\)</span></p><h3 id="摄像机坐标系下的摄像机模型">摄像机坐标系下的摄像机模型</h3><p><span class="math inline">\(P&#39;=\begin{bmatrix}\alpha&amp;-\alpha\cot\theta&amp;c_x&amp;0\\ 0&amp;\frac{\beta}{sin\theta}&amp;c_y&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\begin{bmatrix}x\\ y\\ z\\ 1\end{bmatrix}=MP\)</span></p><p><span class="math inline">\(M=\begin{bmatrix}\alpha&amp;-\alpha\cot\theta&amp;c_x&amp;0\\ 0&amp;\frac{\beta}{sin\theta}&amp;c_y&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\)</span>被称为投影矩阵，</p><p><span class="math inline">\(K=\begin{bmatrix}\alpha&amp;-\alpha\cot\theta&amp;c_x\\ 0&amp;\frac{\beta}{sin\theta}&amp;c_y\\ 0&amp;0&amp;1\end{bmatrix}\)</span> 被称为摄像机内参数矩阵，内参数矩阵决定了摄像机坐标系下空间点到图像点的映射</p><p>摄像机内参数为<span class="math inline">\(\alpha,\beta,c_x,c_y,\theta\)</span>，K有五个自由度</p><h3 id="规范化投影变换">规范化投影变换</h3><p><span class="math inline">\(P&#39;=\begin{bmatrix}x\\ y\\ z\end{bmatrix}=\begin{bmatrix}1&amp;0&amp;0&amp;0\\ 0&amp;1&amp;0&amp;0\\ 0&amp;0&amp;1&amp;0\end{bmatrix}\begin{bmatrix}x\\ y\\ z\\ 1\end{bmatrix}\)</span></p><p>已知摄像机矩阵<span class="math inline">\(M\)</span> , <span class="math inline">\(P&#39;=I(MP)\)</span>,<span class="math inline">\(I=\begin{bmatrix}1&amp;0&amp;0\\ 0&amp;1&amp;0\\ 0&amp;0&amp;1\end{bmatrix}\)</span></p><p><span class="math inline">\(\begin{array}{c}\Re^4\xrightarrow{H}\Re^3\\ \boldsymbol{P&#39;}=M\boldsymbol{P}\end{array}\)</span></p><p><span class="math inline">\(P\)</span> 的欧式坐标<span class="math inline">\(\left[\begin{array}{c}{ {\frac{x}{z} }}\\ { {\frac{y}{z} }}\\ \end{array}\right]\)</span></p><h3 id="世界坐标系">世界坐标系</h3><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222212628.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\(O_w\)</span> 为世界坐标系 <span class="math inline">\(O\)</span>摄像机坐标系,<span class="math inline">\(C&#39;\)</span>像平面坐标系</p><p>齐次坐标系<span class="math inline">\(P=\left[\begin{matrix}{R}&amp;{T}\\ {0}&amp;{1}\\ \end{matrix}\right]\boldsymbol{P}_{w}\)</span> , <span class="math inline">\(\begin{bmatrix}x_w\\ y_w\\ z_w\\ 1\end{bmatrix}\)</span> ，即摄像机坐标系是世界坐标系经过一个旋转，再经过一个平移得到的</p><p>世界坐标系下<span class="math inline">\(P_w=R^T(P-T)\)</span></p><p>从世界坐标系到像素坐标系<span class="math inline">\(P&#39;=K[I\quad0]P=K[I\quad0]\begin{bmatrix}R&amp;T\\ 0&amp;1\end{bmatrix}P_w=K[R\quad T]P_w=MP_w=\left[{\begin{matrix}{m_{1} }\\ {m_{2} }\\ {m_{3} }\end{matrix} }\right]P_{\mathrm{w} }\)</span> <span class="math inline">\(\begin{bmatrix}R &amp; T\end{bmatrix}\)</span>称为外参数矩阵，K是内参数，这就是完整的摄像机模型</p><p><span class="math inline">\(M\)</span> 称为投影矩阵，有11个自由度</p><p>摄像机O点坐标为<span class="math inline">\(-R^TT\)</span></p><p><span class="math inline">\(\left[{\begin{matrix}{m_{1} }\\ {m_{2} }\\ {m_{3} }\end{matrix} }\right]P_{\mathrm{w} }\)</span> 是转换为欧式坐标系的写法，<span class="math inline">\(m_i\)</span> 是一个<span class="math inline">\(1*4\)</span> 的矩阵</p><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222215030.png" alt="" /><figcaption>image.png</figcaption></figure><h3 id="投影变化的性质">投影变化的性质</h3><ol type="1"><li>点投影为点</li><li>线投影为线</li><li>近大远小</li><li>角度不再保持</li><li>平行线相交</li></ol><h2 id="其他摄像机模型">其他摄像机模型</h2><h3 id="透视投影摄像机">透视投影摄像机</h3><p>^b240bc</p><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222220419.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\(P&#39;_{3\times1}=MP_W=K_{3\times3}[R\quad T]_{3\times4}P_{W4\times1}=\begin{bmatrix}m_1\\ m_2\\ m_3\end{bmatrix}P_w=\begin{bmatrix}m_1P_w\\ m_2P_w\\ m_3P_w\end{bmatrix}\stackrel{E}{\longrightarrow}(\dfrac{m_1P_w}{m_3P_w},\dfrac{m_2P_w}{m_3P_w})\quad,M=\begin{bmatrix}m_1\\ m_2\\ m_3\end{bmatrix}\)</span><br />### 弱透视投影摄像机</p><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222220925.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\(\begin{cases}x&#39;=\dfrac{f&#39;}{z}x\\ y&#39;=\dfrac{f&#39;}{z}y\end{cases}\rightarrow\begin{cases}x&#39;=\dfrac{f&#39;}{z_0}x\\ y&#39;=\dfrac{f}{z_0}y\end{cases}\)</span></p><p>从投影（透视）到弱透视<span class="math inline">\(M=K[RT]=\begin{bmatrix}A_{2\times3}&amp;b_{2\times1}\\ v_{1\times2}&amp;1\end{bmatrix}\quad\to M=\begin{bmatrix}A&amp;b\\ 0&amp;1\end{bmatrix}\quad\)</span></p><p><span class="math inline">\(P&#39;=MP_w=\begin{bmatrix}m_1\\ m_2\\ m_3\end{bmatrix}P_w=\begin{bmatrix}m_1P_w\\ m_2P_w\\ 1\end{bmatrix}\stackrel{E}{\longrightarrow}\left(m_{1}P_{W},m_{2}P_{w}\right)\)</span> ,<span class="math inline">\(m_1,m_2\)</span> 为放大率</p><p><span class="math inline">\(M=\begin{bmatrix}A&amp;b\\ v&amp;1\end{bmatrix}=\begin{bmatrix}m_1\\ m_2\\ m_3\end{bmatrix}=\begin{bmatrix}&amp;m_1&amp;\\ &amp;m_2&amp;\\ 0&amp;0&amp;0&amp;1\end{bmatrix}\)</span></p><h3 id="正交投影摄像机">正交投影摄像机</h3><figure><img src="https://raw.githubusercontent.com/StudyingLover/anything/main/20221222222006.png" alt="" /><figcaption>image.png</figcaption></figure><p><span class="math inline">\(\begin{cases}x&#39;=\dfrac{f&#39;}{z}x\\ y&#39;=\dfrac{f&#39;}{z}y\end{cases}\quad\to\quad\begin{cases}x&#39;=x\\ y&#39;=y\end{cases}\)</span></p><h3 id="各种摄像机模型的应用场合">各种摄像机模型的应用场合</h3><ul><li>正交投影<ul><li>更多应用在建筑设计(AUTOCAD)或者工业设计行业</li></ul></li><li>弱透视投影在数学方面更简单<ul><li>当物体较小且较远时准确，常用于图像识别任务</li></ul></li><li>透视投影对于3D到2D映射的建模更为准确<ul><li>用于运动恢复结构或SLAM</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
